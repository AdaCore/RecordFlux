package IPv4 is

   type Version is range 4 .. 4 with Size => 4;
   type IHL is range 5 .. 15 with Size => 4;
   type DCSP is mod 2**6;
   type ECN is mod 2**2;
   type Total_Length is range 20 .. 2**16 - 1 with Size => 16;
   type Identification is mod 2**16;
   type Flag is (Flag_False, Flag_True) with Size => 1;
   type Fragment_Offset is mod 2**13;
   type TTL is mod 2**8;
   type Protocol is (PROTOCOL_UDP => 17) with Size => 8, Always_Valid;
   type Header_Checksum is mod 2**16;
   type Address is mod 2**32;

   type Option_Class is (Control => 0, Debugging_And_Measurement => 2) with Size => 2;
   type Option_Number is mod 2**5;
   type Option_Length is range 2 .. 2**8 - 1 with Size => 8;

   type Option is
      message
         Copied : Flag;
         Option_Class : Option_Class;
         Option_Number : Option_Number
            then null
               if Option_Class = Control and Option_Number = 1,
            then Option_Length
               if Option_Number > 1;
         Option_Length : Option_Length
            then Option_Data
               with Length => (Option_Length - 2) * 8
               if (Option_Class = Control and Option_Number = 2 and Option_Length = 11)
                  or (Option_Class = Control and Option_Number = 8 and Option_Length = 4)
                  or (Option_Class = Control and (Option_Number = 3 or Option_Number = 7 or Option_Number = 9))
                  or (Option_Class = Debugging_And_Measurement and Option_Number = 4);
         Option_Data : Payload;
      end message;

   type Options is array of Option;

   type Packet is
      message
         Version : Version;
         IHL : IHL;
         DSCP : DCSP;
         ECN : ECN;
         Total_Length : Total_Length
            then Identification
               if Total_Length >= IHL * 4;
         Identification : Identification;
         Flag_R : Flag
            then Flag_DF
               if Flag_R = Flag_False;
         Flag_DF : Flag;
         Flag_MF : Flag;
         Fragment_Offset : Fragment_Offset;
         TTL : TTL;
         Protocol : Protocol;
         Header_Checksum : Header_Checksum;
         Source : Address;
         Destination : Address
            then Payload
               with Length => Total_Length * 8 - (5 * 32)
               if IHL = 5,
            then Options
               with Length => IHL * 32 - (5 * 32)
               if IHL > 5;
         Options : Options
            then Payload
               with Length => Total_Length * 8 - (IHL * 32);
         Payload : Payload;
      end message;

end IPv4;

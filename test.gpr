with "aunit";
with "defaults";

project Test is

   type Flag_Type is ("yes", "no");
   AUnit : Flag_Type := external ("aunit", "yes");
   Optimization : Flag_Type := external ("optimization", "no");
   Test := external ("test", "");

   Spec_Dir := "examples/specs";
   Test_Dir := "tests/spark";
   Generated_Dir := "tests/spark/generated";
   Proof_Dir := "tests/spark/proof";

   for Languages use ("Ada", "RecordFlux");

   package Compiler is
      for Driver ("RecordFlux") use "";
   end Compiler;

   package Naming is
      for Spec_Suffix ("RecordFlux") use ".rflx";
   end Naming;

   package RecordFlux is
      for Output_Dir use Generated_Dir;
   end RecordFlux;

   case AUnit is
      when "yes" =>
         for Source_Dirs use (Test_Dir, Generated_Dir, Spec_Dir);
         case Test is
            when "" =>
               for Main use ("test.adb");
            when others =>
               for Main use ("test_" & Test & ".adb");
         end case;
      when "no" =>
         for Source_Dirs use (Generated_Dir, Spec_Dir);
   end case;

   for Object_Dir use "build";
   for Create_Missing_Dirs use "True";

   package Builder is
      case Optimization is
         when "yes" =>
            for Default_Switches ("Ada") use Defaults.Builder_Switches & ("-O3");
         when "no" =>
            for Default_Switches ("Ada") use Defaults.Builder_Switches & Defaults.Compiler_Switches;
      end case;
   end Builder;

   package Binder is
      for Default_Switches ("Ada") use Defaults.Binder_Switches;
   end Binder;

   package Prove is
      for Proof_Dir use Proof_Dir;
      for Proof_Switches ("Ada") use Defaults.Proof_Switches;
   end Prove;

end Test;

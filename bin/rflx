#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import sys

from typing import List, Tuple

from rflx.expression import ExpressionError
from rflx.generator import Generator, GeneratorError
from rflx.model import ModelError
from rflx.parser import Parser, ParseFatalException, ParserError


def main() -> None:
    arg_parser = argparse.ArgumentParser(description='RecordFlux')
    arg_parser.add_argument('-g', '--generate', action='store_true', help='generate dissector code')
    arg_parser.add_argument('-o', '--output', metavar='DIR', type=str,
                            help='output directory for dissector code')
    arg_parser.add_argument('files', metavar='FILE', type=str, nargs='+')
    args = arg_parser.parse_args()

    pdus, refinements = parse(args.files)

    if args.generate:
        generate(pdus, refinements, args.output)


def parse(files: List) -> Tuple[List, List]:
    parser = Parser()

    for f in files:
        try:
            print('Parsing {}... '.format(f), end='')
            parser.parse(f)
            print('OK')
        except ParseFatalException as e:
            print('\nSyntax error: {}'.format(e))
            sys.exit(1)
        except ParserError as e:
            print('\nParser error: {}'.format(e))
            sys.exit(1)

    return (parser.pdus, parser.refinements)


def generate(pdus: List, refinements: List, output: str) -> None:
    generator = Generator()

    try:
        print('Generating... ', end='')
        generator.generate_dissector(pdus, refinements)
        written_files = generator.write_units(output)
        print('OK')
        for f in written_files:
            print(f'Created {f}')
    except GeneratorError as e:
        print('\nGenerator error: {}'.format(e))
        sys.exit(1)
    except (ModelError, ExpressionError) as e:
        print('\nModel error: {}'.format(e))
        sys.exit(1)


if __name__ == '__main__':
    main()

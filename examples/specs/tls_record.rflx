with TLS_Alert;
with Tls_Common;
with Tls_Handshake;
with Tls_Parameters;

package TLS_Record is

   -- The current specification models a subset of TLS 1.3 (RFC 8446) and DTLS
   -- 1.3 (RFC 9147). The two standards are closely related and share a lot of
   -- the message structure and logic.
   --
   -- NOTE: The messages in the 1.3 versions of both of these standards are
   -- generally backwards compatible with the 1.2 versions of the respective
   -- standards. However, the usage of extensions is more restricted in the 1.3
   -- versions of the standards than in the earlier versions. The current
   -- specification enforces the version 1.3 constraints on extensions. However,
   -- this specification could potentially still be used for older versions of
   -- TLS / DTLS provided that these constraints have been met.

   ----------------------
   -- Plaintext record --
   ----------------------

   -- The record layer in DTLS 1.3 differs from the record layer in TLS 1.3, as
   -- well as from the record layers in DTLS 1.2 and TLS 1.2. In DTLS 1.3 there
   -- exist two "top-level" record types: DTLSPlaintext and DTLSCiphertext.
   -- Whereas, in all of the other the "top-level" record type is
   -- (D)TLSPlaintext that may, however, carry an encrypted payload.

   -- (D)TLSPlaintext records start with an 8 bit content type descriptor with
   -- values going potentially up to 31 (16#1F). I.e., the first 3 bits remain
   -- always "000". On the other hand, DTLSCiphertext records start with a
   -- prefix "001" that is followed by several bit-fields. To allow for
   -- demultiplixing of both kinds of records we hence split the first byte also
   -- in all plaintext records into a 3 bit prefix and 5 bit content type.
   type Plaintext_Prefix is range 0 .. 0 with Size => 3;

   -- Note: This type is essentially the same as Tls_Parameters::TLS_ContentType.
   -- However, for the specific demuxing of DTLS 1.3 records it has been defined
   -- with the length of 5 bits.
   type Plaintext_Content_Type is
      (Change_Cipher_Spec => 20,  -- TLS < 1.3, DTLS <1.3
       Alert              => 21,
       Handshake          => 22,
       Application_Data   => 23,  -- TLS < 1.3, DTLS <1.3
       Heartbeat          => 24,  -- TLS <= 1.3, DTLS <1.3 (RFC 6520)
       Tls12_Cid          => 25,  -- DTLS 1.2/1.3 (Ciphertext with CID)
       ACK                => 26)  -- DTLS 1.3 (Plaintext)
   with Size => 5;

   type Plaintext_Length is range 0 .. 2 ** 14 + 256 with Size => 16;

   --  In DTLS 1.3 a plaintext epoch can only have value 0 (see RFC 9147
   --  Section 4). In DTLS 1.2 such a limitation does not exist (see RFC 6347).
   --  Hence, the allowed values are not constrained here.
   type Plaintext_Epoch is range 0 .. 2 ** 16 - 1 with Size => 16;

   type Plaintext_Sequence_Number is range 0 .. 2 ** 48 - 1 with Size => 48;

   -- Represents both RFC 8446 TLSPlaintext and RFC 9147 DTLSPlaintext
   type TLS_Plaintext is
      message
         Prefix : Plaintext_Prefix;
         Tag : Plaintext_Content_Type;
         Legacy_Record_Version : Tls_Common::Protocol_Version
            -- TLS
            then Length
               if (Legacy_Record_Version = Tls_Common::TLS_1_0
                  or Legacy_Record_Version = Tls_Common::TLS_1_1
                  or Legacy_Record_Version = Tls_Common::TLS_1_2
                  or Legacy_Record_Version = Tls_Common::TLS_1_3)
                  and
                     -- The following content types are not defined for TLS
                     (Tag /= Tls12_Cid and Tag /= ACK)
            -- DTLS
            then Epoch
               if Legacy_Record_Version /= Tls_Common::TLS_1_0
                  and Legacy_Record_Version /= Tls_Common::TLS_1_1
                  and Legacy_Record_Version /= Tls_Common::TLS_1_2
                  and Legacy_Record_Version /= Tls_Common::TLS_1_3;
         Epoch : Plaintext_Epoch;
         Sequence_Number : Plaintext_Sequence_Number;
         Length : Plaintext_Length
            then Fragment
               with Size => Length * 8
               if Tag /= Application_Data and Length <= 2 ** 14
            then Encrypted_Record
               with Size => Length * 8
               if Tag = Application_Data
                  and (Legacy_Record_Version = Tls_Common::TLS_1_2
                     or Legacy_Record_Version = Tls_Common::DTLS_1_2);
         Fragment : Opaque
            then null;
         Encrypted_Record : Opaque;
      end message;

   -- Refinements for the TLS_Plaintext type.
   -- NOTE: Corresponding refinements must also be defined for the TLS_Record
   -- type further below.

   -- TLS Handshake
   -- TODO(eng/recordflux/RecordFlux#786): This refinement might also be
   -- simplified and merged with the similar one for DTLS_Handshake. See
   -- tls_handshake.rflx for more information.
   for TLS_Plaintext use (Fragment => TLS_Handshake::TLS_Handshake)
      if Tag = Handshake
         and (Legacy_Record_Version = Tls_Common::TLS_1_0
               or Legacy_Record_Version = Tls_Common::TLS_1_1
               or Legacy_Record_Version = Tls_Common::TLS_1_2
               or Legacy_Record_Version = Tls_Common::TLS_1_3);

   -- DTLS Handshake
   for TLS_Plaintext use (Fragment => TLS_Handshake::DTLS_Handshake)
      if Tag = Handshake
         and (Legacy_Record_Version /= Tls_Common::TLS_1_0
                  and Legacy_Record_Version /= Tls_Common::TLS_1_1
                  and Legacy_Record_Version /= Tls_Common::TLS_1_2
                  and Legacy_Record_Version /= Tls_Common::TLS_1_3);

   for TLS_Plaintext use (Fragment => TLS_Alert::Alert)
      if Tag = Alert;

   -----------------------
   -- Ciphertext record --
   -----------------------

   -- DTLS Ciphertext records start with a prefix "001" that is followed by
   -- several bit-fields.
   type Ciphertext_Prefix is range 1 .. 1 with Size => 3;

   --  Two lower bits of the Epoch value.
   type Epoch_Low is range 0 .. 3 with Size => 2;

   --  RFC 9146
   type CID is range 0 .. 2 ** 8 - 1 with Size => 8;

   type Ciphertext_Sequence_Number_8 is range 0 .. 2 ** 8 - 1 with Size => 8;

   type Ciphertext_Sequence_Number_16 is range 0 .. 2 ** 16 - 1 with Size => 16;

   --  RFC 8446 5.2
   type Ciphertext_Length is range 0 .. 2 ** 14 + 256 with Size => 16;

   type DTLS_Ciphertext is
      message
         --  The three high bits of the first byte of the unified header are
         --  fixed to the value "001".
         Prefix : Ciphertext_Prefix;
         --  Connection ID (CID) field present: 0 = False, 1 = True
         CID_Present : Boolean;
         --  Sequence number size in bits: 0 = 8 bits, 1 = 16 bits
         Seq_Size_16 : Boolean;
         --  Length field present: 0 = False, 1 = True
         Length_Present : Boolean;
         --  Two lower bits of the Epoch value.
         Epoch_Low : Epoch_Low
            then CID if CID_Present = True
            then Sequence_Number_8 if CID_Present = False and Seq_Size_16 = False
            then Sequence_Number_16 if CID_Present = False and Seq_Size_16 = True;
         --  Connection ID: RFC 9146
         CID : CID
            then Sequence_Number_8 if Seq_Size_16 = False
            then Sequence_Number_16 if Seq_Size_16 = True;
         --  8-bit Sequence Number
         Sequence_Number_8 : Ciphertext_Sequence_Number_8
            then Length if Length_Present = True
            then Encrypted_Record if Length_Present = False;
         --  16-bit Sequence Number
         Sequence_Number_16 : Ciphertext_Sequence_Number_16
            then Length if Length_Present = True
            then Encrypted_Record if Length_Present = False;
         Length : Ciphertext_Length
            then Encrypted_Record
               with Size => Length * 8;
            --  If the Length field has been given, then the length of the
            --  Encrypted_Record must comply with that. Otherwise, it is
            --  expected to extend until the end of the message buffer.
         Encrypted_Record : Opaque;
      end message;

   ---------------------------------
   -- Top-level TLS / DTLS record --
   ---------------------------------

   -- A common message type that can represent the top-level TLS or DTLS record.

   type Prefix is range 0 .. 1 with Size => 3;

   type TLS_Record is
      message
         Prefix : Prefix
            then Plaintext_Rec
               with First => Prefix'First
               if Prefix = 0
            then Ciphertext_Rec
               with First => Prefix'First
               if Prefix = 1;
         Plaintext_Rec : TLS_Plaintext
            then null;
         Ciphertext_Rec : DTLS_Ciphertext;
      end message;

   -- The refinements concerning the nested message type in the field
   -- Plaintext_Rec are not automatically lifted to the containing type. Hence,
   -- they are explicitly defined here again.
   --
   -- TODO(eng/recordflux/RecordFlux#1442): Consider lifting the refinements
   -- automatically.

   for TLS_Record use (Plaintext_Rec_Fragment => TLS_Handshake::TLS_Handshake)
      if Plaintext_Rec_Tag = Handshake
         and (Plaintext_Rec_Legacy_Record_Version = Tls_Common::TLS_1_0
               or Plaintext_Rec_Legacy_Record_Version = Tls_Common::TLS_1_1
               or Plaintext_Rec_Legacy_Record_Version = Tls_Common::TLS_1_2
               or Plaintext_Rec_Legacy_Record_Version = Tls_Common::TLS_1_3);

   for TLS_Record use (Plaintext_Rec_Fragment => TLS_Handshake::DTLS_Handshake)
      if Plaintext_Rec_Tag = Handshake
         and (Plaintext_Rec_Legacy_Record_Version /= Tls_Common::TLS_1_0
                  and Plaintext_Rec_Legacy_Record_Version /= Tls_Common::TLS_1_1
                  and Plaintext_Rec_Legacy_Record_Version /= Tls_Common::TLS_1_2
                  and Plaintext_Rec_Legacy_Record_Version /= Tls_Common::TLS_1_3);

   for TLS_Record use (Plaintext_Rec_Fragment => TLS_Alert::Alert)
      if Plaintext_Rec_Tag = Alert;

end TLS_Record;

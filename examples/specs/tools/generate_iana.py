#!/usr/bin/env -S python3 -O

"""
This tool fetches the current version of the IANA Assigned Internet Protocol Numbers document and
generates a RecordFlux specification out of it.
"""

import re
import sys
import urllib.request
import xml.etree.ElementTree as et
from datetime import datetime
from typing import Dict, List, Tuple


def to_identifier(text: str) -> str:
    src = "-_ ./"
    dst = "_____"
    result = re.sub(r"(.*)\s+\(deprecated\)", r"Deprecated_\1", text)
    result = result.translate(result.maketrans(src, dst))
    result = re.sub(r"\+", "_Plus", result)
    return result


URL = "https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xml"
NAMESPACES = {"IANA": "http://www.iana.org/assignments"}

response = urllib.request.urlopen(URL)
xmldoc = response.read().decode("utf-8")
root = et.fromstring(xmldoc)

registry = root.find("IANA:registry", NAMESPACES)
title = root.find("IANA:title", NAMESPACES)
updated = root.find("IANA:updated", NAMESPACES)

if registry is None or title is None or updated is None:
    print("Invalid registry format")
    sys.exit(1)

assert title.text
assert updated.text

protocols: Dict[int, Tuple[str, str, List[str]]] = {}
duplicates: Dict[str, int] = {}
people: Dict[str, Tuple[str, str]] = {}

for person in root.findall("IANA:people", NAMESPACES)[0]:
    name = person.find("IANA:name", NAMESPACES)
    uri = person.find("IANA:uri", NAMESPACES)
    assert name is not None and name.text is not None
    assert uri is not None and uri.text is not None
    people[person.attrib["id"]] = (
        name.text,
        re.sub("mailto:(.*)&(.*)", r"\1@\2", uri.text),
    )

for record in registry.findall("IANA:record", NAMESPACES):
    name = record.find("IANA:name", NAMESPACES)
    value = record.find("IANA:value", NAMESPACES)
    description = record.find("IANA:description", NAMESPACES)
    if name is None and description is None:
        continue
    if value is None:
        print("Invalid value format")
        sys.exit(1)
    assert value.text is not None
    try:
        v = int(value.text)
    except ValueError:
        continue
    if name is None:
        assert description is not None and description.text is not None
        PNAME = description.text
    else:
        assert name.text is not None
        PNAME = name.text
    PNAME = to_identifier(PNAME)
    if description is None:
        assert name is not None and name.text is not None
        DESCR = name.text
    else:
        assert description.text is not None
        DESCR = description.text
    XREFS: List[str] = []
    for xref in record.findall("IANA:xref", NAMESPACES):
        if xref.attrib["type"] == "rfc":
            XREFS.append("https://tools.ietf.org/html/" + xref.attrib["data"])
        elif xref.attrib["type"] == "text":
            assert xref.text is not None
            XREFS.append(xref.text)
        elif xref.attrib["type"] == "person":
            person_name, email = people[xref.attrib["data"]]
            XREFS.append(f"{person_name} <{email}>")
        elif xref.attrib["type"] == "draft":
            XREFS.append(f"DRAFT: {xref.attrib['data']}")
        else:
            raise NotImplementedError(f"Unknown attribute type {xref.attrib['type']}")
    protocols[v] = (PNAME, DESCR, XREFS)
    if PNAME in duplicates:
        duplicates[PNAME] += 1
    else:
        duplicates[PNAME] = 1
    XREFS = []

bits = max(protocols.keys()).bit_length()

print(f"--  AUTOMATICALLY GENERATED BY {__file__}, DO NOT EDIT.")
print(f"--  Generated: {datetime.now().strftime('%Y-%m-%d')}")
print(f"--  Updated:   {updated.text}")
print("package IANA is")
print(f"   -- {title.text}")
print("   type Protocol_Number is")
print("      (", end="")

for i, (pval, (pname, pdescr, pxrefs)) in enumerate(protocols.items()):
    if i > 0:
        print(",")
    COMMENT = "\n       -- ".join(pdescr.split("\n"))
    print(f"\n       -- {COMMENT}")
    if pxrefs:
        print("       --")
        print("       -- Source:")
        for pxref in pxrefs:
            LINE = "\n       --   ".join(pxref.split("\n"))
            print(f"       --   {LINE}")
    if duplicates[pname] > 1:
        pname = f"{pname}_{pval}"
    print(f"       Prot_{pname} => {pval}", end="")

print(")")
print(f"   with Size => {bits}, Always_Valid;")
print("end IANA;")

import re
from datetime import datetime
from typing import Iterator, TextIO
from urllib.error import HTTPError
from urllib.request import urlopen

from defusedxml import ElementTree

NAMESPACE = {"iana": "http://www.iana.org/assignments"}

CACHE = {}


def iana_to_rflx(url: str):
    if not re.match(r"^https://www\.iana\.org/assignments/.*\.xml$", url):
        raise IANAError(f"{url} not a valid IANA url")

    try:
        with urlopen(url) as xml_response:
            xml_document: str = xml_response.read().decode("utf-8")
    except HTTPError as e:
        raise IANAError(f"cannot fetch url {e}") from e

    with open("test.rflx", "w+") as file:
        root = ElementTree.fromstring(xml_document)
        file.write(f"-- AUTOMATICALLY GENERATED BY {__file__}. DO NOT EDIT.\n")
        file.write(f"-- Generation date: {datetime.now().strftime('%Y-%m-%d')}\n")
        file.write(f"-- {root.find('iana:title', NAMESPACE).text}\n")
        file.write(f"-- Registry last updated on {root.find('iana:updated', NAMESPACE).text}\n\n")
        file.write(f"package {root.get('id').upper().replace('-', '_')} is\n\n")
        for registry in root.findall(root.tag):
            write_registry(registry, 8, True, file)  # how to get size of field? always_valid?
        file.write(f"end {root.get('id').upper().replace('-', '_')}")


def write_registry(
    registry: ElementTree,
    type_size: int,
    always_valid: bool,
    file: TextIO,
) -> None:
    file.write(f"{'':<3}type {registry.find('iana:title', NAMESPACE).text.replace(' ', '_')} is\n")
    file.write(f"{'':<6}(\n")
    for record in registry.iterfind("iana:record", NAMESPACE):
        write_record(record, file)
    file.write(f"{'':<6})\n")
    file.write(f"{'':<3}with Size => {type_size}; ")
    if always_valid:
        file.write("Always_Valid;")
    file.write("\n\n")


def write_record(record: ElementTree, file: TextIO) -> None:
    description = record.find("iana:description", NAMESPACE)
    value = record.find("iana:value", NAMESPACE)
    references = record.findall("iana:xref", NAMESPACE)
    comment = f"-- {' '.join([r.get('data') for r in references if r is not None and r.get('type') == 'rfc'])}"

    if description is None or value is None:
        print(
            f"{description.text if description is not None else 'empty description'} "
            f"=> {value.text if value is not None else 'empty value'} not written"
        )
        return

    d = _normalize_description(description.text)
    for rflx_hex in _normalize_value(value.text):
        file.write(
            f"{'':<9}{f'{d} => {rflx_hex},':<60} {comment if comment != '-- ' else '':<70}\n"
        )


def _normalize_description(description_text: str) -> str:
    desc = description_text.upper().replace(" ", "_").replace("-", "_")
    if re.match(r"^([A-Z0-9]+_{0,1})+$", desc) is None:  # everything in format AA_BB_CC
        print(description_text)
        print("-" * 30)
        return ""
    return desc


def _normalize_value(value: str) -> Iterator[str]:
    if value.find("0x") != -1:
        yield from _normalize_hex_value(value)
    else:
        yield from _normalize_dec_value(value)


def _normalize_dec_value(dec_value: str) -> Iterator[str]:
    if dec_value.find("-") != -1:
        range_lower = int(dec_value[: dec_value.index("-")])
        range_upper = int(dec_value[dec_value.index("-") :])
        for i in range(range_lower, range_upper + 1):
            yield str(i)
    else:
        yield dec_value


def _normalize_hex_value(hex_value: str) -> Iterator[str]:
    if hex_value.find("-") != -1:
        for k in _expand_hex_range(hex_value):
            yield k
    else:
        if re.match(r"^0x[0-9A-Fa-f]{2},0x[0-9A-Fa-f]{2}$", hex_value) is not None:  # 0x0A,0xFF
            yield f"16#{hex_value.replace('0x', '').replace(',', '')}#"
        elif re.match(r"^0x[0-9A-Fa-f]{2}$", hex_value) is not None:  # 0xA1A1
            yield f"16#{hex_value[2:]}#"


def _expand_hex_range(hex_value_range: str) -> Iterator[str]:
    if (
        re.match(r"^0x[0-9A-Fa-f]{4}-0x[0-9A-Fa-f]{4}$", hex_value_range) is not None
    ):  # 0x081D-0x08FF
        range_lower = int(hex_value_range[:6], 0)
        range_upper = int(hex_value_range[7:], 0)
    elif (
        re.match(r"^0x[0-9A-Fa-f]{2}-[0-9A-Fa-f]{2},\*$", hex_value_range) is not None
    ):  # 0xCD-CF,*
        range_lower = int(f"{hex_value_range[:4]}00", 0)
        range_upper = int(f"{hex_value_range[5:7]}FF", 16)
    elif (
        re.match(r"^0x[0-9A-Fa-f]{2},0x[0-9A-Fa-f]{2}-[0-9A-Fa-f]{2}$", hex_value_range) is not None
    ):  # 0xCC,0xAF-FF
        range_lower = int(f"{hex_value_range[:4]}{hex_value_range[7:9]}", 0)
        range_upper = int(f"{hex_value_range[:4]}{hex_value_range[10:12]}", 0)
    else:
        raise IANAError(hex_value_range)

    for i in range(range_lower, range_upper + 1):
        yield f"16#{hex(i)}#"


class IANAError(Exception):
    pass


if __name__ == "__main__":
    iana_to_rflx("https://www.iana.org/assignments/tls-parameters/tls-parameters.xml")

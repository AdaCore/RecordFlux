with IPv4_Option;
with ICMP;

package IPv4 is

   type Version is range 4 .. 4 with Size => 4;
   type IHL is range 5 .. 15 with Size => 4;
   type DCSP is range 0 .. 2 ** 6 - 1 with Size => 6;
   type ECN is range 0 .. 2 ** 2 - 1 with Size => 2;
   type Total_Length is range 0 .. 2 ** 16 - 1 with Size => 16;
   type Identification is range 0 .. 2 ** 16 - 1 with Size => 16;
   type Fragment_Offset is range 0 .. 2 ** 13 - 1 with Size => 13;
   type TTL is range 0 .. 2 ** 8 - 1 with Size => 8;
   type Protocol is (P_ICMP => 1, P_UDP => 17) with Size => 8, Always_Valid;
   type Header_Checksum is range 0 .. 2 ** 16 - 1 with Size => 16;
   type Address is range 0 .. 2 ** 32 - 1 with Size => 32;
   type Options is sequence of IPv4_Option::Option;

   type Packet is
      message
         Version : Version;
         IHL : IHL;
         DSCP : DCSP;
         ECN : ECN;
         Total_Length : Total_Length
            then Identification
               if Total_Length >= IHL * 4;
         Identification : Identification;
         Flag_R : Boolean
            then Flag_DF
               if Flag_R = False;
         Flag_DF : Boolean;
         Flag_MF : Boolean;
         Fragment_Offset : Fragment_Offset;
         TTL : TTL;
         Protocol : Protocol;
         Header_Checksum : Header_Checksum;
         Source : Address;
         Destination : Address;
         Options : Options
            with Size => IHL * 32 - (Destination'Last - Message'First + 1);
         Payload : Opaque
            with Size => Total_Length * 8 - (IHL * 32);
      end message;

   for Packet use (Payload => ICMP::Message)
      if Protocol = P_ICMP;

end IPv4;

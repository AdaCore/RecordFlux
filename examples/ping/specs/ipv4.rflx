with IPv4_Option;
with ICMP;

package IPv4 is

   type Version is range 4 .. 4 with Size => 4;
   type IHL is range 5 .. 15 with Size => 4;
   type DCSP is mod 2**6;
   type ECN is mod 2**2;
   type Total_Length is mod 2**16;
   type Identification is mod 2**16;
   type Fragment_Offset is mod 2**13;
   type TTL is mod 2**8;
   type Protocol is (PROTOCOL_ICMP => 1, PROTOCOL_UDP => 17) with Size => 8, Always_Valid;
   type Header_Checksum is mod 2**16;
   type Address is mod 2**32;
   type Options is array of IPv4_Option.Option;

   type Packet is
      message
         Version : Version;
         IHL : IHL;
         DSCP : DCSP;
         ECN : ECN;
         Total_Length : Total_Length
            then Identification
               if Total_Length >= IHL * 4;
         Identification : Identification;
         Flag_R : Boolean
            then Flag_DF
               if Flag_R = False;
         Flag_DF : Boolean;
         Flag_MF : Boolean;
         Fragment_Offset : Fragment_Offset;
         TTL : TTL;
         Protocol : Protocol;
         Header_Checksum : Header_Checksum;
         Source : Address;
         Destination : Address
            then Options
               with Length => (IHL - 5) * 32;
         Options : Options
            then Payload
               with Length => Total_Length * 8 - (IHL * 32);
         Payload : Opaque;
      end message;

   for Packet use (Payload => ICMP.Message)
      if Protocol = PROTOCOL_ICMP;

end IPv4;

variables:
  DEVUTILS_ORIGIN: https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/eng/recordflux
  GNATCOLL_ORIGIN: https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/eng/toolchain
  LANGKIT_ORIGIN: https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/eng/libadalang
  ADASAT_ORIGIN: https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/eng/libadalang

  GNAT_PLATFORM: "x86_64-linux"
  GNAT_VERSION: "24.2"
  GNAT_BUILD_DATE: "all"
  SPARK_VERSION: "24.2"
  SPARK_BUILD_DATE: "all"
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20.5.1"

  # If set to 1, the packaging of RecordFlux including the compilation of the langkit-based parser will be tested.
  CLEAN_RECORDFLUX_SETUP: 0

workflow:
  rules:
    # Switch between branch pipelines and merge request pipelines to ensure that all checks must
    # pass before merging (see also https://gitlab.com/gitlab-org/gitlab/-/issues/385841)
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG

##########
# Caches #
##########

.rflx-cache: &rflx-cache
    key: $CI_JOB_NAME_SLUG-$CI_COMMIT_REF_SLUG
    paths:
      - "**/.rflx_cache"
    fallback_keys:
      - $CI_JOB_NAME_SLUG-main
    unprotect: true
    when: always

.spark-cache: &spark-cache
    key: $CI_JOB_NAME_SLUG-$CI_COMMIT_REF_SLUG-$SPARK_VERSION
    paths:
      - build/gnatprove_cache
    unprotect: true
    when: always

.spark-cache-main: &spark-cache-main
    key: $CI_JOB_NAME_SLUG-main-$SPARK_VERSION
    paths:
      - build/gnatprove_cache
    unprotect: true
    when: always

##################
# Initialization #
##################

.setup_alire: &setup_alire
    - curl -Ls https://github.com/alire-project/alire/releases/download/v2.0.1/alr-2.0.1-x86_64.AppImage -o /tmp/alr.AppImage
    - chmod +x /tmp/alr.AppImage
    - pushd /tmp
    - ./alr.AppImage --appimage-extract
    - cp squashfs-root/usr/bin/alr $CI_PROJECT_DIR
    - popd

.setup_gnat: &setup_gnat
    - e3-cathod components --setup $GNAT_VERSION --build-date $GNAT_BUILD_DATE --platform $GNAT_PLATFORM --component gnat --install $CI_PROJECT_DIR/gnatpro-$GNAT_VERSION-$GNAT_PLATFORM
    - export PATH=$CI_PROJECT_DIR/gnatpro-$GNAT_VERSION-$GNAT_PLATFORM/bin:$PATH
    - gnat --version

.setup_gnat_cross: &setup_gnat_cross
    - export GNAT_PLATFORM="arm-elf-linux64"
    - *setup_gnat
    - export GNAT_PLATFORM="riscv64-elf-linux64"
    - *setup_gnat

.setup_spark: &setup_spark
    - e3-cathod components --setup $SPARK_VERSION --build-date $SPARK_BUILD_DATE --platform $GNAT_PLATFORM --component spark2014 --install $CI_PROJECT_DIR/sparkpro-$SPARK_VERSION-$GNAT_PLATFORM
    - export PATH=$CI_PROJECT_DIR/sparkpro-$SPARK_VERSION-$GNAT_PLATFORM/bin:$PATH
    - gnatprove --version

.setup_python_venv: &setup_python_venv
    - export PATH=$HOME/.local/bin:$PATH
    - python$PYTHON_VERSION -m venv --clear .venv$PYTHON_VERSION
    - . .venv$PYTHON_VERSION/bin/activate

.install_recordflux: &install_recordflux
      make install

setup:
  services:
    - image:recordflux
    - cpu:16
    - mem:16
    - security_group:GitLabRunnerTasksExecPrivilegedSG
  artifacts:
    paths:
      - .venv$PYTHON_VERSION
      - .venv.poetry
      - alr
      - generated
      - rflx/lang
      - rflx/rapidflux.so
      - target/debug/librapidflux.so
  script:
    - git fetch --unshallow
    - *setup_alire
    - *setup_gnat
    - *setup_python_venv
    - *install_recordflux

###########
# Testing #
###########

.testing:
  needs:
    - setup
  rules:
    - if: $SCHEDULE == null || $SCHEDULE == "nightly"

.setup_python: &setup_python
    - export PATH=/it/e3/bin:$PATH
    - export PATH=$HOME/.local/bin:$PATH
    - if [ $CLEAN_RECORDFLUX_SETUP -eq 1 ]; then
        python$PYTHON_VERSION -m venv --clear .venv;
        . .venv/bin/activate;
        make install;
      else
        ln -s .venv$PYTHON_VERSION .venv;
        . .venv$PYTHON_VERSION/bin/activate;
        make init;
      fi
    # Prevent regeneration of Langkit-based parser.
    # The full set of dependencies must be touched in the relative build order.
    - touch .venv$PYTHON_VERSION/lib/python$PYTHON_VERSION/site-packages/langkit
    - touch generated/python/librflxlang
    - touch generated/lib/relocatable/dev/librflxlang.so
    - touch rflx/lang/librflxlang.so
    # Prevent recompilation of RapidFlux library.
    - find librapidflux rapidflux -type f -exec touch {} \;
    - touch target/debug/librapidflux.so
    - touch rflx/rapidflux.so
    # Prevent reinstallation of RecordFlux
    - touch .venv$PYTHON_VERSION/bin/rflx

changelog:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  script:
    - if [[ "$CI_MERGE_REQUEST_LABELS" != *"No Changelog"* ]]; then
        git fetch origin main;
        git diff --name-only origin/main..HEAD | sed -n '/CHANGELOG.md/{:a $q0; n; ba}; ${s/.*/No entry added to CHANGELOG.md/p;q1}';
      fi

anod_build_and_test:
  services:
    - image:recordflux
    - cpu:16
    - mem:16
    - security_group:GitLabRunnerTasksExecDefaultSG
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  script:
    # Setup anod
    - generic_anod_ci
    - cat /tmp/ci_env.sh
    - . /tmp/ci_env.sh
    # Build and test recordflux with the latest available dependencies (but not
    # necessarily from the same day) to avoid getting blocked by transient
    # issues with GNAT etc.
    - anod build recordflux $ACI_TRACK_QUALIFIER --latest
    # Execute RecordFlux
    - (eval `anod printenv recordflux` && rflx --version)
    # Test with anod
    - anod test recordflux $ACI_TRACK_QUALIFIER --latest
    # Convert the testsuite results and fail the job if there were test failures
    - testsuite_reports
    # Move logs so that they can be stored as artifacts
    - cp -r $ANOD_DEFAULT_SANDBOX_DIR/log .
  artifacts:
    paths:
      - log/*
      - __results-recordflux_test/*
    when: always

anod_doc:
  services:
    - image:recordflux
    - cpu:16
    - mem:16
    - security_group:GitLabRunnerTasksExecDefaultSG
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  script:
    # Setup anod
    - generic_anod_ci
    - cat /tmp/ci_env.sh
    - . /tmp/ci_env.sh
    # Build recordflux with the latest available dependencies (but not
    # necessarily from the same day) to avoid getting blocked by transient
    # issues with GNAT etc.
    - anod build recordflux-doc $ACI_TRACK_QUALIFIER --latest
     # Move logs so that they can be stored as artifacts
    - cp -r $ANOD_DEFAULT_SANDBOX_DIR/log .
  artifacts:
    paths:
      - log/*
    when: always

commit_messages:
  extends: .testing
  services:
    - image:recordflux
    - security_group:GitLabRunnerTasksExecDefaultSG
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  script:
    - *setup_python
    - git fetch origin main
    - check_commit_messages origin/main..HEAD

audit:
  extends: .testing
  services:
    - image:recordflux
    - cpu:2
    - mem:8
    - security_group:GitLabRunnerTasksExecPrivilegedSG
  script:
    - *setup_python
    - make audit
  allow_failure: true

checks:
  extends: .testing
  services:
    - image:recordflux
    - cpu:2
    - mem:8
    - security_group:GitLabRunnerTasksExecPrivilegedSG
  script:
    - *setup_gnat
    - *setup_python
    - export CHECK_VENV_FULL_SYNC=1
    - make check

code_generation:
  extends: .testing
  services:
    - image:recordflux
    - cpu:16
    - mem:16
    - security_group:GitLabRunnerTasksExecDefaultSG
  script:
    - *setup_python
    - make generate_apps
  artifacts:
    paths:
      - examples/apps/*/generated
  cache:
    - *rflx-cache

.update_timestamps_of_generated_code: &update_timestamps_of_generated_code
    - touch examples/apps/*/generated/*

tests_rflx:
  extends: .testing
  needs:
    - setup
    - code_generation
  services:
    - image:recordflux
    - cpu:16
    - mem:32
    - security_group:GitLabRunnerTasksExecPrivilegedSG
  script:
    - git fetch --unshallow
    - *update_timestamps_of_generated_code
    - *setup_gnat
    - *setup_gnat_cross
    - *setup_python
    - make --keep-going test_rflx
  artifacts:
    expose_as: "Distribution archives"
    paths:
      - dist
      - ide/vscode/recordflux.vsix

tests_rapidflux:
  extends: .testing
  needs:
    - setup
  services:
    - image:recordflux
    - cpu:16
    - mem:16
    - security_group:GitLabRunnerTasksExecPrivilegedSG
  script:
    - make --keep-going test_rapidflux

tests_example_apps:
  extends: .testing
  needs:
    - setup
    - code_generation
  services:
    - image:recordflux
    - cpu:4
    - mem:8
    - security_group:GitLabRunnerTasksExecPrivilegedSG
  script:
    - git fetch --unshallow
    - *update_timestamps_of_generated_code
    - *setup_gnat
    - *setup_gnat_cross
    - *setup_python
    - make --keep-going test_apps
  cache:
    - *rflx-cache

tests_example_specs:
  extends: .testing
  needs:
    - setup
    - code_generation
  services:
    - image:recordflux
    - cpu:16
    - mem:32
    - security_group:GitLabRunnerTasksExecDefaultSG
  script:
    - git fetch --unshallow
    - *update_timestamps_of_generated_code
    - *setup_gnat
    - *setup_gnat_cross
    - *setup_python
    - make --keep-going test_specs
  cache:
    - *rflx-cache

python_compatibility:
  extends: .testing
  services:
    - image:recordflux
    - cpu:2
    - mem:4
    - security_group:GitLabRunnerTasksExecPrivilegedSG
  parallel:
    matrix:
      - PYTHON_VERSION:
        - "3.8"
        - "3.9"
        - "3.10"
  script:
    - git fetch --unshallow
    - *setup_gnat
    - *setup_python_venv
    - *install_recordflux
    - *setup_python
    - make --keep-going test_coverage

gnat_pro_compatibility:
  extends: .testing
  needs:
    - setup
    - code_generation
  services:
    - image:recordflux
    - cpu:2
    - mem:4
    - security_group:GitLabRunnerTasksExecPrivilegedSG
  parallel:
    matrix:
      - GNAT_VERSION: "21.2"
        CLEAN_RECORDFLUX_SETUP: 0
      - GNAT_VERSION: "22.2"
        CLEAN_RECORDFLUX_SETUP: 1
      - GNAT_VERSION: "23.2"
        CLEAN_RECORDFLUX_SETUP: 1
  script:
    - git fetch --unshallow
    - *update_timestamps_of_generated_code
    - *setup_gnat
    - *setup_python
    - export GNAT=pro$GNAT_VERSION
    - make --keep-going test_compilation

gnat_fsf_compatibility:
  extends: .testing
  needs:
    - setup
    - code_generation
  services:
    - image:recordflux
    - cpu:2
    - mem:4
    - security_group:GitLabRunnerTasksExecPrivilegedSG
  parallel:
    matrix:
      - GNAT_VERSION: "11.2.4"
        CLEAN_RECORDFLUX_SETUP: 1
      - GNAT_VERSION: "12.2.1"
        CLEAN_RECORDFLUX_SETUP: 1
      - GNAT_VERSION: "13.2.1"
        CLEAN_RECORDFLUX_SETUP: 1
      - GNAT_VERSION: "14.1.3"
        CLEAN_RECORDFLUX_SETUP: 1
  script:
    - git fetch --unshallow
    - *update_timestamps_of_generated_code
    - make install_gnat ALR=$CI_PROJECT_DIR/alr
    - eval `make printenv_gnat ALR=$CI_PROJECT_DIR/alr`
    - gnat --version
    - *setup_python
    - export GNAT=fsf$GNAT_VERSION
    - make --keep-going test_compilation

gnat_community_compatibility:
  extends: .testing
  needs:
    - setup
    - code_generation
  services:
    - image:recordflux
    - cpu:2
    - mem:4
    - security_group:GitLabRunnerTasksExecPrivilegedSG
  parallel:
    matrix:
      - GNAT_VERSION: "2021"
        CLEAN_RECORDFLUX_SETUP: 1
  script:
    - git fetch --unshallow
    - *update_timestamps_of_generated_code
    - curl -L "https://raw.githubusercontent.com/AdaCore/gnat_community_install_script/master/install_package.sh" -o install_package.sh
    - curl -L "https://raw.githubusercontent.com/AdaCore/gnat_community_install_script/master/install_script.qs" -o install_script.qs
    - if [ $GNAT_VERSION == "2021" ]; then
        curl -L "https://community.download.adacore.com/v1/f3a99d283f7b3d07293b2e1d07de00e31e332325?filename=gnat-2021-20210519-x86_64-linux-bin" -o gnat-x86_64-linux-bin;
      else
        curl -L "https://community.download.adacore.com/v1/a639696a9fd3bdf0be21376cc2dc3129323cbe42?filename=gnat-2020-20200818-x86_64-linux-bin" -o gnat-x86_64-linux-bin;
      fi
    - sh ./install_package.sh ./gnat-x86_64-linux-bin $CI_PROJECT_DIR/gnat
    - export PATH=$CI_PROJECT_DIR/gnat/bin:$PATH
    - gnat --version
    - *setup_python
    - export GNAT=community$GNAT_VERSION
    - make --keep-going test_compilation

.show_gnatprove_cache_stats: &show_gnatprove_cache_stats
    - 'echo "GNATprove cache: $(ls -U build/gnatprove_cache | wc -l) files"'

verification_tests:
  extends: .testing
  services:
    - image:recordflux
    - cpu:8
    - mem:16
    - security_group:GitLabRunnerTasksExecDefaultSG
  parallel:
    matrix:
      - SPARK_VERSION: "24.0"
        SPARK_BUILD_DATE: "all"
      - SPARK_VERSION: "wave"
        SPARK_BUILD_DATE: "20240303"
  script:
    - *show_gnatprove_cache_stats
    - *setup_spark
    - *setup_python
    - make prove_tests
  cache:
    - *spark-cache-main
    - *spark-cache

verification_python_tests:
  extends: .testing
  services:
    - image:recordflux
    - cpu:8
    - mem:32
    - security_group:GitLabRunnerTasksExecDefaultSG
  parallel:
    matrix:
      - SPARK_VERSION: "24.0"
        SPARK_BUILD_DATE: "all"
      - SPARK_VERSION: "wave"
        SPARK_BUILD_DATE: "20240522"
  script:
    - *show_gnatprove_cache_stats
    - *setup_gnat
    - *setup_spark
    - *setup_python
    - make prove_python_tests
  cache:
    - *spark-cache-main
    - *spark-cache

verification_apps:
  extends: .testing
  needs:
    - setup
    - code_generation
  services:
    - image:recordflux
    - cpu:4
    - mem:32
    - security_group:GitLabRunnerTasksExecDefaultSG
  parallel:
    matrix:
      - APP: "ping"
      - APP: "dhcp_client"
      - APP: "spdm_responder"
        PROOF_PROCS: 2
      - APP: "dccp"
  script:
    - *show_gnatprove_cache_stats
    - *update_timestamps_of_generated_code
    - *setup_gnat
    - *setup_spark
    - *setup_gnat_cross
    - *setup_python
    - timeout -k 60 20000 make -C examples/apps/${APP} prove
  cache:
    - *spark-cache-main
    - *spark-cache

verification_documentation:
  extends: .testing
  services:
    - image:recordflux
    - cpu:8
    - mem:16
    - security_group:GitLabRunnerTasksExecDefaultSG
  script:
    - *show_gnatprove_cache_stats
    - *setup_spark
    - *setup_python
    - make prove_doc
  cache:
    - *spark-cache-main
    - *spark-cache

html_documentation:
  extends: .testing
  services:
    - image:recordflux
    - mem:8
    - security_group:GitLabRunnerTasksExecDefaultSG
  script:
    - *setup_gnat
    - *setup_python
    - make build_html_doc
  artifacts:
    expose_as: "HTML documentation"
    paths:
      - doc/language_reference/build/html
      - doc/user_guide/build/html

pdf_documentation:
  extends: .testing
  services:
    - image:recordflux
    - mem:8
    - security_group:GitLabRunnerTasksExecDefaultSG
  script:
    - *setup_gnat
    - *setup_python
    - make build_pdf_doc
  artifacts:
    expose_as: "PDF documentation"
    paths:
      - doc/language_reference/build/latex/language_reference.pdf
      - doc/user_guide/build/latex/user_guide.pdf

packaging:
  extends: .testing
  services:
    - image:recordflux
    - cpu:8
    - mem:16
    - security_group:GitLabRunnerTasksExecPrivilegedSG
  script:
    - git fetch --unshallow
    - *setup_gnat
    - make pypi_dist
  artifacts:
    paths:
      - dist

publishing_to_pypi:
  services:
    - image:recordflux
    - security_group:GitLabRunnerTasksExecPrivilegedSG
  needs:
    - packaging
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+.\d+.\d+$/
  script:
    - python$PYTHON_VERSION -m pip install twine
    - twine upload --non-interactive dist/*
  variables:
    TWINE_PASSWORD: $PYPI_TOKEN
  environment:
    name: "pypi"
    action: start

publishing_to_test_pypi:
  services:
    - image:recordflux
    - security_group:GitLabRunnerTasksExecPrivilegedSG
  needs:
    - packaging
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - python$PYTHON_VERSION -m pip install twine
    - twine upload --verbose --non-interactive --repository-url https://test.pypi.org/legacy/ dist/*
  variables:
    TWINE_PASSWORD: $TESTPYPI_TOKEN
  environment:
    name: "testpypi"
    action: start

##################
# Scheduled jobs #
##################

.scheduled_job:
  needs:
    - setup

gnat_wave_compatibility:
  extends: .scheduled_job
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE == "gnat-wave"
  services:
    - image:recordflux
    - cpu:2
    - mem:4
    - security_group:GitLabRunnerTasksExecPrivilegedSG
  script:
    - git fetch --unshallow
    - generic_anod_ci --continuous-builder-mode
    - cat /tmp/ci_env.sh
    - . /tmp/ci_env.sh
    - anod install gnat
    - eval `anod printenv gnat`
    - gnat --version
    - *setup_python_venv
    - *install_recordflux
    - *setup_python
    - make --keep-going test_compilation

spark_wave_compatibility:
  extends: .scheduled_job
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE == "spark-wave"
  services:
    - image:recordflux
    - cpu:8
    - mem:16
    - security_group:GitLabRunnerTasksExecDefaultSG
  script:
    - git fetch --unshallow
    - generic_anod_ci --continuous-builder-mode
    - cat /tmp/ci_env.sh
    - . /tmp/ci_env.sh
    - anod install spark2014
    - eval `anod printenv spark2014`
    - gnatprove --version
    - *setup_python
    - make prove_tests
    - make prove_python_tests

installation_from_pypi:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE == "pypi"
  services:
    - image:recordflux
    - cpu:2
    - mem:4
    - security_group:GitLabRunnerTasksExecPrivilegedSG
  parallel:
    matrix:
      - PYTHON_VERSION:
        - "3.8"
        - "3.9"
        - "3.10"
        - "3.11"
  script:
    - git fetch --unshallow
    - git checkout $(git describe --tags --abbrev=0 --match "v*.*.*")
    - *setup_gnat
    - *setup_python_venv
    - make test_package PACKAGE=RecordFlux

installation_from_testpypi:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE == "testpypi"
  services:
    - image:recordflux
    - cpu:2
    - mem:4
    - security_group:GitLabRunnerTasksExecPrivilegedSG
  parallel:
    matrix:
      - PYTHON_VERSION:
        - "3.8"
        - "3.9"
        - "3.10"
        - "3.11"
  script:
    - *setup_gnat
    - *setup_python_venv
    - make test_package PIP_ARGS="--index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ --pre" PACKAGE=RecordFlux

###############
# Manual jobs #
###############

rust_crates:
  services:
    - image:recordflux
    - security_group:GitLabRunnerTasksExecPrivilegedSG
  script:
    - cargo vendor
    - tar -czf recordflux-$(date '+%Y%m%d')-rust-crates.tar.gz vendor
  artifacts:
    paths:
      - recordflux-*-rust-crates.tar.gz
  when: manual

python_wheels:
  services:
    - image:recordflux
    - security_group:GitLabRunnerTasksExecPrivilegedSG
  variables:
    PYTHON: "python3.9"
  script:
    - make python_wheels_archive
  artifacts:
    paths:
      - build/recordflux-*-python-wheels.tar.gz
  when: manual

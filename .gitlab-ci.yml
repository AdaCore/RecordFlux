variables:
   ANOD_DEFAULT_SANDBOX_DIR: /it/wave

   CI_FRAGMENTS_GIT: https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/eng/it/ci-fragments
   RECORDFLUX_ORIGIN: https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/eng/recordflux

   GNAT_VERSION: "23.2"
   GNAT_BUILD_DATE: "all"
   GNAT_PLATFORM: "x86_64-linux"
   SPARK_BUILD_DATE: "20230905"
   PYTHON_VERSION: "3.10"
   NODE_VERSION: "20.5.1"

   # If set to 1, the packaging of RecordFlux including the compilation of the langkit-based parser will be tested.
   CLEAN_RECORDFLUX_SETUP: 0

workflow:
  rules:
    # Switch between branch pipelines and merge request pipelines to ensure that all checks must
    # pass before merging (see also https://gitlab.com/gitlab-org/gitlab/-/issues/385841)
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

##################
# Initialization #
##################

.setup_alire: &setup_alire
    - curl -Ls https://github.com/alire-project/alire/releases/download/v1.2.2/alr-1.2.2-x86_64.AppImage -o /tmp/alr.AppImage
    - chmod +x /tmp/alr.AppImage
    - pushd /tmp
    - ./alr.AppImage --appimage-extract
    - cp squashfs-root/usr/bin/alr $CI_PROJECT_DIR
    - popd

.setup_gnat: &setup_gnat
    - e3-cathod components --setup $GNAT_VERSION --build-date $GNAT_BUILD_DATE --platform $GNAT_PLATFORM --component gnat --download
    - tar -xzf gnatpro-$GNAT_VERSION-$GNAT_PLATFORM-bin.tar.gz
    - cd gnatpro-$GNAT_VERSION-$GNAT_PLATFORM-bin && echo -e "\n$CI_PROJECT_DIR/gnatpro-$GNAT_VERSION-$GNAT_PLATFORM\nY\nY" | ./doinstall && cd ..
    - export PATH=$CI_PROJECT_DIR/gnatpro-$GNAT_VERSION-$GNAT_PLATFORM/bin:$PATH
    - gnat --version

.setup_gnat_cross: &setup_gnat_cross
    - export GNAT_PLATFORM="arm-elf-linux64"
    - *setup_gnat
    - export GNAT_PLATFORM="riscv64-elf-linux64"
    - *setup_gnat

.setup_spark: &setup_spark
    - generic_anod_ci
    - cat /tmp/ci_env.sh
    - . /tmp/ci_env.sh
    - anod install spark2014 --build-date $SPARK_BUILD_DATE
    - eval `anod printenv spark2014`

.setup_python_venv: &setup_python_venv
    - python$PYTHON_VERSION -m venv --clear .venv$PYTHON_VERSION
    - . .venv$PYTHON_VERSION/bin/activate
    - make init install

setup:
  services:
     - image:recordflux
     - cpu:2
     - mem:4
  artifacts:
    paths:
      - .venv3.8
      - .venv3.9
      - .venv3.10
      - .venv3.11
      - alr
  script:
    - git fetch --unshallow
    - *setup_alire
    - *setup_gnat
    - export PYTHON_VERSION=3.8
    - *setup_python_venv
    - make clean
    - export PYTHON_VERSION=3.9
    - *setup_python_venv
    - make clean
    - export PYTHON_VERSION=3.10
    - *setup_python_venv
    - make clean
    - export PYTHON_VERSION=3.11
    - *setup_python_venv

###########
# Testing #
###########

.testing:
  needs:
    - setup
  rules:
    - if: $SCHEDULE == null || $SCHEDULE == "nightly"

.setup_python: &setup_python
    - export PATH=/it/e3/bin:$PATH
    - if [ $CLEAN_RECORDFLUX_SETUP -eq 1 ]; then
        python$PYTHON_VERSION -m venv --clear .venv;
        . .venv/bin/activate;
        make init install;
      else
        . .venv$PYTHON_VERSION/bin/activate;
        make init;
      fi

changelog:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  script:
    - if [[ "$CI_MERGE_REQUEST_LABELS" != *"No Changelog"* ]]; then
        git fetch origin main;
        git diff --name-only origin/main..HEAD | sed -n '/CHANGELOG.md/{:a $q0; n; ba}; ${s/.*/No entry added to CHANGELOG.md/p;q1}';
      fi

anod:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  script:
    - |
      if [[ "$CI_MERGE_REQUEST_LABELS" != *"Anod"* ]]; then
        git fetch origin main;
        echo > /tmp/setup.py-diff '
        sed -z "s/.*install_requires=\[\s*\([^]]*\)],\s*extras_require={\([^}]*\)}.*/\1\2/" $1 > $1.a
        sed -z "s/.*install_requires=\[\s*\([^]]*\)],\s*extras_require={\([^}]*\)}.*/\1\2/" $2 > $2.b
        diff -u -w $1.a $2.b
        ';
        git difftool -y -x '/bin/bash -eu /tmp/setup.py-diff' --trust-exit-code HEAD origin/main -- setup.py
      fi

commit_messages:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  script:
    - git fetch origin main
    - git log origin/main..HEAD | sed -n "/^.*\b\(fixup\|FIXUP\|wip\|WIP\)\b.*/{p;s/.*/Found fixup commit/p;q1}"
    - git log origin/main..HEAD | sed -n "/ \#[0-9][0-9]*/{p;s/.*/Found unqualified reference to ticket/p;q1}"

checks:
  extends: .testing
  services:
     - image:recordflux
     - cpu:2
     - mem:4
  script:
    - *setup_gnat
    - *setup_python
    - make check

code_generation:
  extends: .testing
  services:
     - image:recordflux
     - cpu:4
     - mem:4
  script:
    - *setup_python
    - make generate_apps
  artifacts:
    paths:
      - examples/apps/*/build/generated

.update_timestamps_of_generated_code: &update_timestamps_of_generated_code
    - touch examples/apps/*/build/generated/*

tests:
  extends: .testing
  needs:
    - setup
    - code_generation
  services:
     - image:recordflux
     - cpu:16
     - mem:32
  script:
    - git fetch --unshallow
    - *update_timestamps_of_generated_code
    - *setup_gnat
    - *setup_gnat_cross
    - *setup_python
    - make test

python_compatibility:
  extends: .testing
  services:
     - image:recordflux
     - cpu:2
     - mem:4
  parallel:
    matrix:
      - PYTHON_VERSION:
        - "3.8"
        - "3.9"
        - "3.10"
        - "3.11"
  script:
    - *setup_gnat
    - *setup_python
    - make test_coverage

gnat_pro_compatibility:
  extends: .testing
  needs:
    - setup
    - code_generation
  services:
     - image:recordflux
     - cpu:2
     - mem:4
  parallel:
    matrix:
      - GNAT_VERSION: "21.2"
        CLEAN_RECORDFLUX_SETUP: 0
      - GNAT_VERSION: "22.2"
        CLEAN_RECORDFLUX_SETUP: 1
      - GNAT_VERSION: "23.2"
        CLEAN_RECORDFLUX_SETUP: 1
  script:
    - git fetch --unshallow
    - *update_timestamps_of_generated_code
    - *setup_gnat
    - *setup_python
    - export GNAT=pro$GNAT_VERSION
    - make test_compilation

gnat_fsf_compatibility:
  extends: .testing
  needs:
    - setup
    - code_generation
  services:
     - image:recordflux
     - cpu:2
     - mem:4
  parallel:
    matrix:
      - GNAT_VERSION: "11.2.4"
        CLEAN_RECORDFLUX_SETUP: 1
      - GNAT_VERSION: "12.1.2"
        CLEAN_RECORDFLUX_SETUP: 1
  script:
    - git fetch --unshallow
    - *update_timestamps_of_generated_code
    - $CI_PROJECT_DIR/alr -n init --lib alire
    - pushd alire
    - $CI_PROJECT_DIR/alr toolchain --select --local gnat_native=$GNAT_VERSION gprbuild=22.0.1
    - $CI_PROJECT_DIR/alr -n with aunit gnatcoll_iconv gnatcoll_gmp
    - eval `$CI_PROJECT_DIR/alr printenv`
    - popd
    - gnat --version
    - *setup_python
    - export GNAT=fsf$GNAT_VERSION
    - make test_compilation

gnat_community_compatibility:
  extends: .testing
  needs:
    - setup
    - code_generation
  services:
     - image:recordflux
     - cpu:2
     - mem:4
  parallel:
    matrix:
      - GNAT_VERSION: "2021"
        CLEAN_RECORDFLUX_SETUP: 1
  script:
    - git fetch --unshallow
    - *update_timestamps_of_generated_code
    - curl -L "https://raw.githubusercontent.com/AdaCore/gnat_community_install_script/master/install_package.sh" -o install_package.sh
    - curl -L "https://raw.githubusercontent.com/AdaCore/gnat_community_install_script/master/install_script.qs" -o install_script.qs
    - if [ $GNAT_VERSION == "2021" ]; then
        curl -L "https://community.download.adacore.com/v1/f3a99d283f7b3d07293b2e1d07de00e31e332325?filename=gnat-2021-20210519-x86_64-linux-bin" -o gnat-x86_64-linux-bin;
      else
        curl -L "https://community.download.adacore.com/v1/a639696a9fd3bdf0be21376cc2dc3129323cbe42?filename=gnat-2020-20200818-x86_64-linux-bin" -o gnat-x86_64-linux-bin;
      fi
    - sh ./install_package.sh ./gnat-x86_64-linux-bin $CI_PROJECT_DIR/gnat
    - export PATH=$CI_PROJECT_DIR/gnat/bin:$PATH
    - gnat --version
    - *setup_python
    - export GNAT=community$GNAT_VERSION
    - make test_compilation

verification_tests:
  extends: .testing
  services:
     - image:recordflux
     - cpu:8
     - mem:16
  script:
    - *setup_spark
    - *setup_python
    - make prove_tests
  cache:
    key: verification_tests-$CI_COMMIT_REF_SLUG
    paths:
      - build/gnatprove_cache
    fallback_keys:
      - verification_tests-main
    unprotect: true
    when: always

verification_python_tests:
  extends: .testing
  services:
     - image:recordflux
     - cpu:8
     - mem:16
  script:
    - *setup_gnat
    - *setup_spark
    - *setup_python
    - make prove_python_tests
  cache:
    key: verification_python_tests-$CI_COMMIT_REF_SLUG
    paths:
      - build/gnatprove_cache
    fallback_keys:
      - verification_python_tests-main
    unprotect: true
    when: always

verification_apps:
  extends: .testing
  needs:
    - setup
    - code_generation
  services:
     - image:recordflux
     - cpu:4
     - mem:30
  parallel:
    matrix:
      - APP:
        - "ping"
        - "dhcp_client"
  script:
    - *update_timestamps_of_generated_code
    - *setup_gnat
    - *setup_spark
    - *setup_python
    - timeout -k 60 27600 make -C examples/apps/${APP} prove
  cache:
    key: verification_apps-$APP-$CI_COMMIT_REF_SLUG
    paths:
      - build/gnatprove_cache
    fallback_keys:
      - verification_apps-$APP-main
    unprotect: true
    when: always

html_documentation:
  extends: .testing
  services:
     - image:recordflux
  script:
    - *setup_gnat
    - *setup_python
    - make html_doc

pdf_documentation:
  extends: .testing
  services:
     - image:recordflux
  script:
    - *setup_gnat
    - *setup_python
    - make pdf_doc

##################
# Scheduled jobs #
##################

.scheduled_job:
  needs:
    - setup

gnat_wave_compatibility:
  extends: .scheduled_job
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE == "gnat-wave"
  services:
     - image:recordflux
     - cpu:2
     - mem:4
  script:
    - git fetch --unshallow
    - generic_anod_ci
    - cat /tmp/ci_env.sh
    - . /tmp/ci_env.sh
    - anod install gnat
    - eval `anod printenv gnat`
    - gnat --version
    - *setup_python_venv
    - *setup_python
    - make test_compilation

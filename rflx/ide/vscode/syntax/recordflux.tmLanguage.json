{
    "name": "RecordFlux",
    "patterns": [
        {
            "include": "#keywords"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#comments"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#constants"
        },
        {
            "include": "#types"
        },
        {
            "include": "#support"
        }
    ],
    "repository": {
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.recordflux",
                    "match": "\\b(if|then|return|goto)\\b"
                },
                {
                    "name": "keyword.other.recordflux",
                    "match": "\\b(begin|end|with|message|machine|package|type|function|is|of|for|use|new|state|transition|exception|generic)\\b"
                }
            ]
        },
        "operators": {
            "name": "entity.name.operator.recordflux",
            "match": "=>|=|\\*|\\+|\\-|/=|\\.\\.|<|<=|>|>=|:=|\\b(and|mod|or|range|sequence|unsigned|'Append|'Extend|'First|'Has_Data|'Head|'Last|'Opaque|'Present|'Read|'Reset|'Size|'Valid|'Valid_Checksum|'Write)\\b"
        },
        "strings": {
            "name": "string.quoted.double.recordflux",
            "begin": "\"",
            "end": "\""
        },
        "comments": {
            "name": "comment.line.recordflux",
            "begin": "--",
            "end": "[\\n\\r]"
        },
        "constants": {
            "patterns": [
                {
                    "name": "constant.language.recordflux",
                    "match": "\\b(null|Low_Order_First|High_Order_First|Always_Valid|Readable|Writable)\\b"
                },
                {
                    "name": "constant.numeric.recordflux",
                    "match": "\\b(\\d[0-9_]*(\\.\\d[0-9_]*)?([eE]([-+])?\\d[0-9_]*)?)\\b"
                },
                {
                    "name": "variable.language.recordflux",
                    "match": "\\b(Byte_Order|Checksum|Desc|First|Size)\\b"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "entity.name.type.recordflux",
                    "match": "\\b(Channel|Opaque)\\b"
                }
            ]
        }
    },
    "scopeName": "source.recordflux"
}

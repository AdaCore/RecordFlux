from collections.abc import Callable
from enum import Enum
from typing import Final

from rflx.identifier import StrID
from rflx.rapidflux import ID, Location, RecordFluxError, ty

class Precedence(Enum):
    UNDEFINED = 0
    BOOLEAN_OPERATOR = 1
    RELATIONAL_OPERATOR = 2
    BINARY_ADDING_OPERATOR = 3
    UNARY_ADDING_OPERATOR = 4
    MULTIPLYING_OPERATOR = 5
    HIGHEST_PRECEDENCE_OPERATOR = 6
    LITERAL = 7

class Expr:
    TRUE: Final[Literal]
    FALSE: Final[Literal]

    def __eq__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __neg__(self) -> Expr: ...
    @property
    def location(self) -> Location: ...
    @property
    def precedence(self) -> Precedence: ...
    @property
    def type_(self) -> ty.Type: ...
    def check_type(self, expected: ty.Type | tuple[ty.Type, ...]) -> RecordFluxError: ...
    def check_type_instance(
        self,
        expected: type[ty.Type] | tuple[type[ty.Type], ...],
    ) -> RecordFluxError: ...
    def variables(self) -> list[Variable]: ...
    def findall(self, match: Callable[[Expr], bool]) -> list[Expr]: ...
    def substituted(self, func: Callable[[Expr], Expr]) -> Expr: ...
    def simplified(self) -> Expr: ...

class Variable(Expr):
    def __init__(self, identifier: StrID, type_: ty.Type | None = None) -> None: ...
    @property
    def type_(self) -> ty.Type: ...
    @type_.setter
    def type_(self, type_: ty.Type) -> ty.Type: ...
    @property
    def identifier(self) -> ID: ...
    @property
    def name(self) -> str: ...

class Literal(Expr):
    def __init__(self, identifier: StrID, type_: ty.Type | None = None) -> None: ...
    @property
    def type_(self) -> ty.Type: ...
    @type_.setter
    def type_(self, type_: ty.Type) -> ty.Type: ...
    @property
    def identifier(self) -> ID: ...
    @property
    def name(self) -> str: ...

class Number(Expr):
    def __init__(self, value: int, base: int = 0, location: Location | None = None) -> None: ...
    def __int__(self) -> int: ...
    @property
    def value(self) -> int: ...
    @property
    def base(self) -> int: ...

class Neg(Expr):
    def __init__(self, expr: Expr, location: Location | None = None) -> None: ...
    @property
    def expr(self) -> Expr: ...

class Sub(Expr):
    def __init__(self, left: Expr, right: Expr, location: Location | None = None) -> None: ...
    @property
    def left(self) -> Expr: ...
    @property
    def right(self) -> Expr: ...

class Div(Expr):
    def __init__(self, left: Expr, right: Expr, location: Location | None = None) -> None: ...
    @property
    def left(self) -> Expr: ...
    @property
    def right(self) -> Expr: ...

class Pow(Expr):
    def __init__(self, left: Expr, right: Expr, location: Location | None = None) -> None: ...
    @property
    def left(self) -> Expr: ...
    @property
    def right(self) -> Expr: ...

class Mod(Expr):
    def __init__(self, left: Expr, right: Expr, location: Location | None = None) -> None: ...
    @property
    def left(self) -> Expr: ...
    @property
    def right(self) -> Expr: ...

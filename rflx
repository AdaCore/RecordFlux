#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import pathlib
import sys

from generator import Generator
from model import ModelError
from parser import Parser, ParseFatalException, ParserError


def main() -> None:
    arg_parser = argparse.ArgumentParser(description='RecordFlux')
    arg_parser.add_argument('-g', '--generate', action='store_true', help='generate dissector code')
    arg_parser.add_argument('-o', '--output', metavar='DIR', type=str,
                            help='output directory for dissector code')
    arg_parser.add_argument('files', metavar='FILE', type=str, nargs='+')
    args = arg_parser.parse_args()

    parser = Parser()
    for f in args.files:
        try:
            print('Parsing {}... '.format(f), end='')
            parser.parse(f)
            print('OK')
        except ParseFatalException as e:
            print('Syntax error: {}'.format(e))
            sys.exit(1)
        except ParserError as e:
            print('Parser error: {}'.format(e))
            sys.exit(1)

    if args.generate:
        outdir = pathlib.Path(args.output)
        if not outdir.is_dir():
            print(f'Invalid output directory: {outdir}')
            sys.exit(1)

        generator = Generator()
        try:
            print('Generating... ', end='')
            generator.generate_dissector(parser.pdus, parser.refinements)
            print('OK')
        except AssertionError as e:
            print('Generation error: {}'.format(e))
            sys.exit(1)
        except ModelError as e:
            print('Model error: {}'.format(e))
            sys.exit(1)

        for unit in generator.units():
            filename = outdir.joinpath(unit.package.name.lower().replace('.', '-') + '.ads')
            print('Creating {}'.format(filename))
            with open(filename, 'w') as f:
                f.write(unit.specification())

            if unit.definition().strip():
                filename = filename.with_suffix('.adb')
                print('Creating {}'.format(filename))
                with open(filename, 'w') as f:
                    f.write(unit.definition())


if __name__ == '__main__':
    main()

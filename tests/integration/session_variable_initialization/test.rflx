with Universal;

package Test is

   generic
      Channel : Channel with Readable, Writable; -- §S-P-C-RW
   session Session is
      Global : Universal::Value := 11; -- §S-D-V-T-SC, §S-D-V-E-L
      Uninitialized_Global : Universal::Value; -- §S-D-V-T-SC, §S-D-V-E-N
      Message : Universal::Message; -- §S-D-V-T-M, §S-D-V-E-N
   begin
      state Start is
      begin
         Channel'Read (Message); -- §S-S-A-RD-V
      transition
         goto Process -- §S-S-T-N
      end Start;

      state Process is
         Local : Universal::Value := 2; -- §S-S-D-V-T-SC, §S-S-D-V-E-L
      begin
         Local := Local + Message.Value; -- §S-S-A-A-ME, §S-S-A-A-L, §S-S-A-A-S, §S-S-A-A-V, §S-E-S-V
         Uninitialized_Global := Local; -- §S-S-A-A-V
         Global := Uninitialized_Global + 20; -- §S-S-A-A-ME, §S-S-A-A-L, §S-S-A-A-V
         -- §S-S-A-A-MA
         Message := Universal::Message'(Message_Type => Universal::MT_Value,
                                        Length => Universal::Value'Size / 8,
                                        Value => Global);
      transition
         goto Reply
            if Local < Global -- §S-S-T-V
         goto null -- §S-S-T-N
      exception
         goto null -- §S-S-E
      end Process;

      state Reply is
      begin
         Channel'Write (Message); -- §S-S-A-WR-V
      transition
         goto null -- §S-S-T-N
      end Reply;
   end Session;

end Test;

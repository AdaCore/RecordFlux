with Universal;

package Test is

   generic
      Channel : Channel with Writable; -- §S-P-C-W
   session Session with
      Initial => Start,
      Final => Terminated
   is
      Options : Universal::Options; -- §S-D-V-T-MS, §S-D-V-E-N
      First_Option : Universal::Option; -- §S-D-V-T-M, §S-D-V-E-N
   begin
      state Start is
      begin
         -- §S-S-A-AP-MA, §S-E-A-T-SC, §S-E-A-E-L
         Options'Append (Universal::Option'(Option_Type => Universal::OT_Data, Length => 1, Data => [2]));
         -- §S-S-A-AP-MA
         Options'Append (Universal::Option'(Option_Type => Universal::OT_Null));
         -- §S-S-A-AP-MA, §S-E-A-T-SC, §S-E-A-E-L
         Options'Append (Universal::Option'(Option_Type => Universal::OT_Data, Length => 2, Data => [2, 3]));
      transition
         goto Process -- §S-S-T-N
      exception
         goto Terminated -- §S-S-E
      end Start;

      state Process is
         First_Option_Length : Universal::Length; -- §S-S-D-V-T-SC, §S-S-D-V-E-H
      begin
         -- Needed for SPARK if the list comprehension does not return an element.
         -- §S-S-A-A-L
         First_Option_Length := 0;
         -- §S-S-A-A-LC, §S-S-A-A-HAT, §S-E-AT-H-SS, §S-E-AT-H-LC, §S-E-S-LC, §S-E-S-BE, §S-E-LC-SSS, §S-E-LC-TSS
         First_Option_Length := [for E in Options if E.Option_Type = Universal::OT_Data => E.Length]'Head;
         -- §S-S-A-A-LC, §S-S-A-A-HAT, §S-E-AT-H-MS, §S-E-AT-H-LC, §S-E-S-LC, §S-E-S-BE, §S-E-LC-SMS, §S-E-LC-TMS
         First_Option := [for E in Options if E.Option_Type = Universal::OT_Data => E]'Head;
      transition
         goto Send -- §S-S-T-BE
            if First_Option_Length > 0
         goto Terminated -- §S-S-T-N
      exception
         goto Terminated -- §S-S-E
      end Process;

      state Send is
      begin
         -- §S-S-A-WR-V
         Channel'Write (First_Option);
      transition
         goto Terminated -- §S-S-E
      end Send;

      state Terminated is null state; -- §S-S-N
   end Session;

end Test;

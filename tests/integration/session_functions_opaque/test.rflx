with Universal;

package Test is

   type Size is range 0 .. 2 ** 32 - 1 with Size => 32;

   generic
      --  Channel : Channel with Readable, Writable; -- §S-P-C-RW
      -- §S-P-F-P-S, §S-P-F-P-O, §S-P-F-R-S
      with function Check_Size (Size : Size; Data : Opaque) return Boolean;
   session Session with
      Initial => Start,
      Final => Terminated
   is
   begin
      state Start is
      begin
      transition
         goto Check_Message -- §S-S-T-N
      end Start;

      state Check_Message is
         Valid : Boolean; -- §S-S-D-V-T-SC, §S-S-D-V-E-N
         Message : Universal::Message; -- §S-S-D-V-T-M, §S-S-D-V-E-N
      begin
         -- §S-S-A-A-MA
         Message := Universal::Message'(Message_Type => Universal::MT_Data, Length => 2, Data => [3, 4]);
         -- §S-S-A-A-CL, §S-E-CL-SAT, §S-E-CL-OAT
         Valid := Check_Size (Message'Size, Message'Opaque);
      transition
         goto Check_Message_Sequence
            if Valid -- §S-S-T-V
         goto Error -- §S-S-T-N
      exception
         goto Error -- §S-S-E
      end Check_Message;

      state Check_Message_Sequence is
         Valid : Boolean; -- §S-S-D-V-T-SC, §S-S-D-V-E-N
         Message_Sequence : Universal::Options; -- §S-S-D-V-T-MS, §S-S-D-V-E-N
      begin
         -- §S-S-A-AP-MA
         Message_Sequence'Append (Universal::Option'(Option_Type => Universal::OT_Data, Length => 2, Data => [3, 4]));
         -- §S-S-A-A-CL, §S-E-CL-SAT, §S-E-CL-OAT
         Valid := Check_Size (Message_Sequence'Size, Message_Sequence'Opaque);
      transition
         goto Check_Scalar_Sequence
            if Valid -- §S-S-T-V
         goto Error -- §S-S-T-N
      exception
         goto Error -- §S-S-E
      end Check_Message_Sequence;

      state Check_Scalar_Sequence is
         Valid : Boolean; -- §S-S-D-V-T-SC, §S-S-D-V-E-N
         Scalar_Sequence : Universal::Values; -- §S-S-D-V-T-SS, §S-S-D-V-E-N
      begin
         -- §S-S-A-AP-L
         Scalar_Sequence'Append (1);
         -- §S-S-A-AP-L
         Scalar_Sequence'Append (2);
         -- §S-S-A-A-CL, §S-E-CL-SAT, §S-E-CL-OAT
         Valid := Check_Size (Scalar_Sequence'Size, Scalar_Sequence'Opaque);
      transition
         goto Terminated
            if Valid -- §S-S-T-V
         goto Error -- §S-S-T-N
      exception
         goto Error -- §S-S-E
      end Check_Scalar_Sequence;

      state Error is
      begin
      transition
         goto Terminated -- §S-S-T-N
      end Error;

      state Terminated is null state; -- §S-S-N
   end Session;

end Test;

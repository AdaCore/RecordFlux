with Universal;

package Test is

   generic
      Channel : Channel with Readable, Writable; -- §S-P-C-RW
   session Session is
      Message : Universal::Message; -- §S-D-V-T-M, §S-D-V-E-N
   begin
      state Start is
      begin
         Channel'Read (Message); -- §S-S-A-RD-V
      transition
         goto Prepare_Message
            if Message'Valid = True -- §S-S-T-VAT, §S-E-AT-V-V, §S-S-T-L
               and Message.Message_Type = Universal::MT_Data -- §S-S-T-S, §S-E-S-V, §S-S-T-L
               and Message.Length = 1 -- §S-S-T-S, §S-E-S-V, §S-S-T-L
         goto null -- §S-S-T-N
      end Start;

      state Prepare_Message is
      begin
         Message := Universal::Message'(Message_Type => Universal::MT_Data, Length => 1, Data => [2]);
      transition
         goto Reply
      exception
         goto null -- §S-S-E
      end Prepare_Message;

      state Reply is
      begin
         -- §S-S-A-A-MA, §S-E-A-T-SC, §S-E-A-E-L
         Channel'Write (Message); -- §S-S-A-WR-V
      transition
         goto Next -- §S-S-T-N
      end Reply;

      state Next is
         M : Universal::Message;
      begin
         M := Universal::Message'(Message_Type => Universal::MT_Data, Length => 1, Data => [2]);
      transition
         goto null
      exception
         goto null
      end Next;
   end Session;

end Test;

with TLV;

package Test is

   generic
      Channel : Channel with Writable; -- §S-P-C-W
   session Session with
      Initial => Start,
      Final => Terminated
   is
      Messages : TLV::Messages; -- §S-D-V-T-MS, §S-D-V-E-N
      Tags : TLV::Tags; -- §S-D-V-T-SS, §S-D-V-E-N
      Message : TLV::Message; -- §S-D-V-T-M, §S-D-V-E-N
   begin
      state Start is
         Message_Tag : TLV::Tag; -- §S-S-D-V-T-SC, §S-S-D-V-E-N
         Tag : TLV::Tag; -- §S-S-D-V-T-SC, §S-S-D-V-E-N
      begin
         -- §S-S-A-AP-MA, §S-E-A-T-SC, §S-E-A-E-L
         Messages'Append (TLV::Message'(Tag => TLV::Msg_Data, Length => 1, Value => [2]));
         Tags'Append (TLV::Msg_Error); -- §S-S-A-AP-L
         Message := Messages'Head; -- §S-S-A-A-HAT, §S-E-AT-H-V, §S-E-AT-H-MS
         Message_Tag := Message.Tag; -- §S-S-A-A-S, §S-E-S-V
         Tag := Tags'Head; -- §S-S-A-A-HAT, §S-E-AT-H-V, §S-E-AT-H-SS
      transition
         goto Reply
            if Message_Tag = TLV::Msg_Data -- §S-S-T-V, §S-S-T-L
               and Tag = TLV::Msg_Error -- §S-S-T-V, §S-S-T-L
         goto Terminated -- §S-S-T-N
      exception
         goto Terminated -- §S-S-E
      end Start;

      state Reply is
      begin
         Channel'Write (Message); -- §S-S-A-WR-V
      transition
         goto Terminated -- §S-S-T-N
      end Reply;

      state Terminated is null state; -- §S-S-N
   end Session;

end Test;

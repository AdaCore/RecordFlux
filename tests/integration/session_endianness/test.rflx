with Messages;

package Test is

   generic
      I : Channel with Readable;
      O : Channel with Writable;
   session Session with
      Initial => Start,
      Final => Terminated
   is
      In_Msg : Messages::Msg;
      Out_Msg : Messages::Msg_LE;
      Out_Msg2 : Messages::Msg;
   begin
      state Start is
      begin
         I'Read (In_Msg);
      transition
         goto Copy
            if In_Msg'Has_Data
         goto Terminated
      end Start;

      state Copy is
      begin
         Out_Msg := Messages::Msg_LE'(C => In_Msg.A, D => In_Msg.B);
      transition
         goto Reply
      exception
         goto Terminated
      end Copy;

      state Reply is
      begin
         O'Write (Out_Msg);
      transition
         goto Copy2
      end Reply;

      state Copy2 is
      begin
         Out_Msg2 := Messages::Msg'(A => Out_Msg.C, B => Out_Msg.D);
      transition
         goto Reply2
      exception
         goto Terminated
      end Copy2;

      state Reply2 is
      begin
         O'Write (Out_Msg2);
      transition
         goto Start
      end Reply2;

      state Terminated is null state;
   end Session;

end Test;

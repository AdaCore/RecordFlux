with Universal;

package Test is

   generic
      Channel : Channel with Readable, Writable; -- §S-P-C-RW
   session Session with
      Initial => Start,
      Final => Terminated
   is
      Message : Universal::Message; -- §S-D-V-T-M, §S-D-V-E-N
   begin
      state Start is
      begin
         Channel'Read (Message); -- §S-S-A-RD-V
      transition
         goto Process
            if Message'Valid = True -- §S-S-T-VAT, §S-E-AT-V-V, §S-S-T-L
               and Message.Message_Type = Universal::MT_Data -- §S-S-T-S, §S-E-S-V, §S-S-T-L
               and Message.Length = 1 -- §S-S-T-S, §S-E-S-V, §S-S-T-L
         goto Terminated -- §S-S-T-N
      end Start;

      state Process is
         Local_Message : Universal::Message;
      begin
         -- §S-S-A-MFA-L
         Message.Message_Type := Universal::MT_Data;
         -- §S-S-A-MFA-L
         Message.Length := 1;
         -- §S-S-A-MFA-A
         Message.Data := [2];
         -- §S-S-A-MFA-L
         Local_Message.Message_Type := Universal::MT_Null;
      transition
         goto Reply
            if Message.Message_Type /= Local_Message.Message_Type -- §S-S-T-S, §S-E-S-V
         goto Terminated -- §S-S-T-N
      exception
         goto Terminated -- §S-S-E
      end Process;

      state Reply is
      begin
         Channel'Write (Message); -- §S-S-A-WR-V
      transition
         goto Terminated -- §S-S-T-N
      end Reply;

      state Terminated is null state; -- §S-S-N
   end Session;

end Test;

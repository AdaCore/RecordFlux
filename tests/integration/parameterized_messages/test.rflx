package Test is

   type Length is range 1 .. 2 ** 14 - 1 with Size => 16;

   type Message (Length : Length; Extended : Boolean) is
      message
         Data : Opaque
            with Size => Length * 8
            then Extension
               if Extended = True
            then null
               if Extended = False;
         Extension : Opaque
            with Size => Length * 8;
      end message;

   generic
      C : Channel with Readable, Writable;
   session Session with
      Initial => Start,
      Final => Terminated
   is
      M_R : Message;
      M_S : Message;
   begin
      state Start
      is
      begin
         M_R'Reset (Length => 2, Extended => False);
      transition
         goto Receive
      end Start;

      state Receive
      is
      begin
         C'Read (M_R);
      transition
         goto Process
            if M_R'Valid
         goto Error
      end Receive;

      state Process
      is
      begin
         M_S := Message'(Length => M_R.Length, Extended => True, Data => M_R.Data, Extension => [3, 4]);
      transition
         goto Reply
      exception
         goto Error
      end Process;

      state Reply
      is
      begin
         C'Write (M_S);
      transition
         goto Terminated
      end Reply;

      state Error
      is
      begin
      transition
         goto Terminated
      end Error;

      state Terminated is null state;
   end Session;

end Test;

with Universal;

package Test is

   type Size is range 0 .. 2 ** 32 - 1 with Size => 32;

   generic
      with function Check_Size (Size : Size; Data : Opaque) return Boolean;
   machine S is
   begin
      state Start is
      begin
      transition
         goto Check_Message
      end Start;

      state Check_Message is
         Valid : Boolean;
         Message : Universal::Message;
      begin
         Message := Universal::Message'(Message_Type => Universal::MT_Data, Length => 2, Data => [3, 4]);
         Valid := Check_Size (Message'Size, Message'Opaque);
      transition
         goto Check_Message_Sequence
            if Valid
         goto Error
      exception
         goto Error
      end Check_Message;

      state Check_Message_Sequence is
         Valid : Boolean;
         Message_Sequence : Universal::Options;
      begin
         Message_Sequence'Append (Universal::Option'(Option_Type => Universal::OT_Data, Length => 2, Data => [3, 4]));
         Valid := Check_Size (Message_Sequence'Size, Message_Sequence'Opaque);
      transition
         goto Check_Scalar_Sequence
            if Valid
         goto Error
      exception
         goto Error
      end Check_Message_Sequence;

      state Check_Scalar_Sequence is
         Valid : Boolean;
         Scalar_Sequence : Universal::Values;
      begin
         Scalar_Sequence'Append (1);
         Scalar_Sequence'Append (2);
         Valid := Check_Size (Scalar_Sequence'Size, Scalar_Sequence'Opaque);
      transition
         goto null
            if Valid
         goto Error
      exception
         goto Error
      end Check_Scalar_Sequence;

      state Error is
      begin
      transition
         goto null
      end Error;
   end S;

end Test;

with TLV;

package Test is

   generic
      Channel : Channel with Writable;
   machine S is
      Messages : TLV::Messages;
      Tags : TLV::Tags;
      Message : TLV::Message;
   begin
      state Global is
         Message_Tag : TLV::Tag;
         Tag : TLV::Tag;
      begin
         Messages'Append (TLV::Message'(Tag => TLV::Msg_Data, Length => 1, Value => [2]));
         Tags'Append (TLV::Msg_Error);
         Message := Messages'Head;
         Message_Tag := Message.Tag;
         Tag := Tags'Head;
      transition
         goto Reply_1
            if Message_Tag = TLV::Msg_Data
               and Tag = TLV::Msg_Error
         goto null
      exception
         goto null
      end Global;

      state Reply_1 is
      begin
         Channel'Write (Message);
      transition
         goto Local
      end Reply_1;

      state Local is
         Local_Messages : TLV::Messages;
         Local_Tags : TLV::Tags;
         Message_Tag : TLV::Tag;
         Tag : TLV::Tag;
      begin
         Local_Messages'Append (TLV::Message'(Tag => TLV::Msg_Data, Length => 2, Value => [3, 4]));
         Messages'Append (TLV::Message'(Tag => TLV::Msg_Data, Length => 1, Value => [2]));
         Local_Tags'Append (TLV::Msg_Data);
         Local_Tags'Append (TLV::Msg_Error);
         Message := Local_Messages'Head;
         Message_Tag := Message.Tag;
         Tag := Local_Tags'Head;
      transition
         goto Reply_2
            if Message_Tag = TLV::Msg_Data
               and Tag = TLV::Msg_Data
         goto null
      exception
         goto null
      end Local;

      state Reply_2 is
      begin
         Channel'Write (Message);
      transition
         goto null
      end Reply_2;
   end S;

end Test;

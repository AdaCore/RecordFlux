package Test is

   type Message is
      message
         Data : Opaque;
      end message;

   generic
      Channel : Channel with Readable, Writable; -- §S-P-C-RW
   machine S is
      M_R : Message; -- §S-D-V-T-M, §S-D-V-E-N
      M_S : Message; -- §S-D-V-T-M, §S-D-V-E-N
   begin
      state Start is
      begin
         Channel'Read (M_R); -- §S-S-A-RD-V
      transition
         goto Process -- §S-S-T-N
      end Start;

      state Process is
      begin
         -- §S-S-A-A-MA, §S-E-A-T-O, §S-E-A-E-S
         M_S := Message'(Data => M_R.Data);
      transition
         goto Reply -- §S-S-T-N
      exception
         goto null -- §S-S-E
      end Process;

      state Reply is
      begin
         Channel'Write (M_S); -- §S-S-A-WR-V
      transition
         goto null -- §S-S-T-N
      end Reply;
   end S;

end Test;

with Universal;

package Test is

   generic
      Channel : Channel with Readable, Writable;
   machine S is
      M_R : Universal::Message;
      M_S : Universal::Message;
   begin
      state Start is
      begin
         Channel'Read (M_R);
      transition
         goto Process
            if M_R'Valid = True
               and M_R.Message_Type = Universal::MT_Data
               and M_R.Length = 2
               and M_R.Length'Valid
               and M_R.Data'Present
         goto null
      exception
         goto null
      end Start;

      state Process is
      begin
         M_S := Universal::Message'
            (Message_Type => Universal::MT_Data,
             Length => M_R'Size / 8,
             Data => M_R'Opaque);
      transition
         goto Reply
      exception
         goto null
      end Process;

      state Reply is
      begin
         Channel'Write (M_S);
      transition
         goto Create_Empty
      end Reply;

      state Create_Empty is
      begin
         M_S := Universal::Message'
            (Message_Type => Universal::MT_Data,
             Length => 0,
             Data => []);
      transition
         goto Send_Empty
      exception
         goto null
      end Create_Empty;

      state Send_Empty is
      begin
         Channel'Write (M_S);
      transition
         goto null
      end Send_Empty;
   end S;

end Test;

------------------------------------------------------------------------------
--                                                                          --
--                         Generated by RecordFlux                          --
--                                                                          --
--                          Copyright (C) AdaCore                           --
--                                                                          --
--         SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception          --
--                                                                          --
------------------------------------------------------------------------------

pragma Restrictions (No_Streams);
pragma Ada_2012;
pragma Style_Checks ("N3aAbCdefhiIklnOprStux");
pragma Warnings (Off, "redundant conversion");
with RFLX.RFLX_Types.Operators;

package body RFLX.Test.Session.FSM with
  SPARK_Mode
is

   use RFLX.RFLX_Types.Operators;

   use type RFLX.RFLX_Types.Bytes_Ptr;

   use type RFLX.RFLX_Types.Bit_Length;

   use type RFLX.Universal.Option_Type;

   use type RFLX.Universal.Length;

   procedure Start (Ctx : in out Context) with
     Pre =>
       Initialized (Ctx),
     Post =>
       Initialized (Ctx)
   is
      function Start_Invariant return Boolean is
        (Ctx.P.Slots.Slot_Ptr_1 = null
         and Ctx.P.Slots.Slot_Ptr_2 = null
         and Ctx.P.Slots.Slot_Ptr_3 = null
         and Ctx.P.Slots.Slot_Ptr_4 /= null
         and Ctx.P.Slots.Slot_Ptr_5 /= null)
       with
        Annotate =>
          (GNATprove, Inline_For_Proof),
        Ghost;
   begin
      pragma Assert (Start_Invariant);
      pragma Warnings (Off, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition is always False");
      pragma Warnings (Off, "this code can never be executed and has been deleted");
      pragma Warnings (Off, "statement has no effect");
      pragma Warnings (Off, "this statement is never reached");
      if not Universal.Options.Valid (Ctx.P.Options_Ctx) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Start_Invariant);
         goto Finalize_Start;
      end if;
      pragma Warnings (On, "this statement is never reached");
      pragma Warnings (On, "statement has no effect");
      pragma Warnings (On, "this code can never be executed and has been deleted");
      pragma Warnings (On, "condition is always False");
      pragma Warnings (On, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition is always False");
      pragma Warnings (Off, "this code can never be executed and has been deleted");
      pragma Warnings (Off, "statement has no effect");
      pragma Warnings (Off, "this statement is never reached");
      if not Universal.Options.Has_Element (Ctx.P.Options_Ctx) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Start_Invariant);
         goto Finalize_Start;
      end if;
      pragma Warnings (On, "this statement is never reached");
      pragma Warnings (On, "statement has no effect");
      pragma Warnings (On, "this code can never be executed and has been deleted");
      pragma Warnings (On, "condition is always False");
      pragma Warnings (On, "condition can only be False if invalid values present");
      -- tests/feature/session_comprehension_head/test.rflx:15:10
      if not Universal.Options.Has_Element (Ctx.P.Options_Ctx) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Start_Invariant);
         goto Finalize_Start;
      end if;
      declare
         RFLX_Element_Options_Ctx : Universal.Option.Context;
      begin
         Universal.Options.Switch (Ctx.P.Options_Ctx, RFLX_Element_Options_Ctx);
         if not Universal.Option.Sufficient_Space (RFLX_Element_Options_Ctx, Universal.Option.F_Option_Type) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            Universal.Options.Update (Ctx.P.Options_Ctx, RFLX_Element_Options_Ctx);
            pragma Warnings (On, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Start_Invariant);
            goto Finalize_Start;
         end if;
         if not RFLX.Universal.Option.Field_Condition (RFLX_Element_Options_Ctx, RFLX.Universal.Option.F_Option_Type, Universal.To_Base_Integer (Universal.OT_Data)) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            Universal.Options.Update (Ctx.P.Options_Ctx, RFLX_Element_Options_Ctx);
            pragma Warnings (On, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Start_Invariant);
            goto Finalize_Start;
         end if;
         Universal.Option.Set_Option_Type (RFLX_Element_Options_Ctx, Universal.OT_Data);
         if not Universal.Option.Sufficient_Space (RFLX_Element_Options_Ctx, Universal.Option.F_Length) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            Universal.Options.Update (Ctx.P.Options_Ctx, RFLX_Element_Options_Ctx);
            pragma Warnings (On, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Start_Invariant);
            goto Finalize_Start;
         end if;
         if not RFLX.Universal.Option.Field_Condition (RFLX_Element_Options_Ctx, RFLX.Universal.Option.F_Length, Universal.To_Base_Integer (Universal.Length'(1))) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            Universal.Options.Update (Ctx.P.Options_Ctx, RFLX_Element_Options_Ctx);
            pragma Warnings (On, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Start_Invariant);
            goto Finalize_Start;
         end if;
         Universal.Option.Set_Length (RFLX_Element_Options_Ctx, Universal.Length'(1));
         if not Universal.Option.Valid_Length (RFLX_Element_Options_Ctx, Universal.Option.F_Data, RFLX_Types.To_Length (1 * RFLX_Types.Byte'Size)) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            Universal.Options.Update (Ctx.P.Options_Ctx, RFLX_Element_Options_Ctx);
            pragma Warnings (On, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Start_Invariant);
            goto Finalize_Start;
         end if;
         if not Universal.Option.Sufficient_Space (RFLX_Element_Options_Ctx, Universal.Option.F_Data) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            Universal.Options.Update (Ctx.P.Options_Ctx, RFLX_Element_Options_Ctx);
            pragma Warnings (On, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Start_Invariant);
            goto Finalize_Start;
         end if;
         if not RFLX.Universal.Option.Field_Condition (RFLX_Element_Options_Ctx, RFLX.Universal.Option.F_Data, 0) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            Universal.Options.Update (Ctx.P.Options_Ctx, RFLX_Element_Options_Ctx);
            pragma Warnings (On, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Start_Invariant);
            goto Finalize_Start;
         end if;
         Universal.Option.Set_Data (RFLX_Element_Options_Ctx, (RFLX_Types.Index'First => RFLX_Types.Byte'Val (2)));
         pragma Warnings (Off, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
         Universal.Options.Update (Ctx.P.Options_Ctx, RFLX_Element_Options_Ctx);
         pragma Warnings (On, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
      end;
      pragma Warnings (Off, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition is always False");
      pragma Warnings (Off, "this code can never be executed and has been deleted");
      pragma Warnings (Off, "statement has no effect");
      pragma Warnings (Off, "this statement is never reached");
      if not Universal.Options.Valid (Ctx.P.Options_Ctx) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Start_Invariant);
         goto Finalize_Start;
      end if;
      pragma Warnings (On, "this statement is never reached");
      pragma Warnings (On, "statement has no effect");
      pragma Warnings (On, "this code can never be executed and has been deleted");
      pragma Warnings (On, "condition is always False");
      pragma Warnings (On, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition is always False");
      pragma Warnings (Off, "this code can never be executed and has been deleted");
      pragma Warnings (Off, "statement has no effect");
      pragma Warnings (Off, "this statement is never reached");
      if not Universal.Options.Has_Element (Ctx.P.Options_Ctx) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Start_Invariant);
         goto Finalize_Start;
      end if;
      pragma Warnings (On, "this statement is never reached");
      pragma Warnings (On, "statement has no effect");
      pragma Warnings (On, "this code can never be executed and has been deleted");
      pragma Warnings (On, "condition is always False");
      pragma Warnings (On, "condition can only be False if invalid values present");
      -- tests/feature/session_comprehension_head/test.rflx:17:10
      if not Universal.Options.Has_Element (Ctx.P.Options_Ctx) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Start_Invariant);
         goto Finalize_Start;
      end if;
      declare
         RFLX_Element_Options_Ctx : Universal.Option.Context;
      begin
         Universal.Options.Switch (Ctx.P.Options_Ctx, RFLX_Element_Options_Ctx);
         if not Universal.Option.Sufficient_Space (RFLX_Element_Options_Ctx, Universal.Option.F_Option_Type) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            Universal.Options.Update (Ctx.P.Options_Ctx, RFLX_Element_Options_Ctx);
            pragma Warnings (On, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Start_Invariant);
            goto Finalize_Start;
         end if;
         if not RFLX.Universal.Option.Field_Condition (RFLX_Element_Options_Ctx, RFLX.Universal.Option.F_Option_Type, Universal.To_Base_Integer (Universal.OT_Null)) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            Universal.Options.Update (Ctx.P.Options_Ctx, RFLX_Element_Options_Ctx);
            pragma Warnings (On, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Start_Invariant);
            goto Finalize_Start;
         end if;
         Universal.Option.Set_Option_Type (RFLX_Element_Options_Ctx, Universal.OT_Null);
         pragma Warnings (Off, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
         Universal.Options.Update (Ctx.P.Options_Ctx, RFLX_Element_Options_Ctx);
         pragma Warnings (On, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
      end;
      pragma Warnings (Off, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition is always False");
      pragma Warnings (Off, "this code can never be executed and has been deleted");
      pragma Warnings (Off, "statement has no effect");
      pragma Warnings (Off, "this statement is never reached");
      if not Universal.Options.Valid (Ctx.P.Options_Ctx) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Start_Invariant);
         goto Finalize_Start;
      end if;
      pragma Warnings (On, "this statement is never reached");
      pragma Warnings (On, "statement has no effect");
      pragma Warnings (On, "this code can never be executed and has been deleted");
      pragma Warnings (On, "condition is always False");
      pragma Warnings (On, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition is always False");
      pragma Warnings (Off, "this code can never be executed and has been deleted");
      pragma Warnings (Off, "statement has no effect");
      pragma Warnings (Off, "this statement is never reached");
      if not Universal.Options.Has_Element (Ctx.P.Options_Ctx) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Start_Invariant);
         goto Finalize_Start;
      end if;
      pragma Warnings (On, "this statement is never reached");
      pragma Warnings (On, "statement has no effect");
      pragma Warnings (On, "this code can never be executed and has been deleted");
      pragma Warnings (On, "condition is always False");
      pragma Warnings (On, "condition can only be False if invalid values present");
      -- tests/feature/session_comprehension_head/test.rflx:19:10
      if not Universal.Options.Has_Element (Ctx.P.Options_Ctx) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Start_Invariant);
         goto Finalize_Start;
      end if;
      declare
         RFLX_Element_Options_Ctx : Universal.Option.Context;
      begin
         Universal.Options.Switch (Ctx.P.Options_Ctx, RFLX_Element_Options_Ctx);
         if not Universal.Option.Sufficient_Space (RFLX_Element_Options_Ctx, Universal.Option.F_Option_Type) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            Universal.Options.Update (Ctx.P.Options_Ctx, RFLX_Element_Options_Ctx);
            pragma Warnings (On, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Start_Invariant);
            goto Finalize_Start;
         end if;
         if not RFLX.Universal.Option.Field_Condition (RFLX_Element_Options_Ctx, RFLX.Universal.Option.F_Option_Type, Universal.To_Base_Integer (Universal.OT_Data)) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            Universal.Options.Update (Ctx.P.Options_Ctx, RFLX_Element_Options_Ctx);
            pragma Warnings (On, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Start_Invariant);
            goto Finalize_Start;
         end if;
         Universal.Option.Set_Option_Type (RFLX_Element_Options_Ctx, Universal.OT_Data);
         if not Universal.Option.Sufficient_Space (RFLX_Element_Options_Ctx, Universal.Option.F_Length) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            Universal.Options.Update (Ctx.P.Options_Ctx, RFLX_Element_Options_Ctx);
            pragma Warnings (On, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Start_Invariant);
            goto Finalize_Start;
         end if;
         if not RFLX.Universal.Option.Field_Condition (RFLX_Element_Options_Ctx, RFLX.Universal.Option.F_Length, Universal.To_Base_Integer (Universal.Length'(2))) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            Universal.Options.Update (Ctx.P.Options_Ctx, RFLX_Element_Options_Ctx);
            pragma Warnings (On, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Start_Invariant);
            goto Finalize_Start;
         end if;
         Universal.Option.Set_Length (RFLX_Element_Options_Ctx, Universal.Length'(2));
         if not Universal.Option.Valid_Length (RFLX_Element_Options_Ctx, Universal.Option.F_Data, RFLX_Types.To_Length (2 * RFLX_Types.Byte'Size)) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            Universal.Options.Update (Ctx.P.Options_Ctx, RFLX_Element_Options_Ctx);
            pragma Warnings (On, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Start_Invariant);
            goto Finalize_Start;
         end if;
         if not Universal.Option.Sufficient_Space (RFLX_Element_Options_Ctx, Universal.Option.F_Data) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            Universal.Options.Update (Ctx.P.Options_Ctx, RFLX_Element_Options_Ctx);
            pragma Warnings (On, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Start_Invariant);
            goto Finalize_Start;
         end if;
         if not RFLX.Universal.Option.Field_Condition (RFLX_Element_Options_Ctx, RFLX.Universal.Option.F_Data, 0) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            Universal.Options.Update (Ctx.P.Options_Ctx, RFLX_Element_Options_Ctx);
            pragma Warnings (On, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Start_Invariant);
            goto Finalize_Start;
         end if;
         Universal.Option.Set_Data (RFLX_Element_Options_Ctx, (RFLX_Types.Byte'Val (2), RFLX_Types.Byte'Val (3)));
         pragma Warnings (Off, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
         Universal.Options.Update (Ctx.P.Options_Ctx, RFLX_Element_Options_Ctx);
         pragma Warnings (On, """RFLX_Element_Options_Ctx"" is set by ""Update"" but not used after the call");
      end;
      Ctx.P.Next_State := S_Process_1;
      pragma Assert (Start_Invariant);
      <<Finalize_Start>>
   end Start;

   procedure Process_1 (Ctx : in out Context) with
     Pre =>
       Initialized (Ctx),
     Post =>
       Initialized (Ctx)
   is
      First_Option_Length : Universal.Length;
      T_0 : Universal.Option_Type;
      T_1 : Universal.Option_Type;
      function Process_1_Invariant return Boolean is
        (Ctx.P.Slots.Slot_Ptr_1 = null
         and Ctx.P.Slots.Slot_Ptr_2 = null
         and Ctx.P.Slots.Slot_Ptr_3 = null
         and Ctx.P.Slots.Slot_Ptr_4 /= null
         and Ctx.P.Slots.Slot_Ptr_5 /= null)
       with
        Annotate =>
          (GNATprove, Inline_For_Proof),
        Ghost;
   begin
      pragma Assert (Process_1_Invariant);
      -- tests/feature/session_comprehension_head/test.rflx:30:10
      if not Universal.Options.Valid (Ctx.P.Options_Ctx) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Process_1_Invariant);
         goto Finalize_Process_1;
      end if;
      declare
         RFLX_Copy_Options_Ctx : Universal.Options.Context;
         RFLX_Copy_Options_Buffer : RFLX_Types.Bytes_Ptr;
      begin
         RFLX_Copy_Options_Buffer := Ctx.P.Slots.Slot_Ptr_4;
         pragma Warnings (Off, "unused assignment");
         Ctx.P.Slots.Slot_Ptr_4 := null;
         pragma Warnings (On, "unused assignment");
         if not (RFLX_Types.Index'Last - RFLX_Copy_Options_Buffer'First >= RFLX_Types.Index (Universal.Options.Byte_Size (Ctx.P.Options_Ctx) + 1)) then
            Ctx.P.Next_State := S_Final;
            pragma Assert (Ctx.P.Slots.Slot_Ptr_4 = null);
            pragma Assert (RFLX_Copy_Options_Buffer /= null);
            Ctx.P.Slots.Slot_Ptr_4 := RFLX_Copy_Options_Buffer;
            pragma Assert (Ctx.P.Slots.Slot_Ptr_4 /= null);
            pragma Assert (Process_1_Invariant);
            goto Finalize_Process_1;
         end if;
         Universal.Options.Copy (Ctx.P.Options_Ctx, RFLX_Copy_Options_Buffer.all (RFLX_Copy_Options_Buffer'First .. (if
             Universal.Options.Byte_Size (Ctx.P.Options_Ctx) > 0
          then
             RFLX_Copy_Options_Buffer'First + Universal.Options.Byte_Size (Ctx.P.Options_Ctx) - RFLX_Types.Length'(1)
          else
             (-1))));
         Universal.Options.Initialize (RFLX_Copy_Options_Ctx, RFLX_Copy_Options_Buffer, RFLX_Types.To_First_Bit_Index (RFLX_Copy_Options_Buffer'First), Universal.Options.Sequence_Last (Ctx.P.Options_Ctx));
         declare
            RFLX_First_Option_Length_Found : Boolean := False;
         begin
            First_Option_Length := Universal.Length'First;
            while Universal.Options.Has_Element (RFLX_Copy_Options_Ctx) loop
               pragma Loop_Invariant (Universal.Options.Has_Buffer (RFLX_Copy_Options_Ctx));
               pragma Loop_Invariant (RFLX_Copy_Options_Ctx.Buffer_First = RFLX_Copy_Options_Ctx.Buffer_First'Loop_Entry);
               pragma Loop_Invariant (RFLX_Copy_Options_Ctx.Buffer_Last = RFLX_Copy_Options_Ctx.Buffer_Last'Loop_Entry);
               pragma Loop_Invariant (RFLX_Copy_Options_Buffer = null);
               pragma Loop_Invariant (Ctx.P.Slots.Slot_Ptr_4 = null);
               declare
                  E_Ctx : Universal.Option.Context;
               begin
                  Universal.Options.Switch (RFLX_Copy_Options_Ctx, E_Ctx);
                  Universal.Option.Verify_Message (E_Ctx);
                  -- tests/feature/session_comprehension_head/test.rflx:30:54
                  pragma Warnings (Off, "condition can only be False if invalid values present");
                  pragma Warnings (Off, "condition is always False");
                  pragma Warnings (Off, "this code can never be executed and has been deleted");
                  pragma Warnings (Off, "statement has no effect");
                  pragma Warnings (Off, "this statement is never reached");
                  if not Universal.Option.Valid (E_Ctx, Universal.Option.F_Option_Type) then
                     Ctx.P.Next_State := S_Final;
                     pragma Warnings (Off, """E_Ctx"" is set by ""Update"" but not used after the call");
                     Universal.Options.Update (RFLX_Copy_Options_Ctx, E_Ctx);
                     pragma Warnings (On, """E_Ctx"" is set by ""Update"" but not used after the call");
                     pragma Warnings (Off, """RFLX_Copy_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
                     Universal.Options.Take_Buffer (RFLX_Copy_Options_Ctx, RFLX_Copy_Options_Buffer);
                     pragma Warnings (On, """RFLX_Copy_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
                     pragma Assert (Ctx.P.Slots.Slot_Ptr_4 = null);
                     pragma Assert (RFLX_Copy_Options_Buffer /= null);
                     Ctx.P.Slots.Slot_Ptr_4 := RFLX_Copy_Options_Buffer;
                     pragma Assert (Ctx.P.Slots.Slot_Ptr_4 /= null);
                     pragma Assert (Process_1_Invariant);
                     goto Finalize_Process_1;
                  end if;
                  pragma Warnings (On, "this statement is never reached");
                  pragma Warnings (On, "statement has no effect");
                  pragma Warnings (On, "this code can never be executed and has been deleted");
                  pragma Warnings (On, "condition is always False");
                  pragma Warnings (On, "condition can only be False if invalid values present");
                  -- tests/feature/session_comprehension_head/test.rflx:30:54
                  T_0 := Universal.Option.Get_Option_Type (E_Ctx);
                  if T_0 = (Known => True, Enum => Universal.OT_Data) then
                     -- tests/feature/session_comprehension_head/test.rflx:30:92
                     pragma Warnings (Off, "condition can only be False if invalid values present");
                     pragma Warnings (Off, "condition is always False");
                     pragma Warnings (Off, "this code can never be executed and has been deleted");
                     pragma Warnings (Off, "statement has no effect");
                     pragma Warnings (Off, "this statement is never reached");
                     if not Universal.Option.Valid (E_Ctx, Universal.Option.F_Length) then
                        Ctx.P.Next_State := S_Final;
                        pragma Warnings (Off, """E_Ctx"" is set by ""Update"" but not used after the call");
                        Universal.Options.Update (RFLX_Copy_Options_Ctx, E_Ctx);
                        pragma Warnings (On, """E_Ctx"" is set by ""Update"" but not used after the call");
                        pragma Warnings (Off, """RFLX_Copy_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
                        Universal.Options.Take_Buffer (RFLX_Copy_Options_Ctx, RFLX_Copy_Options_Buffer);
                        pragma Warnings (On, """RFLX_Copy_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
                        pragma Assert (Ctx.P.Slots.Slot_Ptr_4 = null);
                        pragma Assert (RFLX_Copy_Options_Buffer /= null);
                        Ctx.P.Slots.Slot_Ptr_4 := RFLX_Copy_Options_Buffer;
                        pragma Assert (Ctx.P.Slots.Slot_Ptr_4 /= null);
                        pragma Assert (Process_1_Invariant);
                        goto Finalize_Process_1;
                     end if;
                     pragma Warnings (On, "this statement is never reached");
                     pragma Warnings (On, "statement has no effect");
                     pragma Warnings (On, "this code can never be executed and has been deleted");
                     pragma Warnings (On, "condition is always False");
                     pragma Warnings (On, "condition can only be False if invalid values present");
                     First_Option_Length := Universal.Option.Get_Length (E_Ctx);
                     RFLX_First_Option_Length_Found := True;
                     pragma Warnings (Off, """E_Ctx"" is set by ""Update"" but not used after the call");
                     Universal.Options.Update (RFLX_Copy_Options_Ctx, E_Ctx);
                     pragma Warnings (On, """E_Ctx"" is set by ""Update"" but not used after the call");
                     exit;
                  end if;
                  pragma Warnings (Off, """E_Ctx"" is set by ""Update"" but not used after the call");
                  Universal.Options.Update (RFLX_Copy_Options_Ctx, E_Ctx);
                  pragma Warnings (On, """E_Ctx"" is set by ""Update"" but not used after the call");
               end;
            end loop;
            if not RFLX_First_Option_Length_Found then
               Ctx.P.Next_State := S_Final;
               pragma Warnings (Off, """RFLX_Copy_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
               Universal.Options.Take_Buffer (RFLX_Copy_Options_Ctx, RFLX_Copy_Options_Buffer);
               pragma Warnings (On, """RFLX_Copy_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
               pragma Assert (Ctx.P.Slots.Slot_Ptr_4 = null);
               pragma Assert (RFLX_Copy_Options_Buffer /= null);
               Ctx.P.Slots.Slot_Ptr_4 := RFLX_Copy_Options_Buffer;
               pragma Assert (Ctx.P.Slots.Slot_Ptr_4 /= null);
               pragma Assert (Process_1_Invariant);
               goto Finalize_Process_1;
            end if;
         end;
         pragma Warnings (Off, """RFLX_Copy_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
         Universal.Options.Take_Buffer (RFLX_Copy_Options_Ctx, RFLX_Copy_Options_Buffer);
         pragma Warnings (On, """RFLX_Copy_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
         pragma Assert (Ctx.P.Slots.Slot_Ptr_4 = null);
         pragma Assert (RFLX_Copy_Options_Buffer /= null);
         Ctx.P.Slots.Slot_Ptr_4 := RFLX_Copy_Options_Buffer;
         pragma Assert (Ctx.P.Slots.Slot_Ptr_4 /= null);
      end;
      -- tests/feature/session_comprehension_head/test.rflx:32:10
      if not Universal.Options.Valid (Ctx.P.Options_Ctx) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Process_1_Invariant);
         goto Finalize_Process_1;
      end if;
      declare
         RFLX_Copy_Options_Ctx : Universal.Options.Context;
         RFLX_Copy_Options_Buffer : RFLX_Types.Bytes_Ptr;
      begin
         RFLX_Copy_Options_Buffer := Ctx.P.Slots.Slot_Ptr_5;
         pragma Warnings (Off, "unused assignment");
         Ctx.P.Slots.Slot_Ptr_5 := null;
         pragma Warnings (On, "unused assignment");
         if not (RFLX_Types.Index'Last - RFLX_Copy_Options_Buffer'First >= RFLX_Types.Index (Universal.Options.Byte_Size (Ctx.P.Options_Ctx) + 1)) then
            Ctx.P.Next_State := S_Final;
            pragma Assert (Ctx.P.Slots.Slot_Ptr_5 = null);
            pragma Assert (RFLX_Copy_Options_Buffer /= null);
            Ctx.P.Slots.Slot_Ptr_5 := RFLX_Copy_Options_Buffer;
            pragma Assert (Ctx.P.Slots.Slot_Ptr_5 /= null);
            pragma Assert (Process_1_Invariant);
            goto Finalize_Process_1;
         end if;
         Universal.Options.Copy (Ctx.P.Options_Ctx, RFLX_Copy_Options_Buffer.all (RFLX_Copy_Options_Buffer'First .. (if
             Universal.Options.Byte_Size (Ctx.P.Options_Ctx) > 0
          then
             RFLX_Copy_Options_Buffer'First + Universal.Options.Byte_Size (Ctx.P.Options_Ctx) - RFLX_Types.Length'(1)
          else
             (-1))));
         Universal.Options.Initialize (RFLX_Copy_Options_Ctx, RFLX_Copy_Options_Buffer, RFLX_Types.To_First_Bit_Index (RFLX_Copy_Options_Buffer'First), Universal.Options.Sequence_Last (Ctx.P.Options_Ctx));
         declare
            RFLX_First_Option_Found : Boolean := False;
         begin
            while Universal.Options.Has_Element (RFLX_Copy_Options_Ctx) loop
               pragma Loop_Invariant (Universal.Options.Has_Buffer (RFLX_Copy_Options_Ctx));
               pragma Loop_Invariant (RFLX_Copy_Options_Ctx.Buffer_First = RFLX_Copy_Options_Ctx.Buffer_First'Loop_Entry);
               pragma Loop_Invariant (RFLX_Copy_Options_Ctx.Buffer_Last = RFLX_Copy_Options_Ctx.Buffer_Last'Loop_Entry);
               pragma Loop_Invariant (Ctx.P.First_Option_Ctx.Buffer_First = Ctx.P.First_Option_Ctx.Buffer_First'Loop_Entry);
               pragma Loop_Invariant (Ctx.P.First_Option_Ctx.Buffer_Last = Ctx.P.First_Option_Ctx.Buffer_Last'Loop_Entry);
               pragma Loop_Invariant (Universal.Option.Has_Buffer (Ctx.P.First_Option_Ctx));
               pragma Loop_Invariant (RFLX_Copy_Options_Buffer = null);
               pragma Loop_Invariant (Ctx.P.Slots.Slot_Ptr_5 = null);
               declare
                  E_Ctx : Universal.Option.Context;
               begin
                  Universal.Options.Switch (RFLX_Copy_Options_Ctx, E_Ctx);
                  Universal.Option.Verify_Message (E_Ctx);
                  -- tests/feature/session_comprehension_head/test.rflx:32:47
                  pragma Warnings (Off, "condition can only be False if invalid values present");
                  pragma Warnings (Off, "condition is always False");
                  pragma Warnings (Off, "this code can never be executed and has been deleted");
                  pragma Warnings (Off, "statement has no effect");
                  pragma Warnings (Off, "this statement is never reached");
                  if not Universal.Option.Valid (E_Ctx, Universal.Option.F_Option_Type) then
                     Ctx.P.Next_State := S_Final;
                     pragma Warnings (Off, """E_Ctx"" is set by ""Update"" but not used after the call");
                     Universal.Options.Update (RFLX_Copy_Options_Ctx, E_Ctx);
                     pragma Warnings (On, """E_Ctx"" is set by ""Update"" but not used after the call");
                     pragma Warnings (Off, """RFLX_Copy_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
                     Universal.Options.Take_Buffer (RFLX_Copy_Options_Ctx, RFLX_Copy_Options_Buffer);
                     pragma Warnings (On, """RFLX_Copy_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
                     pragma Assert (Ctx.P.Slots.Slot_Ptr_5 = null);
                     pragma Assert (RFLX_Copy_Options_Buffer /= null);
                     Ctx.P.Slots.Slot_Ptr_5 := RFLX_Copy_Options_Buffer;
                     pragma Assert (Ctx.P.Slots.Slot_Ptr_5 /= null);
                     pragma Assert (Process_1_Invariant);
                     goto Finalize_Process_1;
                  end if;
                  pragma Warnings (On, "this statement is never reached");
                  pragma Warnings (On, "statement has no effect");
                  pragma Warnings (On, "this code can never be executed and has been deleted");
                  pragma Warnings (On, "condition is always False");
                  pragma Warnings (On, "condition can only be False if invalid values present");
                  -- tests/feature/session_comprehension_head/test.rflx:32:47
                  T_1 := Universal.Option.Get_Option_Type (E_Ctx);
                  if T_1 = (Known => True, Enum => Universal.OT_Data) then
                     if not Universal.Option.Well_Formed_Message (E_Ctx) then
                        Ctx.P.Next_State := S_Final;
                        pragma Warnings (Off, """E_Ctx"" is set by ""Update"" but not used after the call");
                        Universal.Options.Update (RFLX_Copy_Options_Ctx, E_Ctx);
                        pragma Warnings (On, """E_Ctx"" is set by ""Update"" but not used after the call");
                        pragma Warnings (Off, """RFLX_Copy_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
                        Universal.Options.Take_Buffer (RFLX_Copy_Options_Ctx, RFLX_Copy_Options_Buffer);
                        pragma Warnings (On, """RFLX_Copy_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
                        pragma Assert (Ctx.P.Slots.Slot_Ptr_5 = null);
                        pragma Assert (RFLX_Copy_Options_Buffer /= null);
                        Ctx.P.Slots.Slot_Ptr_5 := RFLX_Copy_Options_Buffer;
                        pragma Assert (Ctx.P.Slots.Slot_Ptr_5 /= null);
                        pragma Assert (Process_1_Invariant);
                        goto Finalize_Process_1;
                     end if;
                     declare
                        RFLX_Target_First_Option_Buffer : RFLX_Types.Bytes_Ptr;
                     begin
                        pragma Warnings (Off, """Ctx.P.First_Option_Ctx"" is set by ""Take_Buffer"" but not used after the call");
                        Universal.Option.Take_Buffer (Ctx.P.First_Option_Ctx, RFLX_Target_First_Option_Buffer);
                        pragma Warnings (On, """Ctx.P.First_Option_Ctx"" is set by ""Take_Buffer"" but not used after the call");
                        if not (RFLX_Types.Index'Last - RFLX_Target_First_Option_Buffer'First >= RFLX_Types.Index (Universal.Option.Byte_Size (E_Ctx) + 1)) then
                           Ctx.P.Next_State := S_Final;
                           Universal.Option.Initialize (Ctx.P.First_Option_Ctx, RFLX_Target_First_Option_Buffer);
                           pragma Warnings (Off, """E_Ctx"" is set by ""Update"" but not used after the call");
                           Universal.Options.Update (RFLX_Copy_Options_Ctx, E_Ctx);
                           pragma Warnings (On, """E_Ctx"" is set by ""Update"" but not used after the call");
                           pragma Warnings (Off, """RFLX_Copy_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
                           Universal.Options.Take_Buffer (RFLX_Copy_Options_Ctx, RFLX_Copy_Options_Buffer);
                           pragma Warnings (On, """RFLX_Copy_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
                           pragma Assert (Ctx.P.Slots.Slot_Ptr_5 = null);
                           pragma Assert (RFLX_Copy_Options_Buffer /= null);
                           Ctx.P.Slots.Slot_Ptr_5 := RFLX_Copy_Options_Buffer;
                           pragma Assert (Ctx.P.Slots.Slot_Ptr_5 /= null);
                           pragma Assert (Process_1_Invariant);
                           goto Finalize_Process_1;
                        end if;
                        if not (Universal.Option.Byte_Size (E_Ctx) <= RFLX_Target_First_Option_Buffer'Length) then
                           Ctx.P.Next_State := S_Final;
                           Universal.Option.Initialize (Ctx.P.First_Option_Ctx, RFLX_Target_First_Option_Buffer);
                           pragma Warnings (Off, """E_Ctx"" is set by ""Update"" but not used after the call");
                           Universal.Options.Update (RFLX_Copy_Options_Ctx, E_Ctx);
                           pragma Warnings (On, """E_Ctx"" is set by ""Update"" but not used after the call");
                           pragma Warnings (Off, """RFLX_Copy_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
                           Universal.Options.Take_Buffer (RFLX_Copy_Options_Ctx, RFLX_Copy_Options_Buffer);
                           pragma Warnings (On, """RFLX_Copy_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
                           pragma Assert (Ctx.P.Slots.Slot_Ptr_5 = null);
                           pragma Assert (RFLX_Copy_Options_Buffer /= null);
                           Ctx.P.Slots.Slot_Ptr_5 := RFLX_Copy_Options_Buffer;
                           pragma Assert (Ctx.P.Slots.Slot_Ptr_5 /= null);
                           pragma Assert (Process_1_Invariant);
                           goto Finalize_Process_1;
                        end if;
                        Universal.Option.Copy (E_Ctx, RFLX_Target_First_Option_Buffer.all (RFLX_Target_First_Option_Buffer'First .. (if
                            Universal.Option.Byte_Size (E_Ctx) > 0
                         then
                            RFLX_Target_First_Option_Buffer'First + Universal.Option.Byte_Size (E_Ctx) - RFLX_Types.Length'(1)
                         else
                            (-1))));
                        Universal.Option.Initialize (Ctx.P.First_Option_Ctx, RFLX_Target_First_Option_Buffer, Written_Last => RFLX_Types.To_Bit_Length (RFLX_Target_First_Option_Buffer'First + RFLX_Types.Length (Universal.Option.Byte_Size (E_Ctx)) - 1));
                        Universal.Option.Verify_Message (Ctx.P.First_Option_Ctx);
                     end;
                     RFLX_First_Option_Found := True;
                     pragma Warnings (Off, """E_Ctx"" is set by ""Update"" but not used after the call");
                     Universal.Options.Update (RFLX_Copy_Options_Ctx, E_Ctx);
                     pragma Warnings (On, """E_Ctx"" is set by ""Update"" but not used after the call");
                     exit;
                  end if;
                  pragma Warnings (Off, """E_Ctx"" is set by ""Update"" but not used after the call");
                  Universal.Options.Update (RFLX_Copy_Options_Ctx, E_Ctx);
                  pragma Warnings (On, """E_Ctx"" is set by ""Update"" but not used after the call");
               end;
            end loop;
            if not RFLX_First_Option_Found then
               Ctx.P.Next_State := S_Final;
               pragma Warnings (Off, """RFLX_Copy_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
               Universal.Options.Take_Buffer (RFLX_Copy_Options_Ctx, RFLX_Copy_Options_Buffer);
               pragma Warnings (On, """RFLX_Copy_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
               pragma Assert (Ctx.P.Slots.Slot_Ptr_5 = null);
               pragma Assert (RFLX_Copy_Options_Buffer /= null);
               Ctx.P.Slots.Slot_Ptr_5 := RFLX_Copy_Options_Buffer;
               pragma Assert (Ctx.P.Slots.Slot_Ptr_5 /= null);
               pragma Assert (Process_1_Invariant);
               goto Finalize_Process_1;
            end if;
         end;
         pragma Warnings (Off, """RFLX_Copy_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
         Universal.Options.Take_Buffer (RFLX_Copy_Options_Ctx, RFLX_Copy_Options_Buffer);
         pragma Warnings (On, """RFLX_Copy_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
         pragma Assert (Ctx.P.Slots.Slot_Ptr_5 = null);
         pragma Assert (RFLX_Copy_Options_Buffer /= null);
         Ctx.P.Slots.Slot_Ptr_5 := RFLX_Copy_Options_Buffer;
         pragma Assert (Ctx.P.Slots.Slot_Ptr_5 /= null);
      end;
      if First_Option_Length > 0 then
         Ctx.P.Next_State := S_Send_1;
      else
         Ctx.P.Next_State := S_Final;
      end if;
      pragma Assert (Process_1_Invariant);
      <<Finalize_Process_1>>
   end Process_1;

   procedure Send_1 (Ctx : in out Context) with
     Pre =>
       Initialized (Ctx),
     Post =>
       Initialized (Ctx)
   is
      function Send_1_Invariant return Boolean is
        (Ctx.P.Slots.Slot_Ptr_1 = null
         and Ctx.P.Slots.Slot_Ptr_2 = null
         and Ctx.P.Slots.Slot_Ptr_3 = null
         and Ctx.P.Slots.Slot_Ptr_4 /= null
         and Ctx.P.Slots.Slot_Ptr_5 /= null)
       with
        Annotate =>
          (GNATprove, Inline_For_Proof),
        Ghost;
   begin
      pragma Assert (Send_1_Invariant);
      -- tests/feature/session_comprehension_head/test.rflx:44:10
      Ctx.P.Next_State := S_Recv;
      pragma Assert (Send_1_Invariant);
   end Send_1;

   procedure Recv (Ctx : in out Context) with
     Pre =>
       Initialized (Ctx),
     Post =>
       Initialized (Ctx)
   is
      function Recv_Invariant return Boolean is
        (Ctx.P.Slots.Slot_Ptr_1 = null
         and Ctx.P.Slots.Slot_Ptr_2 = null
         and Ctx.P.Slots.Slot_Ptr_3 = null
         and Ctx.P.Slots.Slot_Ptr_4 /= null
         and Ctx.P.Slots.Slot_Ptr_5 /= null)
       with
        Annotate =>
          (GNATprove, Inline_For_Proof),
        Ghost;
   begin
      pragma Assert (Recv_Invariant);
      -- tests/feature/session_comprehension_head/test.rflx:52:10
      Universal.Message.Verify_Message (Ctx.P.Message_Ctx);
      Ctx.P.Next_State := S_Process_2;
      pragma Assert (Recv_Invariant);
   end Recv;

   procedure Process_2 (Ctx : in out Context) with
     Pre =>
       Initialized (Ctx),
     Post =>
       Initialized (Ctx)
   is
      T_2 : Universal.Option_Type;
      function Process_2_Invariant return Boolean is
        (Ctx.P.Slots.Slot_Ptr_1 = null
         and Ctx.P.Slots.Slot_Ptr_2 = null
         and Ctx.P.Slots.Slot_Ptr_3 = null
         and Ctx.P.Slots.Slot_Ptr_4 /= null
         and Ctx.P.Slots.Slot_Ptr_5 /= null)
       with
        Annotate =>
          (GNATprove, Inline_For_Proof),
        Ghost;
   begin
      pragma Assert (Process_2_Invariant);
      -- tests/feature/session_comprehension_head/test.rflx:61:36
      pragma Warnings (Off, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition is always False");
      pragma Warnings (Off, "this code can never be executed and has been deleted");
      pragma Warnings (Off, "statement has no effect");
      pragma Warnings (Off, "this statement is never reached");
      if not Universal.Message.Well_Formed (Ctx.P.Message_Ctx, Universal.Message.F_Options) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Process_2_Invariant);
         goto Finalize_Process_2;
      end if;
      pragma Warnings (On, "this statement is never reached");
      pragma Warnings (On, "statement has no effect");
      pragma Warnings (On, "this code can never be executed and has been deleted");
      pragma Warnings (On, "condition is always False");
      pragma Warnings (On, "condition can only be False if invalid values present");
      -- tests/feature/session_comprehension_head/test.rflx:61:10
      if not Universal.Message.Well_Formed_Message (Ctx.P.Message_Ctx) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Process_2_Invariant);
         goto Finalize_Process_2;
      end if;
      declare
         RFLX_Message_Options_Ctx : Universal.Options.Context;
         RFLX_Message_Options_Buffer : RFLX_Types.Bytes_Ptr;
      begin
         RFLX_Message_Options_Buffer := Ctx.P.Slots.Slot_Ptr_4;
         pragma Warnings (Off, "unused assignment");
         Ctx.P.Slots.Slot_Ptr_4 := null;
         pragma Warnings (On, "unused assignment");
         if not (RFLX_Types.Index'Last - RFLX_Message_Options_Buffer'First >= RFLX_Types.Index (Universal.Message.Byte_Size (Ctx.P.Message_Ctx) + 1)) then
            Ctx.P.Next_State := S_Final;
            pragma Assert (Ctx.P.Slots.Slot_Ptr_4 = null);
            pragma Assert (RFLX_Message_Options_Buffer /= null);
            Ctx.P.Slots.Slot_Ptr_4 := RFLX_Message_Options_Buffer;
            pragma Assert (Ctx.P.Slots.Slot_Ptr_4 /= null);
            pragma Assert (Process_2_Invariant);
            goto Finalize_Process_2;
         end if;
         Universal.Message.Copy (Ctx.P.Message_Ctx, RFLX_Message_Options_Buffer.all (RFLX_Message_Options_Buffer'First .. (if
             Universal.Message.Byte_Size (Ctx.P.Message_Ctx) > 0
          then
             RFLX_Message_Options_Buffer'First + Universal.Message.Byte_Size (Ctx.P.Message_Ctx) - RFLX_Types.Length'(1)
          else
             (-1))));
         if not Universal.Message.Well_Formed (Ctx.P.Message_Ctx, Universal.Message.F_Options) then
            Ctx.P.Next_State := S_Final;
            pragma Assert (Ctx.P.Slots.Slot_Ptr_4 = null);
            pragma Assert (RFLX_Message_Options_Buffer /= null);
            Ctx.P.Slots.Slot_Ptr_4 := RFLX_Message_Options_Buffer;
            pragma Assert (Ctx.P.Slots.Slot_Ptr_4 /= null);
            pragma Assert (Process_2_Invariant);
            goto Finalize_Process_2;
         end if;
         Universal.Options.Initialize (RFLX_Message_Options_Ctx, RFLX_Message_Options_Buffer, RFLX_Types.To_First_Bit_Index (RFLX_Message_Options_Buffer'First) + (Universal.Message.Field_First (Ctx.P.Message_Ctx, Universal.Message.F_Options) - Ctx.P.Message_Ctx.First), RFLX_Types.To_First_Bit_Index (RFLX_Message_Options_Buffer'First) + (Universal.Message.Field_Last (Ctx.P.Message_Ctx, Universal.Message.F_Options) - Ctx.P.Message_Ctx.First));
         declare
            RFLX_First_Option_Found : Boolean := False;
         begin
            while Universal.Options.Has_Element (RFLX_Message_Options_Ctx) loop
               pragma Loop_Invariant (Universal.Options.Has_Buffer (RFLX_Message_Options_Ctx));
               pragma Loop_Invariant (RFLX_Message_Options_Ctx.Buffer_First = RFLX_Message_Options_Ctx.Buffer_First'Loop_Entry);
               pragma Loop_Invariant (RFLX_Message_Options_Ctx.Buffer_Last = RFLX_Message_Options_Ctx.Buffer_Last'Loop_Entry);
               pragma Loop_Invariant (Ctx.P.First_Option_Ctx.Buffer_First = Ctx.P.First_Option_Ctx.Buffer_First'Loop_Entry);
               pragma Loop_Invariant (Ctx.P.First_Option_Ctx.Buffer_Last = Ctx.P.First_Option_Ctx.Buffer_Last'Loop_Entry);
               pragma Loop_Invariant (Universal.Option.Has_Buffer (Ctx.P.First_Option_Ctx));
               pragma Loop_Invariant (RFLX_Message_Options_Buffer = null);
               pragma Loop_Invariant (Ctx.P.Slots.Slot_Ptr_4 = null);
               declare
                  E_Ctx : Universal.Option.Context;
               begin
                  Universal.Options.Switch (RFLX_Message_Options_Ctx, E_Ctx);
                  Universal.Option.Verify_Message (E_Ctx);
                  -- tests/feature/session_comprehension_head/test.rflx:61:55
                  pragma Warnings (Off, "condition can only be False if invalid values present");
                  pragma Warnings (Off, "condition is always False");
                  pragma Warnings (Off, "this code can never be executed and has been deleted");
                  pragma Warnings (Off, "statement has no effect");
                  pragma Warnings (Off, "this statement is never reached");
                  if not Universal.Option.Valid (E_Ctx, Universal.Option.F_Option_Type) then
                     Ctx.P.Next_State := S_Final;
                     pragma Warnings (Off, """E_Ctx"" is set by ""Update"" but not used after the call");
                     Universal.Options.Update (RFLX_Message_Options_Ctx, E_Ctx);
                     pragma Warnings (On, """E_Ctx"" is set by ""Update"" but not used after the call");
                     pragma Warnings (Off, """RFLX_Message_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
                     Universal.Options.Take_Buffer (RFLX_Message_Options_Ctx, RFLX_Message_Options_Buffer);
                     pragma Warnings (On, """RFLX_Message_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
                     pragma Assert (Ctx.P.Slots.Slot_Ptr_4 = null);
                     pragma Assert (RFLX_Message_Options_Buffer /= null);
                     Ctx.P.Slots.Slot_Ptr_4 := RFLX_Message_Options_Buffer;
                     pragma Assert (Ctx.P.Slots.Slot_Ptr_4 /= null);
                     pragma Assert (Process_2_Invariant);
                     goto Finalize_Process_2;
                  end if;
                  pragma Warnings (On, "this statement is never reached");
                  pragma Warnings (On, "statement has no effect");
                  pragma Warnings (On, "this code can never be executed and has been deleted");
                  pragma Warnings (On, "condition is always False");
                  pragma Warnings (On, "condition can only be False if invalid values present");
                  -- tests/feature/session_comprehension_head/test.rflx:61:55
                  T_2 := Universal.Option.Get_Option_Type (E_Ctx);
                  if T_2 = (Known => True, Enum => Universal.OT_Data) then
                     if not Universal.Option.Well_Formed_Message (E_Ctx) then
                        Ctx.P.Next_State := S_Final;
                        pragma Warnings (Off, """E_Ctx"" is set by ""Update"" but not used after the call");
                        Universal.Options.Update (RFLX_Message_Options_Ctx, E_Ctx);
                        pragma Warnings (On, """E_Ctx"" is set by ""Update"" but not used after the call");
                        pragma Warnings (Off, """RFLX_Message_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
                        Universal.Options.Take_Buffer (RFLX_Message_Options_Ctx, RFLX_Message_Options_Buffer);
                        pragma Warnings (On, """RFLX_Message_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
                        pragma Assert (Ctx.P.Slots.Slot_Ptr_4 = null);
                        pragma Assert (RFLX_Message_Options_Buffer /= null);
                        Ctx.P.Slots.Slot_Ptr_4 := RFLX_Message_Options_Buffer;
                        pragma Assert (Ctx.P.Slots.Slot_Ptr_4 /= null);
                        pragma Assert (Process_2_Invariant);
                        goto Finalize_Process_2;
                     end if;
                     declare
                        RFLX_Target_First_Option_Buffer : RFLX_Types.Bytes_Ptr;
                     begin
                        pragma Warnings (Off, """Ctx.P.First_Option_Ctx"" is set by ""Take_Buffer"" but not used after the call");
                        Universal.Option.Take_Buffer (Ctx.P.First_Option_Ctx, RFLX_Target_First_Option_Buffer);
                        pragma Warnings (On, """Ctx.P.First_Option_Ctx"" is set by ""Take_Buffer"" but not used after the call");
                        if not (RFLX_Types.Index'Last - RFLX_Target_First_Option_Buffer'First >= RFLX_Types.Index (Universal.Option.Byte_Size (E_Ctx) + 1)) then
                           Ctx.P.Next_State := S_Final;
                           Universal.Option.Initialize (Ctx.P.First_Option_Ctx, RFLX_Target_First_Option_Buffer);
                           pragma Warnings (Off, """E_Ctx"" is set by ""Update"" but not used after the call");
                           Universal.Options.Update (RFLX_Message_Options_Ctx, E_Ctx);
                           pragma Warnings (On, """E_Ctx"" is set by ""Update"" but not used after the call");
                           pragma Warnings (Off, """RFLX_Message_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
                           Universal.Options.Take_Buffer (RFLX_Message_Options_Ctx, RFLX_Message_Options_Buffer);
                           pragma Warnings (On, """RFLX_Message_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
                           pragma Assert (Ctx.P.Slots.Slot_Ptr_4 = null);
                           pragma Assert (RFLX_Message_Options_Buffer /= null);
                           Ctx.P.Slots.Slot_Ptr_4 := RFLX_Message_Options_Buffer;
                           pragma Assert (Ctx.P.Slots.Slot_Ptr_4 /= null);
                           pragma Assert (Process_2_Invariant);
                           goto Finalize_Process_2;
                        end if;
                        if not (Universal.Option.Byte_Size (E_Ctx) <= RFLX_Target_First_Option_Buffer'Length) then
                           Ctx.P.Next_State := S_Final;
                           Universal.Option.Initialize (Ctx.P.First_Option_Ctx, RFLX_Target_First_Option_Buffer);
                           pragma Warnings (Off, """E_Ctx"" is set by ""Update"" but not used after the call");
                           Universal.Options.Update (RFLX_Message_Options_Ctx, E_Ctx);
                           pragma Warnings (On, """E_Ctx"" is set by ""Update"" but not used after the call");
                           pragma Warnings (Off, """RFLX_Message_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
                           Universal.Options.Take_Buffer (RFLX_Message_Options_Ctx, RFLX_Message_Options_Buffer);
                           pragma Warnings (On, """RFLX_Message_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
                           pragma Assert (Ctx.P.Slots.Slot_Ptr_4 = null);
                           pragma Assert (RFLX_Message_Options_Buffer /= null);
                           Ctx.P.Slots.Slot_Ptr_4 := RFLX_Message_Options_Buffer;
                           pragma Assert (Ctx.P.Slots.Slot_Ptr_4 /= null);
                           pragma Assert (Process_2_Invariant);
                           goto Finalize_Process_2;
                        end if;
                        Universal.Option.Copy (E_Ctx, RFLX_Target_First_Option_Buffer.all (RFLX_Target_First_Option_Buffer'First .. (if
                            Universal.Option.Byte_Size (E_Ctx) > 0
                         then
                            RFLX_Target_First_Option_Buffer'First + Universal.Option.Byte_Size (E_Ctx) - RFLX_Types.Length'(1)
                         else
                            (-1))));
                        Universal.Option.Initialize (Ctx.P.First_Option_Ctx, RFLX_Target_First_Option_Buffer, Written_Last => RFLX_Types.To_Bit_Length (RFLX_Target_First_Option_Buffer'First + RFLX_Types.Length (Universal.Option.Byte_Size (E_Ctx)) - 1));
                        Universal.Option.Verify_Message (Ctx.P.First_Option_Ctx);
                     end;
                     RFLX_First_Option_Found := True;
                     pragma Warnings (Off, """E_Ctx"" is set by ""Update"" but not used after the call");
                     Universal.Options.Update (RFLX_Message_Options_Ctx, E_Ctx);
                     pragma Warnings (On, """E_Ctx"" is set by ""Update"" but not used after the call");
                     exit;
                  end if;
                  pragma Warnings (Off, """E_Ctx"" is set by ""Update"" but not used after the call");
                  Universal.Options.Update (RFLX_Message_Options_Ctx, E_Ctx);
                  pragma Warnings (On, """E_Ctx"" is set by ""Update"" but not used after the call");
               end;
            end loop;
            if not RFLX_First_Option_Found then
               Ctx.P.Next_State := S_Final;
               pragma Warnings (Off, """RFLX_Message_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
               Universal.Options.Take_Buffer (RFLX_Message_Options_Ctx, RFLX_Message_Options_Buffer);
               pragma Warnings (On, """RFLX_Message_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
               pragma Assert (Ctx.P.Slots.Slot_Ptr_4 = null);
               pragma Assert (RFLX_Message_Options_Buffer /= null);
               Ctx.P.Slots.Slot_Ptr_4 := RFLX_Message_Options_Buffer;
               pragma Assert (Ctx.P.Slots.Slot_Ptr_4 /= null);
               pragma Assert (Process_2_Invariant);
               goto Finalize_Process_2;
            end if;
         end;
         pragma Warnings (Off, """RFLX_Message_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
         Universal.Options.Take_Buffer (RFLX_Message_Options_Ctx, RFLX_Message_Options_Buffer);
         pragma Warnings (On, """RFLX_Message_Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
         pragma Assert (Ctx.P.Slots.Slot_Ptr_4 = null);
         pragma Assert (RFLX_Message_Options_Buffer /= null);
         Ctx.P.Slots.Slot_Ptr_4 := RFLX_Message_Options_Buffer;
         pragma Assert (Ctx.P.Slots.Slot_Ptr_4 /= null);
      end;
      Ctx.P.Next_State := S_Send_2;
      pragma Assert (Process_2_Invariant);
      <<Finalize_Process_2>>
   end Process_2;

   procedure Send_2 (Ctx : in out Context) with
     Pre =>
       Initialized (Ctx),
     Post =>
       Initialized (Ctx)
   is
      function Send_2_Invariant return Boolean is
        (Ctx.P.Slots.Slot_Ptr_1 = null
         and Ctx.P.Slots.Slot_Ptr_2 = null
         and Ctx.P.Slots.Slot_Ptr_3 = null
         and Ctx.P.Slots.Slot_Ptr_4 /= null
         and Ctx.P.Slots.Slot_Ptr_5 /= null)
       with
        Annotate =>
          (GNATprove, Inline_For_Proof),
        Ghost;
   begin
      pragma Assert (Send_2_Invariant);
      -- tests/feature/session_comprehension_head/test.rflx:72:10
      Ctx.P.Next_State := S_Final;
      pragma Assert (Send_2_Invariant);
   end Send_2;

   procedure Initialize (Ctx : in out Context) is
      Options_Buffer : RFLX_Types.Bytes_Ptr;
      First_Option_Buffer : RFLX_Types.Bytes_Ptr;
      Message_Buffer : RFLX_Types.Bytes_Ptr;
   begin
      Test.Session.FSM_Allocator.Initialize (Ctx.P.Slots, Ctx.P.Memory);
      Options_Buffer := Ctx.P.Slots.Slot_Ptr_1;
      pragma Warnings (Off, "unused assignment");
      Ctx.P.Slots.Slot_Ptr_1 := null;
      pragma Warnings (On, "unused assignment");
      Universal.Options.Initialize (Ctx.P.Options_Ctx, Options_Buffer);
      First_Option_Buffer := Ctx.P.Slots.Slot_Ptr_2;
      pragma Warnings (Off, "unused assignment");
      Ctx.P.Slots.Slot_Ptr_2 := null;
      pragma Warnings (On, "unused assignment");
      Universal.Option.Initialize (Ctx.P.First_Option_Ctx, First_Option_Buffer);
      Message_Buffer := Ctx.P.Slots.Slot_Ptr_3;
      pragma Warnings (Off, "unused assignment");
      Ctx.P.Slots.Slot_Ptr_3 := null;
      pragma Warnings (On, "unused assignment");
      Universal.Message.Initialize (Ctx.P.Message_Ctx, Message_Buffer);
      Ctx.P.Next_State := S_Start;
   end Initialize;

   procedure Finalize (Ctx : in out Context) is
      Options_Buffer : RFLX_Types.Bytes_Ptr;
      First_Option_Buffer : RFLX_Types.Bytes_Ptr;
      Message_Buffer : RFLX_Types.Bytes_Ptr;
   begin
      pragma Warnings (Off, """Ctx.P.Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
      Universal.Options.Take_Buffer (Ctx.P.Options_Ctx, Options_Buffer);
      pragma Warnings (On, """Ctx.P.Options_Ctx"" is set by ""Take_Buffer"" but not used after the call");
      pragma Assert (Ctx.P.Slots.Slot_Ptr_1 = null);
      pragma Assert (Options_Buffer /= null);
      Ctx.P.Slots.Slot_Ptr_1 := Options_Buffer;
      pragma Assert (Ctx.P.Slots.Slot_Ptr_1 /= null);
      pragma Warnings (Off, """Ctx.P.First_Option_Ctx"" is set by ""Take_Buffer"" but not used after the call");
      Universal.Option.Take_Buffer (Ctx.P.First_Option_Ctx, First_Option_Buffer);
      pragma Warnings (On, """Ctx.P.First_Option_Ctx"" is set by ""Take_Buffer"" but not used after the call");
      pragma Assert (Ctx.P.Slots.Slot_Ptr_2 = null);
      pragma Assert (First_Option_Buffer /= null);
      Ctx.P.Slots.Slot_Ptr_2 := First_Option_Buffer;
      pragma Assert (Ctx.P.Slots.Slot_Ptr_2 /= null);
      pragma Warnings (Off, """Ctx.P.Message_Ctx"" is set by ""Take_Buffer"" but not used after the call");
      Universal.Message.Take_Buffer (Ctx.P.Message_Ctx, Message_Buffer);
      pragma Warnings (On, """Ctx.P.Message_Ctx"" is set by ""Take_Buffer"" but not used after the call");
      pragma Assert (Ctx.P.Slots.Slot_Ptr_3 = null);
      pragma Assert (Message_Buffer /= null);
      Ctx.P.Slots.Slot_Ptr_3 := Message_Buffer;
      pragma Assert (Ctx.P.Slots.Slot_Ptr_3 /= null);
      Test.Session.FSM_Allocator.Finalize (Ctx.P.Slots);
      Ctx.P.Next_State := S_Final;
   end Finalize;

   procedure Reset_Messages_Before_Write (Ctx : in out Context) with
     Pre =>
       Initialized (Ctx),
     Post =>
       Initialized (Ctx)
   is
   begin
      case Ctx.P.Next_State is
         when S_Start | S_Process_1 | S_Send_1 =>
            null;
         when S_Recv =>
            Universal.Message.Reset (Ctx.P.Message_Ctx, Ctx.P.Message_Ctx.First, Ctx.P.Message_Ctx.First - 1);
         when S_Process_2 | S_Send_2 | S_Final =>
            null;
      end case;
   end Reset_Messages_Before_Write;

   procedure Tick (Ctx : in out Context) is
   begin
      case Ctx.P.Next_State is
         when S_Start =>
            Start (Ctx);
         when S_Process_1 =>
            Process_1 (Ctx);
         when S_Send_1 =>
            Send_1 (Ctx);
         when S_Recv =>
            Recv (Ctx);
         when S_Process_2 =>
            Process_2 (Ctx);
         when S_Send_2 =>
            Send_2 (Ctx);
         when S_Final =>
            null;
      end case;
      Reset_Messages_Before_Write (Ctx);
   end Tick;

   function In_IO_State (Ctx : Context) return Boolean is
     (Ctx.P.Next_State in S_Send_1 | S_Recv | S_Send_2);

   procedure Run (Ctx : in out Context) is
   begin
      Tick (Ctx);
      while
         Active (Ctx)
         and not In_IO_State (Ctx)
      loop
         pragma Loop_Invariant (Initialized (Ctx));
         Tick (Ctx);
      end loop;
   end Run;

   procedure Read (Ctx : Context; Chan : Channel; Buffer : out RFLX_Types.Bytes; Offset : RFLX_Types.Length := 0) is
      function Read_Pre (Message_Buffer : RFLX_Types.Bytes) return Boolean is
        (Buffer'Length > 0
         and then Offset < Message_Buffer'Length);
      procedure Read (Message_Buffer : RFLX_Types.Bytes) with
        Pre =>
          Read_Pre (Message_Buffer)
      is
         Length : constant RFLX_Types.Length := RFLX_Types.Length'Min (Buffer'Length, Message_Buffer'Length - Offset);
         Buffer_Last : constant RFLX_Types.Index := Buffer'First + (Length - RFLX_Types.Length'(1));
      begin
         Buffer (Buffer'First .. RFLX_Types.Index (Buffer_Last)) := Message_Buffer (RFLX_Types.Index (RFLX_Types.Length (Message_Buffer'First) + Offset) .. Message_Buffer'First + Offset + (Length - RFLX_Types.Length'(1)));
      end Read;
      procedure Universal_Option_Read is new Universal.Option.Generic_Read (Read, Read_Pre);
   begin
      Buffer := (others => 0);
      case Chan is
         when C_Channel =>
            case Ctx.P.Next_State is
               when S_Send_1 | S_Send_2 =>
                  Universal_Option_Read (Ctx.P.First_Option_Ctx);
               when others =>
                  pragma Warnings (Off, "unreachable code");
                  null;
                  pragma Warnings (On, "unreachable code");
            end case;
      end case;
   end Read;

   procedure Write (Ctx : in out Context; Chan : Channel; Buffer : RFLX_Types.Bytes; Offset : RFLX_Types.Length := 0) is
      Write_Buffer_Length : constant RFLX_Types.Length := Write_Buffer_Size (Ctx, Chan);
      function Write_Pre (Context_Buffer_Length : RFLX_Types.Length; Offset : RFLX_Types.Length) return Boolean is
        (Buffer'Length > 0
         and then Context_Buffer_Length = Write_Buffer_Length
         and then Offset <= RFLX_Types.Length'Last - Buffer'Length
         and then Buffer'Length + Offset <= Write_Buffer_Length);
      procedure Write (Message_Buffer : out RFLX_Types.Bytes; Length : out RFLX_Types.Length; Context_Buffer_Length : RFLX_Types.Length; Offset : RFLX_Types.Length) with
        Pre =>
          Write_Pre (Context_Buffer_Length, Offset)
          and then Offset <= RFLX_Types.Length'Last - Message_Buffer'Length
          and then Message_Buffer'Length + Offset = Write_Buffer_Length,
        Post =>
          Length <= Message_Buffer'Length
      is
      begin
         Length := Buffer'Length;
         Message_Buffer := (others => 0);
         Message_Buffer (Message_Buffer'First .. RFLX_Types.Index (RFLX_Types.Length (Message_Buffer'First) - 1 + Length)) := Buffer;
      end Write;
      procedure Universal_Message_Write is new Universal.Message.Generic_Write (Write, Write_Pre);
   begin
      case Chan is
         when C_Channel =>
            case Ctx.P.Next_State is
               when S_Recv =>
                  Universal_Message_Write (Ctx.P.Message_Ctx, Offset);
               when others =>
                  pragma Warnings (Off, "unreachable code");
                  null;
                  pragma Warnings (On, "unreachable code");
            end case;
      end case;
   end Write;

end RFLX.Test.Session.FSM;

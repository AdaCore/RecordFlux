with Universal;

package Test is

   generic
      Channel : Channel with Readable, Writable;
   machine S is
      Message : Universal::Message;
   begin
      state Start is
      begin
         Channel'Read (Message);
      transition
         goto Prepare
            if Message'Valid
         goto null
      exception
         goto null
      end Start;

      state Prepare is
         Recv_Type : Universal::Message_Type;
      begin
         Recv_Type := Message.Message_Type;
         Message := Universal::Message'(Message_Type => Universal::MT_Value,
                                        Length       => 1,
                                        Value        =>
                                                        (case Recv_Type is
                                                            when Universal::MT_Null | Universal::MT_Data =>   2,
                                                            when Universal::MT_Value                     =>   4,
                                                            when Universal::MT_Values                    =>   8,
                                                            when Universal::MT_Option_Types              =>  16,
                                                            when Universal::MT_Options                   =>  32,
                                                            when Universal::MT_Unconstrained_Data        =>  64,
                                                            when Universal::MT_Unconstrained_Options     => 128));
      transition
         goto Reply
      exception
         goto null
      end Prepare;

      state Reply is
      begin
         Channel'Write (Message);
      transition
         goto null
      end Reply;
   end S;

end Test;

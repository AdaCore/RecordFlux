------------------------------------------------------------------------------
--                                                                          --
--                         Generated by RecordFlux                          --
--                                                                          --
--                          Copyright (C) AdaCore                           --
--                                                                          --
--         SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception          --
--                                                                          --
------------------------------------------------------------------------------

pragma Restrictions (No_Streams);
pragma Ada_2012;
pragma Style_Checks ("N3aAbCdefhiIklnOprStux");
pragma Warnings (Off, "redundant conversion");
with RFLX.Test.Option_Data;

package body RFLX.Test.Session.FSM with
  SPARK_Mode
is

   use type RFLX.RFLX_Types.Bytes_Ptr;

   use type RFLX.Universal.Message_Type;

   use type RFLX.Universal.Length;

   use type RFLX.RFLX_Types.Bit_Length;

   use type RFLX.Universal.Option_Type;

   pragma Warnings (Off, """*"" is already use-visible through previous use_type_clause");

   pragma Warnings (Off, "use clause for type ""*"" defined at * has no effect");

   use type RFLX.RFLX_Types.Base_Integer;

   pragma Warnings (On, "use clause for type ""*"" defined at * has no effect");

   pragma Warnings (On, """*"" is already use-visible through previous use_type_clause");

   procedure Start (Ctx : in out Context) with
     Pre =>
       Initialized (Ctx),
     Post =>
       Initialized (Ctx)
   is
      T_0 : Boolean;
      T_1 : Universal.Message_Type;
      T_2 : Boolean;
      T_3 : Boolean;
      T_4 : Universal.Length;
      T_5 : Boolean;
      function Start_Invariant return Boolean is
        (Ctx.P.Slots.Slot_Ptr_1 = null
         and Ctx.P.Slots.Slot_Ptr_2 = null)
       with
        Annotate =>
          (GNATprove, Inline_For_Proof),
        Ghost;
   begin
      pragma Assert (Start_Invariant);
      -- tests/feature/session_message_optimization/test.rflx:24:10
      Universal.Message.Verify_Message (Ctx.P.Message_Ctx);
      -- tests/feature/session_message_optimization/test.rflx:27:16
      T_0 := Universal.Message.Well_Formed_Message (Ctx.P.Message_Ctx);
      -- tests/feature/session_message_optimization/test.rflx:28:20
      if not Universal.Message.Valid (Ctx.P.Message_Ctx, Universal.Message.F_Message_Type) then
         Ctx.P.Next_State := S_Error;
         pragma Assert (Start_Invariant);
         goto Finalize_Start;
      end if;
      -- tests/feature/session_message_optimization/test.rflx:28:20
      T_1 := Universal.Message.Get_Message_Type (Ctx.P.Message_Ctx);
      -- tests/feature/session_message_optimization/test.rflx:28:20
      T_2 := T_1 = Universal.MT_Data;
      -- tests/feature/session_message_optimization/test.rflx:27:16
      T_3 := T_0
      and then T_2;
      -- tests/feature/session_message_optimization/test.rflx:29:20
      if not Universal.Message.Valid (Ctx.P.Message_Ctx, Universal.Message.F_Length) then
         Ctx.P.Next_State := S_Error;
         pragma Assert (Start_Invariant);
         goto Finalize_Start;
      end if;
      -- tests/feature/session_message_optimization/test.rflx:29:20
      T_4 := Universal.Message.Get_Length (Ctx.P.Message_Ctx);
      -- tests/feature/session_message_optimization/test.rflx:29:20
      T_5 := T_4 = 3;
      if
         T_3
         and then T_5
      then
         Ctx.P.Next_State := S_Process;
      else
         Ctx.P.Next_State := S_Final;
      end if;
      pragma Assert (Start_Invariant);
      <<Finalize_Start>>
   end Start;

   procedure Process (Ctx : in out Context) with
     Pre =>
       Initialized (Ctx),
     Post =>
       Initialized (Ctx)
   is
      Option_Type : Universal.Option_Type;
      Local_Length : Universal.Length;
      T_6 : Boolean;
      T_7 : Boolean;
      T_8 : Boolean;
      T_9 : Universal.Option_Type;
      T_10 : Boolean;
      T_11 : Boolean;
      T_12 : Boolean;
      T_13 : Boolean;
      T_14 : RFLX.RFLX_Types.Base_Integer;
      T_15 : RFLX.RFLX_Types.Base_Integer;
      T_16 : Boolean;
      T_17 : Boolean;
      T_18 : RFLX.RFLX_Types.Base_Integer;
      T_19 : RFLX.RFLX_Types.Base_Integer;
      T_20 : Boolean;
      Option_Data : Test.Option_Data.Structure;
      function Process_Invariant return Boolean is
        (Ctx.P.Slots.Slot_Ptr_1 = null
         and Ctx.P.Slots.Slot_Ptr_2 = null)
       with
        Annotate =>
          (GNATprove, Inline_For_Proof),
        Ghost;
   begin
      pragma Assert (Process_Invariant);
      -- tests/feature/session_message_optimization/test.rflx:41:10
      Option_Type := (Known => True, Enum => Universal.OT_Data);
      -- tests/feature/session_message_optimization/test.rflx:43:42
      if not Universal.Message.Well_Formed (Ctx.P.Message_Ctx, Universal.Message.F_Data) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Process_Invariant);
         goto Finalize_Process;
      end if;
      -- tests/feature/session_message_optimization/test.rflx:43:10
      declare
         RFLX_Get_Option_Data_Arg_0_Message : RFLX_Types.Bytes (RFLX_Types.Index'First .. RFLX_Types.Index'First + 4095) := (others => 0);
         RFLX_Get_Option_Data_Arg_0_Message_Length : constant RFLX_Types.Length := RFLX_Types.To_Length (Universal.Message.Field_Size (Ctx.P.Message_Ctx, Universal.Message.F_Data)) + 1;
      begin
         if not (RFLX_Get_Option_Data_Arg_0_Message'Length >= RFLX_Get_Option_Data_Arg_0_Message_Length) then
            Ctx.P.Next_State := S_Final;
            pragma Assert (Process_Invariant);
            goto Finalize_Process;
         end if;
         Universal.Message.Get_Data (Ctx.P.Message_Ctx, RFLX_Get_Option_Data_Arg_0_Message (RFLX_Types.Index'First .. RFLX_Types.Index'First + RFLX_Types.Index (RFLX_Get_Option_Data_Arg_0_Message_Length) - 2));
         Get_Option_Data (Ctx.F, RFLX_Get_Option_Data_Arg_0_Message (RFLX_Types.Index'First .. RFLX_Types.Index'First + RFLX_Types.Index (RFLX_Get_Option_Data_Arg_0_Message_Length) - 2), Option_Data);
         if not Test.Option_Data.Valid_Structure (Option_Data) then
            Ctx.P.Next_State := S_Final;
            pragma Assert (Process_Invariant);
            goto Finalize_Process;
         end if;
      end;
      -- tests/feature/session_message_optimization/test.rflx:45:10
      Local_Length := Option_Data.Length;
      -- tests/feature/session_message_optimization/test.rflx:47:10
      Universal.Option.Reset (Ctx.P.Option_Ctx);
      -- tests/feature/session_message_optimization/test.rflx:49:10
      if not Universal.Option.Valid_Next (Ctx.P.Option_Ctx, Universal.Option.F_Option_Type) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Process_Invariant);
         goto Finalize_Process;
      end if;
      if not Universal.Option.Sufficient_Space (Ctx.P.Option_Ctx, Universal.Option.F_Option_Type) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Process_Invariant);
         goto Finalize_Process;
      end if;
      Universal.Option.Set_Option_Type (Ctx.P.Option_Ctx, Option_Type.Enum);
      if not Universal.Option.Sufficient_Space (Ctx.P.Option_Ctx, Universal.Option.F_Length) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Process_Invariant);
         goto Finalize_Process;
      end if;
      Universal.Option.Set_Length (Ctx.P.Option_Ctx, Option_Data.Length);
      declare
         function RFLX_Process_Data_Pre (Length : RFLX_Types.Length) return Boolean is
           (Test.Option_Data.Valid_Structure (Option_Data)
            and then Length = RFLX_Types.To_Length (Test.Option_Data.Field_Size_Data (Option_Data)));
         procedure RFLX_Process_Data (Data : out RFLX_Types.Bytes) with
           Pre =>
             RFLX_Process_Data_Pre (Data'Length)
         is
         begin
            Data := Option_Data.Data (Option_Data.Data'First .. Option_Data.Data'First + Data'Length - 1);
         end RFLX_Process_Data;
         procedure RFLX_Universal_Option_Set_Data is new Universal.Option.Generic_Set_Data (RFLX_Process_Data, RFLX_Process_Data_Pre);
      begin
         if
            not (Universal.Option.Valid_Next (Ctx.P.Option_Ctx, Universal.Option.F_Data)
             and Universal.Option.Available_Space (Ctx.P.Option_Ctx, Universal.Option.F_Data) >= RFLX_Types.To_Bit_Length (RFLX_Types.To_Length (Test.Option_Data.Field_Size_Data (Option_Data))))
         then
            Ctx.P.Next_State := S_Final;
            pragma Assert (Process_Invariant);
            goto Finalize_Process;
         end if;
         RFLX_Universal_Option_Set_Data (Ctx.P.Option_Ctx, RFLX_Types.To_Length (Test.Option_Data.Field_Size_Data (Option_Data)));
      end;
      -- tests/feature/session_message_optimization/test.rflx:56:16
      T_6 := Local_Length > 0;
      -- tests/feature/session_message_optimization/test.rflx:57:20
      T_7 := Option_Type /= (Known => True, Enum => Universal.OT_Null);
      -- tests/feature/session_message_optimization/test.rflx:56:16
      T_8 := T_6
      and then T_7;
      -- tests/feature/session_message_optimization/test.rflx:58:34
      if not Universal.Option.Valid (Ctx.P.Option_Ctx, Universal.Option.F_Option_Type) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Process_Invariant);
         goto Finalize_Process;
      end if;
      -- tests/feature/session_message_optimization/test.rflx:58:34
      T_9 := Universal.Option.Get_Option_Type (Ctx.P.Option_Ctx);
      -- tests/feature/session_message_optimization/test.rflx:58:20
      T_10 := Option_Type = T_9;
      -- tests/feature/session_message_optimization/test.rflx:56:16
      T_11 := T_8
      and then T_10;
      -- tests/feature/session_message_optimization/test.rflx:59:20
      T_12 := Test.Option_Data.Valid_Structure (Option_Data);
      -- tests/feature/session_message_optimization/test.rflx:56:16
      T_13 := T_11
      and then T_12;
      -- tests/feature/session_message_optimization/test.rflx:60:20
      T_14 := RFLX.RFLX_Types.Base_Integer (Test.Option_Data.Field_Size_Length (Option_Data));
      -- tests/feature/session_message_optimization/test.rflx:60:46
      T_15 := Universal.Length'Size;
      -- tests/feature/session_message_optimization/test.rflx:60:20
      T_16 := T_14 = T_15;
      -- tests/feature/session_message_optimization/test.rflx:56:16
      T_17 := T_13
      and then T_16;
      if not Universal.Option.Valid_Next (Ctx.P.Option_Ctx, Universal.Option.F_Data) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Process_Invariant);
         goto Finalize_Process;
      end if;
      -- tests/feature/session_message_optimization/test.rflx:61:20
      T_18 := RFLX.RFLX_Types.Base_Integer (Universal.Option.Field_Size (Ctx.P.Option_Ctx, Universal.Option.F_Data));
      -- tests/feature/session_message_optimization/test.rflx:61:39
      T_19 := RFLX.RFLX_Types.Base_Integer (Test.Option_Data.Field_Size_Data (Option_Data));
      -- tests/feature/session_message_optimization/test.rflx:61:20
      T_20 := T_18 = T_19;
      if
         T_17
         and then T_20
      then
         Ctx.P.Next_State := S_Reply;
      else
         Ctx.P.Next_State := S_Final;
      end if;
      pragma Assert (Process_Invariant);
      <<Finalize_Process>>
   end Process;

   procedure Reply (Ctx : in out Context) with
     Pre =>
       Initialized (Ctx),
     Post =>
       Initialized (Ctx)
   is
      function Reply_Invariant return Boolean is
        (Ctx.P.Slots.Slot_Ptr_1 = null
         and Ctx.P.Slots.Slot_Ptr_2 = null)
       with
        Annotate =>
          (GNATprove, Inline_For_Proof),
        Ghost;
   begin
      pragma Assert (Reply_Invariant);
      -- tests/feature/session_message_optimization/test.rflx:69:10
      Ctx.P.Next_State := S_Trigger_Error;
      pragma Assert (Reply_Invariant);
   end Reply;

   procedure Trigger_Error (Ctx : in out Context) with
     Pre =>
       Initialized (Ctx),
     Post =>
       Initialized (Ctx)
   is
      Null_Option_Data : Test.Option_Data.Structure;
      function Trigger_Error_Invariant return Boolean is
        (Ctx.P.Slots.Slot_Ptr_1 = null
         and Ctx.P.Slots.Slot_Ptr_2 = null)
       with
        Annotate =>
          (GNATprove, Inline_For_Proof),
        Ghost;
   begin
      pragma Assert (Trigger_Error_Invariant);
      -- tests/feature/session_message_optimization/test.rflx:78:10
      Get_Option_Data (Ctx.F, (RFLX_Types.Index'First => RFLX_Types.Byte'Val (0)), Null_Option_Data);
      if not Test.Option_Data.Valid_Structure (Null_Option_Data) then
         Ctx.P.Next_State := S_Error;
         pragma Assert (Trigger_Error_Invariant);
         goto Finalize_Trigger_Error;
      end if;
      if not Universal.Option.Valid_Next (Ctx.P.Option_Ctx, Universal.Option.F_Length) then
         Ctx.P.Next_State := S_Error;
         pragma Assert (Trigger_Error_Invariant);
         goto Finalize_Trigger_Error;
      end if;
      if not Universal.Option.Sufficient_Space (Ctx.P.Option_Ctx, Universal.Option.F_Length) then
         Ctx.P.Next_State := S_Error;
         pragma Assert (Trigger_Error_Invariant);
         goto Finalize_Trigger_Error;
      end if;
      -- tests/feature/session_message_optimization/test.rflx:80:10
      if not Universal.Option.Valid_Next (Ctx.P.Option_Ctx, Universal.Option.F_Length) then
         Ctx.P.Next_State := S_Error;
         pragma Assert (Trigger_Error_Invariant);
         goto Finalize_Trigger_Error;
      end if;
      if not Universal.Option.Sufficient_Space (Ctx.P.Option_Ctx, Universal.Option.F_Length) then
         Ctx.P.Next_State := S_Error;
         pragma Assert (Trigger_Error_Invariant);
         goto Finalize_Trigger_Error;
      end if;
      if not Universal.Option.Sufficient_Space (Ctx.P.Option_Ctx, Universal.Option.F_Length) then
         Ctx.P.Next_State := S_Error;
         pragma Assert (Trigger_Error_Invariant);
         goto Finalize_Trigger_Error;
      end if;
      Universal.Option.Set_Length (Ctx.P.Option_Ctx, Null_Option_Data.Length);
      Ctx.P.Next_State := S_Final;
      pragma Assert (Trigger_Error_Invariant);
      <<Finalize_Trigger_Error>>
   end Trigger_Error;

   procedure Error (Ctx : in out Context) with
     Pre =>
       Initialized (Ctx),
     Post =>
       Initialized (Ctx)
   is
      function Error_Invariant return Boolean is
        (Ctx.P.Slots.Slot_Ptr_1 = null
         and Ctx.P.Slots.Slot_Ptr_2 = null)
       with
        Annotate =>
          (GNATprove, Inline_For_Proof),
        Ghost;
   begin
      pragma Assert (Error_Invariant);
      Ctx.P.Next_State := S_Final;
      pragma Assert (Error_Invariant);
   end Error;

   procedure Initialize (Ctx : in out Context) is
      Message_Buffer : RFLX_Types.Bytes_Ptr;
      Option_Buffer : RFLX_Types.Bytes_Ptr;
   begin
      Test.Session.FSM_Allocator.Initialize (Ctx.P.Slots, Ctx.P.Memory);
      Message_Buffer := Ctx.P.Slots.Slot_Ptr_1;
      pragma Warnings (Off, "unused assignment");
      Ctx.P.Slots.Slot_Ptr_1 := null;
      pragma Warnings (On, "unused assignment");
      Universal.Message.Initialize (Ctx.P.Message_Ctx, Message_Buffer);
      Option_Buffer := Ctx.P.Slots.Slot_Ptr_2;
      pragma Warnings (Off, "unused assignment");
      Ctx.P.Slots.Slot_Ptr_2 := null;
      pragma Warnings (On, "unused assignment");
      Universal.Option.Initialize (Ctx.P.Option_Ctx, Option_Buffer);
      Ctx.F := Test.Session_Functions.Initialize;
      Ctx.P.Next_State := S_Start;
   end Initialize;

   procedure Finalize (Ctx : in out Context) is
      Message_Buffer : RFLX_Types.Bytes_Ptr;
      Option_Buffer : RFLX_Types.Bytes_Ptr;
   begin
      pragma Warnings (Off, """Ctx.P.Message_Ctx"" is set by ""Take_Buffer"" but not used after the call");
      Universal.Message.Take_Buffer (Ctx.P.Message_Ctx, Message_Buffer);
      pragma Warnings (On, """Ctx.P.Message_Ctx"" is set by ""Take_Buffer"" but not used after the call");
      pragma Assert (Ctx.P.Slots.Slot_Ptr_1 = null);
      pragma Assert (Message_Buffer /= null);
      Ctx.P.Slots.Slot_Ptr_1 := Message_Buffer;
      pragma Assert (Ctx.P.Slots.Slot_Ptr_1 /= null);
      pragma Warnings (Off, """Ctx.P.Option_Ctx"" is set by ""Take_Buffer"" but not used after the call");
      Universal.Option.Take_Buffer (Ctx.P.Option_Ctx, Option_Buffer);
      pragma Warnings (On, """Ctx.P.Option_Ctx"" is set by ""Take_Buffer"" but not used after the call");
      pragma Assert (Ctx.P.Slots.Slot_Ptr_2 = null);
      pragma Assert (Option_Buffer /= null);
      Ctx.P.Slots.Slot_Ptr_2 := Option_Buffer;
      pragma Assert (Ctx.P.Slots.Slot_Ptr_2 /= null);
      Test.Session.FSM_Allocator.Finalize (Ctx.P.Slots);
      Test.Session_Functions.Finalize (Ctx.F);
      Ctx.P.Next_State := S_Final;
   end Finalize;

   procedure Reset_Messages_Before_Write (Ctx : in out Context) with
     Pre =>
       Initialized (Ctx),
     Post =>
       Initialized (Ctx)
   is
   begin
      case Ctx.P.Next_State is
         when S_Start =>
            Universal.Message.Reset (Ctx.P.Message_Ctx, Ctx.P.Message_Ctx.First, Ctx.P.Message_Ctx.First - 1);
         when S_Process | S_Reply | S_Trigger_Error | S_Error | S_Final =>
            null;
      end case;
   end Reset_Messages_Before_Write;

   procedure Tick (Ctx : in out Context) is
   begin
      case Ctx.P.Next_State is
         when S_Start =>
            Start (Ctx);
         when S_Process =>
            Process (Ctx);
         when S_Reply =>
            Reply (Ctx);
         when S_Trigger_Error =>
            Trigger_Error (Ctx);
         when S_Error =>
            Error (Ctx);
         when S_Final =>
            null;
      end case;
      Reset_Messages_Before_Write (Ctx);
   end Tick;

   function In_IO_State (Ctx : Context) return Boolean is
     (Ctx.P.Next_State in S_Start | S_Reply);

   procedure Run (Ctx : in out Context) is
   begin
      Tick (Ctx);
      while
         Active (Ctx)
         and not In_IO_State (Ctx)
      loop
         pragma Loop_Invariant (Initialized (Ctx));
         Tick (Ctx);
      end loop;
   end Run;

   procedure Read (Ctx : Context; Chan : Channel; Buffer : out RFLX_Types.Bytes; Offset : RFLX_Types.Length := 0) is
      function Read_Pre (Message_Buffer : RFLX_Types.Bytes) return Boolean is
        (Buffer'Length > 0
         and then Offset < Message_Buffer'Length);
      procedure Read (Message_Buffer : RFLX_Types.Bytes) with
        Pre =>
          Read_Pre (Message_Buffer)
      is
         Length : constant RFLX_Types.Index := RFLX_Types.Index (RFLX_Types.Length'Min (Buffer'Length, Message_Buffer'Length - Offset));
         Buffer_Last : constant RFLX_Types.Index := Buffer'First - 1 + Length;
      begin
         Buffer (Buffer'First .. RFLX_Types.Index (Buffer_Last)) := Message_Buffer (RFLX_Types.Index (RFLX_Types.Length (Message_Buffer'First) + Offset) .. Message_Buffer'First - 2 + RFLX_Types.Index (Offset + 1) + Length);
      end Read;
      procedure Universal_Option_Read is new Universal.Option.Generic_Read (Read, Read_Pre);
   begin
      Buffer := (others => 0);
      case Chan is
         when C_Channel =>
            case Ctx.P.Next_State is
               when S_Reply =>
                  Universal_Option_Read (Ctx.P.Option_Ctx);
               when others =>
                  pragma Warnings (Off, "unreachable code");
                  null;
                  pragma Warnings (On, "unreachable code");
            end case;
      end case;
   end Read;

   procedure Write (Ctx : in out Context; Chan : Channel; Buffer : RFLX_Types.Bytes; Offset : RFLX_Types.Length := 0) is
      Write_Buffer_Length : constant RFLX_Types.Length := Write_Buffer_Size (Ctx, Chan);
      function Write_Pre (Context_Buffer_Length : RFLX_Types.Length; Offset : RFLX_Types.Length) return Boolean is
        (Buffer'Length > 0
         and then Context_Buffer_Length = Write_Buffer_Length
         and then Offset <= RFLX_Types.Length'Last - Buffer'Length
         and then Buffer'Length + Offset <= Write_Buffer_Length);
      procedure Write (Message_Buffer : out RFLX_Types.Bytes; Length : out RFLX_Types.Length; Context_Buffer_Length : RFLX_Types.Length; Offset : RFLX_Types.Length) with
        Pre =>
          Write_Pre (Context_Buffer_Length, Offset)
          and then Offset <= RFLX_Types.Length'Last - Message_Buffer'Length
          and then Message_Buffer'Length + Offset = Write_Buffer_Length,
        Post =>
          Length <= Message_Buffer'Length
      is
      begin
         Length := Buffer'Length;
         Message_Buffer := (others => 0);
         Message_Buffer (Message_Buffer'First .. RFLX_Types.Index (RFLX_Types.Length (Message_Buffer'First) - 1 + Length)) := Buffer;
      end Write;
      procedure Universal_Message_Write is new Universal.Message.Generic_Write (Write, Write_Pre);
   begin
      case Chan is
         when C_Channel =>
            case Ctx.P.Next_State is
               when S_Start =>
                  Universal_Message_Write (Ctx.P.Message_Ctx, Offset);
               when others =>
                  pragma Warnings (Off, "unreachable code");
                  null;
                  pragma Warnings (On, "unreachable code");
            end case;
      end case;
   end Write;

end RFLX.Test.Session.FSM;

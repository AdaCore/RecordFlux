with Universal;

package Test is

   generic
      Channel : Channel with Readable, Writable; -- §S-P-C-RW
   session Session is
      Message : Universal::Message; -- §S-D-V-T-M, §S-D-V-E-N
   begin
      state Start is
      begin
         Channel'Read (Message); -- §S-S-A-RD-V
      transition
         goto Process
            if Message'Valid -- §S-S-T-VAT, §S-E-AT-V-V
               and Message.Message_Type = Universal::MT_Options -- §S-S-T-S, §S-E-S-V, §S-S-T-L
         goto null -- §S-S-T-N
      exception
         goto null -- §S-S-E
      end Start;

      state Process is
         Option_Types : Universal::Option_Types; -- §S-S-D-V-T-SS, §S-S-D-V-E-N
      begin
         -- §S-S-A-A-LC, §S-E-LC-S, §S-E-LC-SMS, §S-E-LC-TSS, §S-E-LC-CS, §S-E-LC-A, §S-E-S-V
         Option_Types := [for E in Message.Options if E.Option_Type = Universal::OT_Data => E.Option_Type];
         -- Test that target sequence is reset by assignment
         Option_Types := [for E in Message.Options if E.Option_Type = Universal::OT_Data => E.Option_Type];
         -- §S-S-A-A-MA
         Message := Universal::Message'(Message_Type => Universal::MT_Option_Types,
                                        Length => Option_Types'Size / 8,
                                        Option_Types => Option_Types);
      transition
         goto Reply -- §S-S-T-N
      exception
         goto null -- §S-S-E
      end Process;

      state Reply is
      begin
         Channel'Write (Message); -- §S-S-A-WR-V
      transition
         goto null -- §S-S-T-N
      end Reply;
   end Session;

end Test;

with Universal;

package Test is

   generic
      Channel : Channel with Readable, Writable;
   machine S is
      Options : Universal::Options;
      First_Option : Universal::Option;
      Message : Universal::Message;
   begin
      state Start is
      begin
         Options'Append (Universal::Option'(Option_Type => Universal::OT_Data, Length => 1, Data => [2]));
         Options'Append (Universal::Option'(Option_Type => Universal::OT_Null));
         Options'Append (Universal::Option'(Option_Type => Universal::OT_Data, Length => 2, Data => [2, 3]));
      transition
         goto Process_1
      exception
         goto null
      end Start;

      state Process_1 is
         First_Option_Length : Universal::Length;
      begin
         First_Option_Length := [for E in Options if E.Option_Type = Universal::OT_Data => E.Length]'Head;
         First_Option := [for E in Options if E.Option_Type = Universal::OT_Data => E]'Head;
      transition
         goto Send_1
            if First_Option_Length > 0
         goto null
      exception
         goto null
      end Process_1;

      state Send_1 is
      begin
         Channel'Write (First_Option);
      transition
         goto Recv
      end Send_1;

      state Recv is
      begin
         Channel'Read (Message);
      transition
         goto Process_2
      end Recv;

      state Process_2
      is
      begin
         First_Option := [for E in Message.Options if E.Option_Type = Universal::OT_Data => E]'Head;
      transition
         goto Send_2
      exception
         goto null
      end Process_2;

      state Send_2
      is
      begin
         Channel'Write (First_Option);
      transition
         goto null
      end Send_2;
   end S;

end Test;

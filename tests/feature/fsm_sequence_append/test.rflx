with Universal;

package Test is

   generic
      Channel : Channel with Readable, Writable; -- §S-P-C-RW
   machine S is
      Option : Universal::Option; -- §S-D-V-T-M, §S-D-V-E-N
      Message : Universal::Message; -- §S-D-V-T-M, §S-D-V-E-N
   begin
      state Start is
      begin
         Channel'Read (Option); -- §S-S-A-RD-V
      transition
         goto Process -- §S-S-T-N
      end Start;

      state Process is
         Options : Universal::Options; -- §S-D-V-T-MS, §S-D-V-E-N
      begin
         -- §S-S-A-AP-MA
         Options'Append (Universal::Option'(Option_Type => Universal::OT_Data,
                                            Length => Option.Length,
                                            Data => Option.Data));
         -- §S-S-A-A-MA
         Message := Universal::Message'(Message_Type => Universal::MT_Options,
                                        Length => Options'Size / 8,
                                        Options => Options);
      transition
         goto Reply
            if Options'Valid -- §S-S-T-VAT
         goto null -- §S-S-T-N
      exception
         goto null -- §S-S-E
      end Process;

      state Reply is
      begin
         Channel'Write (Message); -- §S-S-A-WR-V
      transition
         goto null -- §S-S-T-N
      end Reply;
   end S;

end Test;

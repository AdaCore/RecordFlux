package Test is

   type Length is unsigned 7;

   type Message is
      message
         Has_Data : Boolean
            then Length
               if Has_Data = True;
         Length : Length
            then Data
               with Size => Length * 8
               if Length > 0;
         Data : Opaque
            then null
               if Data /= [0, 0] and Data'Size > 0;
      end message;

   generic
      Channel : Channel with Readable, Writable;
   machine S is
      Message : Test::Message;
      Has_Data : Boolean := True;
      Length : Test::Length := 1;
   begin
      state Start is
      begin
         Channel'Read (Message);
      transition
         goto Process
            if Message'Valid = True
               and Message.Has_Data = True
               and Message.Length = 2
         goto null
      exception
         goto null
      end Start;

      state Process is
         Local_Message : Test::Message;
      begin
         Message.Has_Data := Has_Data;
         Message.Length := Length;
         Message.Data := "A";
         Local_Message.Has_Data := True;
         Local_Message.Length := Message.Data'Size / 8;
         Local_Message.Data := Message.Data;
      transition
         goto Reply
            if Message.Has_Data = Local_Message.Has_Data
         goto null
      exception
         goto null
      end Process;

      state Reply is
      begin
         Channel'Write (Message);
      transition
         goto null
            if Message.Has_Data
         goto null
      exception
         goto null
      end Reply;
   end S;

end Test;

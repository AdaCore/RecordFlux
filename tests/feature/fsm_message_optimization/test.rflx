with Universal;

package Test is

   type Option_Data is
      message
         Length : Universal::Length
            then Data
               if Length > 1;
         Data : Opaque
            with Size => Length * 8;
      end message;

   generic
      Channel : Channel with Readable, Writable;
      with function Get_Option_Data (Data : Opaque) return Option_Data;
   machine S is
      Message : Universal::Message;
      Option : Universal::Option;
   begin
      state Start is
      begin
         Channel'Read (Message);
      transition
         goto Process
            if Message'Valid
               and Message.Message_Type = Universal::MT_Data
               and Message.Length = 3
         goto null
      exception
         goto Error
      end Start;

      state Process is
         Option_Type : Universal::Option_Type;
         Option_Data : Option_Data;
         Local_Length : Universal::Length;
      begin
         Option_Type := Universal::OT_Data;
         Option_Data := Get_Option_Data (Message.Data);
         Local_Length := Option_Data.Length;
         Option'Reset;
         Option.Option_Type := Option_Type;
         Option.Length := Option_Data.Length;
         Option.Data := Option_Data.Data;
      transition
         goto Reply
            if Local_Length > 0
               and Option_Type /= Universal::OT_Null
               and Option_Type = Option.Option_Type
               and Option_Data'Valid
               and Option_Data.Length'Size = Universal::Length'Size
               and Option.Data'Size = Option_Data.Data'Size
         goto null
      exception
         goto null
      end Process;

      state Reply is
      begin
         Channel'Write (Option);
      transition
         goto Trigger_Error
      end Reply;

      state Trigger_Error is
         Null_Option_Data : Option_Data;
      begin
         Null_Option_Data := Get_Option_Data ([0]);
         Option.Length := Null_Option_Data.Length;
      transition
         goto null
      exception
         goto Error
      end Trigger_Error;

      state Error is
      begin
      transition
         goto null
      end Error;
   end S;

end Test;

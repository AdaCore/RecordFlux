with Universal;

package Test is

   type Tiny_Int is range 1 .. 4 with Size => 8;

   type Message is
      message
         Value : Tiny_Int;
      end message;

   generic
      Channel : Channel with Readable, Writable; -- §S-P-C-RW
   session Session is
      Message : Message; -- §S-D-V-T-M, §S-D-V-E-N
   begin
      state Start is
      begin
         Channel'Read (Message); -- §S-S-A-RD-V
      transition
         goto Prepare
            if Message'Valid -- §S-S-T-VAT, §S-E-AT-V-V
         goto null -- §S-S-T-N
      end Start;

      state Prepare is
         Value : Tiny_Int;
      begin
         Value := (case Message.Value is  -- §S-E-CE
                      when 1 | 2 => 4,
                      when 3     => 1,
                      when 4     => 2);
         -- §S-S-A-A-MA
         Message := Message'(Value => Value);
      transition
         goto Reply -- §S-S-T-N
      exception
         goto null -- §S-S-E
      end Prepare;

      state Reply is
      begin
         Channel'Write (Message); -- §S-S-A-WR-V
      transition
         goto null -- §S-S-T-N
      end Reply;
   end Session;

end Test;

------------------------------------------------------------------------------
--                                                                          --
--                         Generated by RecordFlux                          --
--                                                                          --
--                          Copyright (C) AdaCore                           --
--                                                                          --
--         SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception          --
--                                                                          --
------------------------------------------------------------------------------

pragma Restrictions (No_Streams);
pragma Ada_2012;
pragma Style_Checks ("N3aAbCdefhiIklnOprStux");
pragma Warnings (Off, "redundant conversion");
with RFLX.RFLX_Types.Operators;

package body RFLX.Test.Session.FSM with
  SPARK_Mode
is

   use RFLX.RFLX_Types.Operators;

   use type RFLX.RFLX_Types.Bytes_Ptr;

   use type RFLX.RFLX_Types.Bit_Length;

   use type RFLX.TLV.Tag;

   procedure Global (Ctx : in out Context) with
     Pre =>
       Initialized (Ctx),
     Post =>
       Initialized (Ctx)
   is
      Message_Tag : TLV.Tag;
      Tag : TLV.Tag;
      T_0 : Boolean;
      T_1 : Boolean;
      function Global_Invariant return Boolean is
        (Ctx.P.Slots.Slot_Ptr_1 = null
         and Ctx.P.Slots.Slot_Ptr_2 = null
         and Ctx.P.Slots.Slot_Ptr_3 = null
         and Ctx.P.Slots.Slot_Ptr_4 /= null
         and Ctx.P.Slots.Slot_Ptr_5 /= null
         and Ctx.P.Slots.Slot_Ptr_6 /= null
         and Ctx.P.Slots.Slot_Ptr_7 /= null)
       with
        Annotate =>
          (GNATprove, Inline_For_Proof),
        Ghost;
   begin
      pragma Assert (Global_Invariant);
      pragma Warnings (Off, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition is always False");
      pragma Warnings (Off, "this code can never be executed and has been deleted");
      pragma Warnings (Off, "statement has no effect");
      pragma Warnings (Off, "this statement is never reached");
      if not TLV.Messages.Valid (Ctx.P.Messages_Ctx) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Global_Invariant);
         goto Finalize_Global;
      end if;
      pragma Warnings (On, "this statement is never reached");
      pragma Warnings (On, "statement has no effect");
      pragma Warnings (On, "this code can never be executed and has been deleted");
      pragma Warnings (On, "condition is always False");
      pragma Warnings (On, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition is always False");
      pragma Warnings (Off, "this code can never be executed and has been deleted");
      pragma Warnings (Off, "statement has no effect");
      pragma Warnings (Off, "this statement is never reached");
      if not TLV.Messages.Has_Element (Ctx.P.Messages_Ctx) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Global_Invariant);
         goto Finalize_Global;
      end if;
      pragma Warnings (On, "this statement is never reached");
      pragma Warnings (On, "statement has no effect");
      pragma Warnings (On, "this code can never be executed and has been deleted");
      pragma Warnings (On, "condition is always False");
      pragma Warnings (On, "condition can only be False if invalid values present");
      -- tests/feature/session_sequence_append_head/test.rflx:17:10
      if not TLV.Messages.Has_Element (Ctx.P.Messages_Ctx) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Global_Invariant);
         goto Finalize_Global;
      end if;
      declare
         RFLX_Element_Messages_Ctx : TLV.Message.Context;
      begin
         TLV.Messages.Switch (Ctx.P.Messages_Ctx, RFLX_Element_Messages_Ctx);
         if not TLV.Message.Sufficient_Space (RFLX_Element_Messages_Ctx, TLV.Message.F_Tag) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
            TLV.Messages.Update (Ctx.P.Messages_Ctx, RFLX_Element_Messages_Ctx);
            pragma Warnings (On, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Global_Invariant);
            goto Finalize_Global;
         end if;
         if not RFLX.TLV.Message.Field_Condition (RFLX_Element_Messages_Ctx, RFLX.TLV.Message.F_Tag, TLV.To_Base_Integer (TLV.Msg_Data)) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
            TLV.Messages.Update (Ctx.P.Messages_Ctx, RFLX_Element_Messages_Ctx);
            pragma Warnings (On, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Global_Invariant);
            goto Finalize_Global;
         end if;
         TLV.Message.Set_Tag (RFLX_Element_Messages_Ctx, TLV.Msg_Data);
         if not TLV.Message.Sufficient_Space (RFLX_Element_Messages_Ctx, TLV.Message.F_Length) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
            TLV.Messages.Update (Ctx.P.Messages_Ctx, RFLX_Element_Messages_Ctx);
            pragma Warnings (On, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Global_Invariant);
            goto Finalize_Global;
         end if;
         if not RFLX.TLV.Message.Field_Condition (RFLX_Element_Messages_Ctx, RFLX.TLV.Message.F_Length, TLV.To_Base_Integer (TLV.Length'(1))) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
            TLV.Messages.Update (Ctx.P.Messages_Ctx, RFLX_Element_Messages_Ctx);
            pragma Warnings (On, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Global_Invariant);
            goto Finalize_Global;
         end if;
         TLV.Message.Set_Length (RFLX_Element_Messages_Ctx, TLV.Length'(1));
         if not TLV.Message.Valid_Length (RFLX_Element_Messages_Ctx, TLV.Message.F_Value, RFLX_Types.To_Length (1 * RFLX_Types.Byte'Size)) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
            TLV.Messages.Update (Ctx.P.Messages_Ctx, RFLX_Element_Messages_Ctx);
            pragma Warnings (On, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Global_Invariant);
            goto Finalize_Global;
         end if;
         if not TLV.Message.Sufficient_Space (RFLX_Element_Messages_Ctx, TLV.Message.F_Value) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
            TLV.Messages.Update (Ctx.P.Messages_Ctx, RFLX_Element_Messages_Ctx);
            pragma Warnings (On, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Global_Invariant);
            goto Finalize_Global;
         end if;
         if not RFLX.TLV.Message.Field_Condition (RFLX_Element_Messages_Ctx, RFLX.TLV.Message.F_Value, 0) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
            TLV.Messages.Update (Ctx.P.Messages_Ctx, RFLX_Element_Messages_Ctx);
            pragma Warnings (On, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Global_Invariant);
            goto Finalize_Global;
         end if;
         TLV.Message.Set_Value (RFLX_Element_Messages_Ctx, (RFLX_Types.Index'First => RFLX_Types.Byte'Val (2)));
         pragma Warnings (Off, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
         TLV.Messages.Update (Ctx.P.Messages_Ctx, RFLX_Element_Messages_Ctx);
         pragma Warnings (On, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
      end;
      pragma Warnings (Off, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition is always False");
      pragma Warnings (Off, "this code can never be executed and has been deleted");
      pragma Warnings (Off, "statement has no effect");
      pragma Warnings (Off, "this statement is never reached");
      if not TLV.Tags.Valid (Ctx.P.Tags_Ctx) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Global_Invariant);
         goto Finalize_Global;
      end if;
      pragma Warnings (On, "this statement is never reached");
      pragma Warnings (On, "statement has no effect");
      pragma Warnings (On, "this code can never be executed and has been deleted");
      pragma Warnings (On, "condition is always False");
      pragma Warnings (On, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition is always False");
      pragma Warnings (Off, "this code can never be executed and has been deleted");
      pragma Warnings (Off, "statement has no effect");
      pragma Warnings (Off, "this statement is never reached");
      if not TLV.Tags.Has_Element (Ctx.P.Tags_Ctx) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Global_Invariant);
         goto Finalize_Global;
      end if;
      pragma Warnings (On, "this statement is never reached");
      pragma Warnings (On, "statement has no effect");
      pragma Warnings (On, "this code can never be executed and has been deleted");
      pragma Warnings (On, "condition is always False");
      pragma Warnings (On, "condition can only be False if invalid values present");
      -- tests/feature/session_sequence_append_head/test.rflx:18:10
      if
         not TLV.Tags.Has_Element (Ctx.P.Tags_Ctx)
         or TLV.Tags.Available_Space (Ctx.P.Tags_Ctx) < TLV.Tag'Size
      then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Global_Invariant);
         goto Finalize_Global;
      end if;
      TLV.Tags.Append_Element (Ctx.P.Tags_Ctx, TLV.Msg_Error);
      -- tests/feature/session_sequence_append_head/test.rflx:19:10
      if not TLV.Messages.Valid (Ctx.P.Messages_Ctx) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Global_Invariant);
         goto Finalize_Global;
      end if;
      declare
         RFLX_Copy_Messages_Ctx : TLV.Messages.Context;
         RFLX_Copy_Messages_Buffer : RFLX_Types.Bytes_Ptr;
      begin
         RFLX_Copy_Messages_Buffer := Ctx.P.Slots.Slot_Ptr_4;
         pragma Warnings (Off, "unused assignment");
         Ctx.P.Slots.Slot_Ptr_4 := null;
         pragma Warnings (On, "unused assignment");
         if not (RFLX_Types.Index'Last - RFLX_Copy_Messages_Buffer'First >= RFLX_Types.Index (TLV.Messages.Byte_Size (Ctx.P.Messages_Ctx) + 1)) then
            Ctx.P.Next_State := S_Final;
            pragma Assert (Ctx.P.Slots.Slot_Ptr_4 = null);
            pragma Assert (RFLX_Copy_Messages_Buffer /= null);
            Ctx.P.Slots.Slot_Ptr_4 := RFLX_Copy_Messages_Buffer;
            pragma Assert (Ctx.P.Slots.Slot_Ptr_4 /= null);
            pragma Assert (Global_Invariant);
            goto Finalize_Global;
         end if;
         TLV.Messages.Copy (Ctx.P.Messages_Ctx, RFLX_Copy_Messages_Buffer.all (RFLX_Copy_Messages_Buffer'First .. (if
             TLV.Messages.Byte_Size (Ctx.P.Messages_Ctx) > 0
          then
             RFLX_Copy_Messages_Buffer'First + TLV.Messages.Byte_Size (Ctx.P.Messages_Ctx) - RFLX_Types.Length'(1)
          else
             (-1))));
         TLV.Messages.Initialize (RFLX_Copy_Messages_Ctx, RFLX_Copy_Messages_Buffer, RFLX_Types.To_First_Bit_Index (RFLX_Copy_Messages_Buffer'First), TLV.Messages.Sequence_Last (Ctx.P.Messages_Ctx));
         if not TLV.Messages.Has_Element (RFLX_Copy_Messages_Ctx) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Copy_Messages_Ctx"" is set by ""Take_Buffer"" but not used after the call");
            TLV.Messages.Take_Buffer (RFLX_Copy_Messages_Ctx, RFLX_Copy_Messages_Buffer);
            pragma Warnings (On, """RFLX_Copy_Messages_Ctx"" is set by ""Take_Buffer"" but not used after the call");
            pragma Assert (Ctx.P.Slots.Slot_Ptr_4 = null);
            pragma Assert (RFLX_Copy_Messages_Buffer /= null);
            Ctx.P.Slots.Slot_Ptr_4 := RFLX_Copy_Messages_Buffer;
            pragma Assert (Ctx.P.Slots.Slot_Ptr_4 /= null);
            pragma Assert (Global_Invariant);
            goto Finalize_Global;
         end if;
         declare
            RFLX_Head_Ctx : TLV.Message.Context;
            RFLX_Target_Message_Buffer : RFLX.RFLX_Types.Bytes_Ptr;
         begin
            TLV.Messages.Switch (RFLX_Copy_Messages_Ctx, RFLX_Head_Ctx);
            TLV.Message.Verify_Message (RFLX_Head_Ctx);
            if not TLV.Message.Well_Formed_Message (RFLX_Head_Ctx) then
               Ctx.P.Next_State := S_Final;
               pragma Warnings (Off, """RFLX_Head_Ctx"" is set by ""Update"" but not used after the call");
               TLV.Messages.Update (RFLX_Copy_Messages_Ctx, RFLX_Head_Ctx);
               pragma Warnings (On, """RFLX_Head_Ctx"" is set by ""Update"" but not used after the call");
               pragma Warnings (Off, """RFLX_Copy_Messages_Ctx"" is set by ""Take_Buffer"" but not used after the call");
               TLV.Messages.Take_Buffer (RFLX_Copy_Messages_Ctx, RFLX_Copy_Messages_Buffer);
               pragma Warnings (On, """RFLX_Copy_Messages_Ctx"" is set by ""Take_Buffer"" but not used after the call");
               pragma Assert (Ctx.P.Slots.Slot_Ptr_4 = null);
               pragma Assert (RFLX_Copy_Messages_Buffer /= null);
               Ctx.P.Slots.Slot_Ptr_4 := RFLX_Copy_Messages_Buffer;
               pragma Assert (Ctx.P.Slots.Slot_Ptr_4 /= null);
               pragma Assert (Global_Invariant);
               goto Finalize_Global;
            end if;
            pragma Warnings (Off, """Ctx.P.Message_Ctx"" is set by ""Take_Buffer"" but not used after the call");
            TLV.Message.Take_Buffer (Ctx.P.Message_Ctx, RFLX_Target_Message_Buffer);
            pragma Warnings (On, """Ctx.P.Message_Ctx"" is set by ""Take_Buffer"" but not used after the call");
            if not (RFLX_Types.Index'Last - RFLX_Target_Message_Buffer'First >= RFLX_Types.Index (TLV.Message.Byte_Size (RFLX_Head_Ctx) + 1)) then
               Ctx.P.Next_State := S_Final;
               TLV.Message.Initialize (Ctx.P.Message_Ctx, RFLX_Target_Message_Buffer);
               pragma Warnings (Off, """RFLX_Head_Ctx"" is set by ""Update"" but not used after the call");
               TLV.Messages.Update (RFLX_Copy_Messages_Ctx, RFLX_Head_Ctx);
               pragma Warnings (On, """RFLX_Head_Ctx"" is set by ""Update"" but not used after the call");
               pragma Warnings (Off, """RFLX_Copy_Messages_Ctx"" is set by ""Take_Buffer"" but not used after the call");
               TLV.Messages.Take_Buffer (RFLX_Copy_Messages_Ctx, RFLX_Copy_Messages_Buffer);
               pragma Warnings (On, """RFLX_Copy_Messages_Ctx"" is set by ""Take_Buffer"" but not used after the call");
               pragma Assert (Ctx.P.Slots.Slot_Ptr_4 = null);
               pragma Assert (RFLX_Copy_Messages_Buffer /= null);
               Ctx.P.Slots.Slot_Ptr_4 := RFLX_Copy_Messages_Buffer;
               pragma Assert (Ctx.P.Slots.Slot_Ptr_4 /= null);
               pragma Assert (Global_Invariant);
               goto Finalize_Global;
            end if;
            if not (TLV.Message.Byte_Size (RFLX_Head_Ctx) <= RFLX_Target_Message_Buffer'Length) then
               Ctx.P.Next_State := S_Final;
               TLV.Message.Initialize (Ctx.P.Message_Ctx, RFLX_Target_Message_Buffer);
               pragma Warnings (Off, """RFLX_Head_Ctx"" is set by ""Update"" but not used after the call");
               TLV.Messages.Update (RFLX_Copy_Messages_Ctx, RFLX_Head_Ctx);
               pragma Warnings (On, """RFLX_Head_Ctx"" is set by ""Update"" but not used after the call");
               pragma Warnings (Off, """RFLX_Copy_Messages_Ctx"" is set by ""Take_Buffer"" but not used after the call");
               TLV.Messages.Take_Buffer (RFLX_Copy_Messages_Ctx, RFLX_Copy_Messages_Buffer);
               pragma Warnings (On, """RFLX_Copy_Messages_Ctx"" is set by ""Take_Buffer"" but not used after the call");
               pragma Assert (Ctx.P.Slots.Slot_Ptr_4 = null);
               pragma Assert (RFLX_Copy_Messages_Buffer /= null);
               Ctx.P.Slots.Slot_Ptr_4 := RFLX_Copy_Messages_Buffer;
               pragma Assert (Ctx.P.Slots.Slot_Ptr_4 /= null);
               pragma Assert (Global_Invariant);
               goto Finalize_Global;
            end if;
            TLV.Message.Copy (RFLX_Head_Ctx, RFLX_Target_Message_Buffer.all (RFLX_Target_Message_Buffer'First .. (if
                TLV.Message.Byte_Size (RFLX_Head_Ctx) > 0
             then
                RFLX_Target_Message_Buffer'First + TLV.Message.Byte_Size (RFLX_Head_Ctx) - RFLX_Types.Length'(1)
             else
                (-1))));
            TLV.Message.Initialize (Ctx.P.Message_Ctx, RFLX_Target_Message_Buffer, Written_Last => RFLX_Types.To_Bit_Length (RFLX_Types.Length (RFLX_Target_Message_Buffer'First + TLV.Message.Byte_Size (RFLX_Head_Ctx) - RFLX_Types.Length'(1))));
            TLV.Message.Verify_Message (Ctx.P.Message_Ctx);
            pragma Warnings (Off, """RFLX_Head_Ctx"" is set by ""Update"" but not used after the call");
            TLV.Messages.Update (RFLX_Copy_Messages_Ctx, RFLX_Head_Ctx);
            pragma Warnings (On, """RFLX_Head_Ctx"" is set by ""Update"" but not used after the call");
         end;
         pragma Warnings (Off, """RFLX_Copy_Messages_Ctx"" is set by ""Take_Buffer"" but not used after the call");
         TLV.Messages.Take_Buffer (RFLX_Copy_Messages_Ctx, RFLX_Copy_Messages_Buffer);
         pragma Warnings (On, """RFLX_Copy_Messages_Ctx"" is set by ""Take_Buffer"" but not used after the call");
         pragma Assert (Ctx.P.Slots.Slot_Ptr_4 = null);
         pragma Assert (RFLX_Copy_Messages_Buffer /= null);
         Ctx.P.Slots.Slot_Ptr_4 := RFLX_Copy_Messages_Buffer;
         pragma Assert (Ctx.P.Slots.Slot_Ptr_4 /= null);
      end;
      -- tests/feature/session_sequence_append_head/test.rflx:20:25
      pragma Warnings (Off, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition is always False");
      pragma Warnings (Off, "this code can never be executed and has been deleted");
      pragma Warnings (Off, "statement has no effect");
      pragma Warnings (Off, "this statement is never reached");
      if not TLV.Message.Valid (Ctx.P.Message_Ctx, TLV.Message.F_Tag) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Global_Invariant);
         goto Finalize_Global;
      end if;
      pragma Warnings (On, "this statement is never reached");
      pragma Warnings (On, "statement has no effect");
      pragma Warnings (On, "this code can never be executed and has been deleted");
      pragma Warnings (On, "condition is always False");
      pragma Warnings (On, "condition can only be False if invalid values present");
      -- tests/feature/session_sequence_append_head/test.rflx:20:10
      Message_Tag := TLV.Message.Get_Tag (Ctx.P.Message_Ctx);
      -- tests/feature/session_sequence_append_head/test.rflx:21:10
      if
         not (TLV.Tags.Valid (Ctx.P.Tags_Ctx)
          and then TLV.Tags.Has_Element (Ctx.P.Tags_Ctx)
          and then TLV.Tags.Size (Ctx.P.Tags_Ctx) >= TLV.Tag'Size)
      then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Global_Invariant);
         goto Finalize_Global;
      end if;
      Tag := TLV.Tags.Head (Ctx.P.Tags_Ctx);
      -- tests/feature/session_sequence_append_head/test.rflx:24:16
      T_0 := Message_Tag = TLV.Msg_Data;
      -- tests/feature/session_sequence_append_head/test.rflx:25:20
      T_1 := Tag = TLV.Msg_Error;
      if
         T_0
         and then T_1
      then
         Ctx.P.Next_State := S_Reply_1;
      else
         Ctx.P.Next_State := S_Final;
      end if;
      pragma Assert (Global_Invariant);
      <<Finalize_Global>>
   end Global;

   procedure Reply_1 (Ctx : in out Context) with
     Pre =>
       Initialized (Ctx),
     Post =>
       Initialized (Ctx)
   is
      function Reply_1_Invariant return Boolean is
        (Ctx.P.Slots.Slot_Ptr_1 = null
         and Ctx.P.Slots.Slot_Ptr_2 = null
         and Ctx.P.Slots.Slot_Ptr_3 = null
         and Ctx.P.Slots.Slot_Ptr_4 /= null
         and Ctx.P.Slots.Slot_Ptr_5 /= null
         and Ctx.P.Slots.Slot_Ptr_6 /= null
         and Ctx.P.Slots.Slot_Ptr_7 /= null)
       with
        Annotate =>
          (GNATprove, Inline_For_Proof),
        Ghost;
   begin
      pragma Assert (Reply_1_Invariant);
      -- tests/feature/session_sequence_append_head/test.rflx:33:10
      Ctx.P.Next_State := S_Local;
      pragma Assert (Reply_1_Invariant);
   end Reply_1;

   procedure Local (Ctx : in out Context) with
     Pre =>
       Initialized (Ctx),
     Post =>
       Initialized (Ctx)
   is
      Local_Messages_Ctx : TLV.Messages.Context;
      Local_Tags_Ctx : TLV.Tags.Context;
      Message_Tag : TLV.Tag;
      Tag : TLV.Tag;
      T_2 : Boolean;
      T_3 : Boolean;
      Local_Messages_Buffer : RFLX_Types.Bytes_Ptr;
      Local_Tags_Buffer : RFLX_Types.Bytes_Ptr;
      function Local_Invariant return Boolean is
        (Global_Initialized (Ctx)
         and TLV.Messages.Has_Buffer (Local_Messages_Ctx)
         and Local_Messages_Ctx.Buffer_First = RFLX.RFLX_Types.Index'First
         and Local_Messages_Ctx.Buffer_Last >= RFLX.RFLX_Types.Index'First + RFLX_Types.Length'(4095)
         and Ctx.P.Slots.Slot_Ptr_4 = null
         and Global_Initialized (Ctx)
         and TLV.Tags.Has_Buffer (Local_Tags_Ctx)
         and Local_Tags_Ctx.Buffer_First = RFLX.RFLX_Types.Index'First
         and Local_Tags_Ctx.Buffer_Last >= RFLX.RFLX_Types.Index'First + RFLX_Types.Length'(4095)
         and Ctx.P.Slots.Slot_Ptr_5 = null
         and Ctx.P.Slots.Slot_Ptr_1 = null
         and Ctx.P.Slots.Slot_Ptr_2 = null
         and Ctx.P.Slots.Slot_Ptr_3 = null
         and Ctx.P.Slots.Slot_Ptr_6 /= null
         and Ctx.P.Slots.Slot_Ptr_7 /= null)
       with
        Annotate =>
          (GNATprove, Inline_For_Proof),
        Ghost;
   begin
      Local_Messages_Buffer := Ctx.P.Slots.Slot_Ptr_4;
      pragma Warnings (Off, "unused assignment");
      Ctx.P.Slots.Slot_Ptr_4 := null;
      pragma Warnings (On, "unused assignment");
      TLV.Messages.Initialize (Local_Messages_Ctx, Local_Messages_Buffer);
      Local_Tags_Buffer := Ctx.P.Slots.Slot_Ptr_5;
      pragma Warnings (Off, "unused assignment");
      Ctx.P.Slots.Slot_Ptr_5 := null;
      pragma Warnings (On, "unused assignment");
      TLV.Tags.Initialize (Local_Tags_Ctx, Local_Tags_Buffer);
      pragma Assert (Local_Invariant);
      pragma Warnings (Off, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition is always False");
      pragma Warnings (Off, "this code can never be executed and has been deleted");
      pragma Warnings (Off, "statement has no effect");
      pragma Warnings (Off, "this statement is never reached");
      if not TLV.Messages.Valid (Local_Messages_Ctx) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Local_Invariant);
         goto Finalize_Local;
      end if;
      pragma Warnings (On, "this statement is never reached");
      pragma Warnings (On, "statement has no effect");
      pragma Warnings (On, "this code can never be executed and has been deleted");
      pragma Warnings (On, "condition is always False");
      pragma Warnings (On, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition is always False");
      pragma Warnings (Off, "this code can never be executed and has been deleted");
      pragma Warnings (Off, "statement has no effect");
      pragma Warnings (Off, "this statement is never reached");
      if not TLV.Messages.Has_Element (Local_Messages_Ctx) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Local_Invariant);
         goto Finalize_Local;
      end if;
      pragma Warnings (On, "this statement is never reached");
      pragma Warnings (On, "statement has no effect");
      pragma Warnings (On, "this code can never be executed and has been deleted");
      pragma Warnings (On, "condition is always False");
      pragma Warnings (On, "condition can only be False if invalid values present");
      -- tests/feature/session_sequence_append_head/test.rflx:45:10
      if not TLV.Messages.Has_Element (Local_Messages_Ctx) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Local_Invariant);
         goto Finalize_Local;
      end if;
      declare
         RFLX_Element_Local_Messages_Ctx : TLV.Message.Context;
      begin
         TLV.Messages.Switch (Local_Messages_Ctx, RFLX_Element_Local_Messages_Ctx);
         if not TLV.Message.Sufficient_Space (RFLX_Element_Local_Messages_Ctx, TLV.Message.F_Tag) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Local_Messages_Ctx"" is set by ""Update"" but not used after the call");
            TLV.Messages.Update (Local_Messages_Ctx, RFLX_Element_Local_Messages_Ctx);
            pragma Warnings (On, """RFLX_Element_Local_Messages_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Local_Invariant);
            goto Finalize_Local;
         end if;
         if not RFLX.TLV.Message.Field_Condition (RFLX_Element_Local_Messages_Ctx, RFLX.TLV.Message.F_Tag, TLV.To_Base_Integer (TLV.Msg_Data)) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Local_Messages_Ctx"" is set by ""Update"" but not used after the call");
            TLV.Messages.Update (Local_Messages_Ctx, RFLX_Element_Local_Messages_Ctx);
            pragma Warnings (On, """RFLX_Element_Local_Messages_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Local_Invariant);
            goto Finalize_Local;
         end if;
         TLV.Message.Set_Tag (RFLX_Element_Local_Messages_Ctx, TLV.Msg_Data);
         if not TLV.Message.Sufficient_Space (RFLX_Element_Local_Messages_Ctx, TLV.Message.F_Length) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Local_Messages_Ctx"" is set by ""Update"" but not used after the call");
            TLV.Messages.Update (Local_Messages_Ctx, RFLX_Element_Local_Messages_Ctx);
            pragma Warnings (On, """RFLX_Element_Local_Messages_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Local_Invariant);
            goto Finalize_Local;
         end if;
         if not RFLX.TLV.Message.Field_Condition (RFLX_Element_Local_Messages_Ctx, RFLX.TLV.Message.F_Length, TLV.To_Base_Integer (TLV.Length'(2))) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Local_Messages_Ctx"" is set by ""Update"" but not used after the call");
            TLV.Messages.Update (Local_Messages_Ctx, RFLX_Element_Local_Messages_Ctx);
            pragma Warnings (On, """RFLX_Element_Local_Messages_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Local_Invariant);
            goto Finalize_Local;
         end if;
         TLV.Message.Set_Length (RFLX_Element_Local_Messages_Ctx, TLV.Length'(2));
         if not TLV.Message.Valid_Length (RFLX_Element_Local_Messages_Ctx, TLV.Message.F_Value, RFLX_Types.To_Length (2 * RFLX_Types.Byte'Size)) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Local_Messages_Ctx"" is set by ""Update"" but not used after the call");
            TLV.Messages.Update (Local_Messages_Ctx, RFLX_Element_Local_Messages_Ctx);
            pragma Warnings (On, """RFLX_Element_Local_Messages_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Local_Invariant);
            goto Finalize_Local;
         end if;
         if not TLV.Message.Sufficient_Space (RFLX_Element_Local_Messages_Ctx, TLV.Message.F_Value) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Local_Messages_Ctx"" is set by ""Update"" but not used after the call");
            TLV.Messages.Update (Local_Messages_Ctx, RFLX_Element_Local_Messages_Ctx);
            pragma Warnings (On, """RFLX_Element_Local_Messages_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Local_Invariant);
            goto Finalize_Local;
         end if;
         if not RFLX.TLV.Message.Field_Condition (RFLX_Element_Local_Messages_Ctx, RFLX.TLV.Message.F_Value, 0) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Local_Messages_Ctx"" is set by ""Update"" but not used after the call");
            TLV.Messages.Update (Local_Messages_Ctx, RFLX_Element_Local_Messages_Ctx);
            pragma Warnings (On, """RFLX_Element_Local_Messages_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Local_Invariant);
            goto Finalize_Local;
         end if;
         TLV.Message.Set_Value (RFLX_Element_Local_Messages_Ctx, (RFLX_Types.Byte'Val (3), RFLX_Types.Byte'Val (4)));
         pragma Warnings (Off, """RFLX_Element_Local_Messages_Ctx"" is set by ""Update"" but not used after the call");
         TLV.Messages.Update (Local_Messages_Ctx, RFLX_Element_Local_Messages_Ctx);
         pragma Warnings (On, """RFLX_Element_Local_Messages_Ctx"" is set by ""Update"" but not used after the call");
      end;
      pragma Warnings (Off, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition is always False");
      pragma Warnings (Off, "this code can never be executed and has been deleted");
      pragma Warnings (Off, "statement has no effect");
      pragma Warnings (Off, "this statement is never reached");
      if not TLV.Messages.Valid (Ctx.P.Messages_Ctx) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Local_Invariant);
         goto Finalize_Local;
      end if;
      pragma Warnings (On, "this statement is never reached");
      pragma Warnings (On, "statement has no effect");
      pragma Warnings (On, "this code can never be executed and has been deleted");
      pragma Warnings (On, "condition is always False");
      pragma Warnings (On, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition is always False");
      pragma Warnings (Off, "this code can never be executed and has been deleted");
      pragma Warnings (Off, "statement has no effect");
      pragma Warnings (Off, "this statement is never reached");
      if not TLV.Messages.Has_Element (Ctx.P.Messages_Ctx) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Local_Invariant);
         goto Finalize_Local;
      end if;
      pragma Warnings (On, "this statement is never reached");
      pragma Warnings (On, "statement has no effect");
      pragma Warnings (On, "this code can never be executed and has been deleted");
      pragma Warnings (On, "condition is always False");
      pragma Warnings (On, "condition can only be False if invalid values present");
      -- tests/feature/session_sequence_append_head/test.rflx:47:10
      if not TLV.Messages.Has_Element (Ctx.P.Messages_Ctx) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Local_Invariant);
         goto Finalize_Local;
      end if;
      declare
         RFLX_Element_Messages_Ctx : TLV.Message.Context;
      begin
         TLV.Messages.Switch (Ctx.P.Messages_Ctx, RFLX_Element_Messages_Ctx);
         if not TLV.Message.Sufficient_Space (RFLX_Element_Messages_Ctx, TLV.Message.F_Tag) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
            TLV.Messages.Update (Ctx.P.Messages_Ctx, RFLX_Element_Messages_Ctx);
            pragma Warnings (On, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Local_Invariant);
            goto Finalize_Local;
         end if;
         if not RFLX.TLV.Message.Field_Condition (RFLX_Element_Messages_Ctx, RFLX.TLV.Message.F_Tag, TLV.To_Base_Integer (TLV.Msg_Data)) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
            TLV.Messages.Update (Ctx.P.Messages_Ctx, RFLX_Element_Messages_Ctx);
            pragma Warnings (On, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Local_Invariant);
            goto Finalize_Local;
         end if;
         TLV.Message.Set_Tag (RFLX_Element_Messages_Ctx, TLV.Msg_Data);
         if not TLV.Message.Sufficient_Space (RFLX_Element_Messages_Ctx, TLV.Message.F_Length) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
            TLV.Messages.Update (Ctx.P.Messages_Ctx, RFLX_Element_Messages_Ctx);
            pragma Warnings (On, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Local_Invariant);
            goto Finalize_Local;
         end if;
         if not RFLX.TLV.Message.Field_Condition (RFLX_Element_Messages_Ctx, RFLX.TLV.Message.F_Length, TLV.To_Base_Integer (TLV.Length'(1))) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
            TLV.Messages.Update (Ctx.P.Messages_Ctx, RFLX_Element_Messages_Ctx);
            pragma Warnings (On, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Local_Invariant);
            goto Finalize_Local;
         end if;
         TLV.Message.Set_Length (RFLX_Element_Messages_Ctx, TLV.Length'(1));
         if not TLV.Message.Valid_Length (RFLX_Element_Messages_Ctx, TLV.Message.F_Value, RFLX_Types.To_Length (1 * RFLX_Types.Byte'Size)) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
            TLV.Messages.Update (Ctx.P.Messages_Ctx, RFLX_Element_Messages_Ctx);
            pragma Warnings (On, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Local_Invariant);
            goto Finalize_Local;
         end if;
         if not TLV.Message.Sufficient_Space (RFLX_Element_Messages_Ctx, TLV.Message.F_Value) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
            TLV.Messages.Update (Ctx.P.Messages_Ctx, RFLX_Element_Messages_Ctx);
            pragma Warnings (On, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Local_Invariant);
            goto Finalize_Local;
         end if;
         if not RFLX.TLV.Message.Field_Condition (RFLX_Element_Messages_Ctx, RFLX.TLV.Message.F_Value, 0) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
            TLV.Messages.Update (Ctx.P.Messages_Ctx, RFLX_Element_Messages_Ctx);
            pragma Warnings (On, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
            pragma Assert (Local_Invariant);
            goto Finalize_Local;
         end if;
         TLV.Message.Set_Value (RFLX_Element_Messages_Ctx, (RFLX_Types.Index'First => RFLX_Types.Byte'Val (2)));
         pragma Warnings (Off, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
         TLV.Messages.Update (Ctx.P.Messages_Ctx, RFLX_Element_Messages_Ctx);
         pragma Warnings (On, """RFLX_Element_Messages_Ctx"" is set by ""Update"" but not used after the call");
      end;
      pragma Warnings (Off, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition is always False");
      pragma Warnings (Off, "this code can never be executed and has been deleted");
      pragma Warnings (Off, "statement has no effect");
      pragma Warnings (Off, "this statement is never reached");
      if not TLV.Tags.Valid (Local_Tags_Ctx) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Local_Invariant);
         goto Finalize_Local;
      end if;
      pragma Warnings (On, "this statement is never reached");
      pragma Warnings (On, "statement has no effect");
      pragma Warnings (On, "this code can never be executed and has been deleted");
      pragma Warnings (On, "condition is always False");
      pragma Warnings (On, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition is always False");
      pragma Warnings (Off, "this code can never be executed and has been deleted");
      pragma Warnings (Off, "statement has no effect");
      pragma Warnings (Off, "this statement is never reached");
      if not TLV.Tags.Has_Element (Local_Tags_Ctx) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Local_Invariant);
         goto Finalize_Local;
      end if;
      pragma Warnings (On, "this statement is never reached");
      pragma Warnings (On, "statement has no effect");
      pragma Warnings (On, "this code can never be executed and has been deleted");
      pragma Warnings (On, "condition is always False");
      pragma Warnings (On, "condition can only be False if invalid values present");
      -- tests/feature/session_sequence_append_head/test.rflx:48:10
      if
         not TLV.Tags.Has_Element (Local_Tags_Ctx)
         or TLV.Tags.Available_Space (Local_Tags_Ctx) < TLV.Tag'Size
      then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Local_Invariant);
         goto Finalize_Local;
      end if;
      TLV.Tags.Append_Element (Local_Tags_Ctx, TLV.Msg_Data);
      pragma Warnings (Off, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition is always False");
      pragma Warnings (Off, "this code can never be executed and has been deleted");
      pragma Warnings (Off, "statement has no effect");
      pragma Warnings (Off, "this statement is never reached");
      if not TLV.Tags.Valid (Local_Tags_Ctx) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Local_Invariant);
         goto Finalize_Local;
      end if;
      pragma Warnings (On, "this statement is never reached");
      pragma Warnings (On, "statement has no effect");
      pragma Warnings (On, "this code can never be executed and has been deleted");
      pragma Warnings (On, "condition is always False");
      pragma Warnings (On, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition is always False");
      pragma Warnings (Off, "this code can never be executed and has been deleted");
      pragma Warnings (Off, "statement has no effect");
      pragma Warnings (Off, "this statement is never reached");
      if not TLV.Tags.Has_Element (Local_Tags_Ctx) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Local_Invariant);
         goto Finalize_Local;
      end if;
      pragma Warnings (On, "this statement is never reached");
      pragma Warnings (On, "statement has no effect");
      pragma Warnings (On, "this code can never be executed and has been deleted");
      pragma Warnings (On, "condition is always False");
      pragma Warnings (On, "condition can only be False if invalid values present");
      -- tests/feature/session_sequence_append_head/test.rflx:49:10
      if
         not TLV.Tags.Has_Element (Local_Tags_Ctx)
         or TLV.Tags.Available_Space (Local_Tags_Ctx) < TLV.Tag'Size
      then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Local_Invariant);
         goto Finalize_Local;
      end if;
      TLV.Tags.Append_Element (Local_Tags_Ctx, TLV.Msg_Error);
      -- tests/feature/session_sequence_append_head/test.rflx:50:10
      if not TLV.Messages.Valid (Local_Messages_Ctx) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Local_Invariant);
         goto Finalize_Local;
      end if;
      declare
         RFLX_Copy_Local_Messages_Ctx : TLV.Messages.Context;
         RFLX_Copy_Local_Messages_Buffer : RFLX_Types.Bytes_Ptr;
      begin
         RFLX_Copy_Local_Messages_Buffer := Ctx.P.Slots.Slot_Ptr_6;
         pragma Warnings (Off, "unused assignment");
         Ctx.P.Slots.Slot_Ptr_6 := null;
         pragma Warnings (On, "unused assignment");
         if not (RFLX_Types.Index'Last - RFLX_Copy_Local_Messages_Buffer'First >= RFLX_Types.Index (TLV.Messages.Byte_Size (Local_Messages_Ctx) + 1)) then
            Ctx.P.Next_State := S_Final;
            pragma Assert (Ctx.P.Slots.Slot_Ptr_6 = null);
            pragma Assert (RFLX_Copy_Local_Messages_Buffer /= null);
            Ctx.P.Slots.Slot_Ptr_6 := RFLX_Copy_Local_Messages_Buffer;
            pragma Assert (Ctx.P.Slots.Slot_Ptr_6 /= null);
            pragma Assert (Local_Invariant);
            goto Finalize_Local;
         end if;
         TLV.Messages.Copy (Local_Messages_Ctx, RFLX_Copy_Local_Messages_Buffer.all (RFLX_Copy_Local_Messages_Buffer'First .. (if
             TLV.Messages.Byte_Size (Local_Messages_Ctx) > 0
          then
             RFLX_Copy_Local_Messages_Buffer'First + TLV.Messages.Byte_Size (Local_Messages_Ctx) - RFLX_Types.Length'(1)
          else
             (-1))));
         TLV.Messages.Initialize (RFLX_Copy_Local_Messages_Ctx, RFLX_Copy_Local_Messages_Buffer, RFLX_Types.To_First_Bit_Index (RFLX_Copy_Local_Messages_Buffer'First), TLV.Messages.Sequence_Last (Local_Messages_Ctx));
         if not TLV.Messages.Has_Element (RFLX_Copy_Local_Messages_Ctx) then
            Ctx.P.Next_State := S_Final;
            pragma Warnings (Off, """RFLX_Copy_Local_Messages_Ctx"" is set by ""Take_Buffer"" but not used after the call");
            TLV.Messages.Take_Buffer (RFLX_Copy_Local_Messages_Ctx, RFLX_Copy_Local_Messages_Buffer);
            pragma Warnings (On, """RFLX_Copy_Local_Messages_Ctx"" is set by ""Take_Buffer"" but not used after the call");
            pragma Assert (Ctx.P.Slots.Slot_Ptr_6 = null);
            pragma Assert (RFLX_Copy_Local_Messages_Buffer /= null);
            Ctx.P.Slots.Slot_Ptr_6 := RFLX_Copy_Local_Messages_Buffer;
            pragma Assert (Ctx.P.Slots.Slot_Ptr_6 /= null);
            pragma Assert (Local_Invariant);
            goto Finalize_Local;
         end if;
         declare
            RFLX_Head_Ctx : TLV.Message.Context;
            RFLX_Target_Message_Buffer : RFLX.RFLX_Types.Bytes_Ptr;
         begin
            TLV.Messages.Switch (RFLX_Copy_Local_Messages_Ctx, RFLX_Head_Ctx);
            TLV.Message.Verify_Message (RFLX_Head_Ctx);
            if not TLV.Message.Well_Formed_Message (RFLX_Head_Ctx) then
               Ctx.P.Next_State := S_Final;
               pragma Warnings (Off, """RFLX_Head_Ctx"" is set by ""Update"" but not used after the call");
               TLV.Messages.Update (RFLX_Copy_Local_Messages_Ctx, RFLX_Head_Ctx);
               pragma Warnings (On, """RFLX_Head_Ctx"" is set by ""Update"" but not used after the call");
               pragma Warnings (Off, """RFLX_Copy_Local_Messages_Ctx"" is set by ""Take_Buffer"" but not used after the call");
               TLV.Messages.Take_Buffer (RFLX_Copy_Local_Messages_Ctx, RFLX_Copy_Local_Messages_Buffer);
               pragma Warnings (On, """RFLX_Copy_Local_Messages_Ctx"" is set by ""Take_Buffer"" but not used after the call");
               pragma Assert (Ctx.P.Slots.Slot_Ptr_6 = null);
               pragma Assert (RFLX_Copy_Local_Messages_Buffer /= null);
               Ctx.P.Slots.Slot_Ptr_6 := RFLX_Copy_Local_Messages_Buffer;
               pragma Assert (Ctx.P.Slots.Slot_Ptr_6 /= null);
               pragma Assert (Local_Invariant);
               goto Finalize_Local;
            end if;
            pragma Warnings (Off, """Ctx.P.Message_Ctx"" is set by ""Take_Buffer"" but not used after the call");
            TLV.Message.Take_Buffer (Ctx.P.Message_Ctx, RFLX_Target_Message_Buffer);
            pragma Warnings (On, """Ctx.P.Message_Ctx"" is set by ""Take_Buffer"" but not used after the call");
            if not (RFLX_Types.Index'Last - RFLX_Target_Message_Buffer'First >= RFLX_Types.Index (TLV.Message.Byte_Size (RFLX_Head_Ctx) + 1)) then
               Ctx.P.Next_State := S_Final;
               TLV.Message.Initialize (Ctx.P.Message_Ctx, RFLX_Target_Message_Buffer);
               pragma Warnings (Off, """RFLX_Head_Ctx"" is set by ""Update"" but not used after the call");
               TLV.Messages.Update (RFLX_Copy_Local_Messages_Ctx, RFLX_Head_Ctx);
               pragma Warnings (On, """RFLX_Head_Ctx"" is set by ""Update"" but not used after the call");
               pragma Warnings (Off, """RFLX_Copy_Local_Messages_Ctx"" is set by ""Take_Buffer"" but not used after the call");
               TLV.Messages.Take_Buffer (RFLX_Copy_Local_Messages_Ctx, RFLX_Copy_Local_Messages_Buffer);
               pragma Warnings (On, """RFLX_Copy_Local_Messages_Ctx"" is set by ""Take_Buffer"" but not used after the call");
               pragma Assert (Ctx.P.Slots.Slot_Ptr_6 = null);
               pragma Assert (RFLX_Copy_Local_Messages_Buffer /= null);
               Ctx.P.Slots.Slot_Ptr_6 := RFLX_Copy_Local_Messages_Buffer;
               pragma Assert (Ctx.P.Slots.Slot_Ptr_6 /= null);
               pragma Assert (Local_Invariant);
               goto Finalize_Local;
            end if;
            TLV.Message.Copy (RFLX_Head_Ctx, RFLX_Target_Message_Buffer.all (RFLX_Target_Message_Buffer'First .. (if
                TLV.Message.Byte_Size (RFLX_Head_Ctx) > 0
             then
                RFLX_Target_Message_Buffer'First + TLV.Message.Byte_Size (RFLX_Head_Ctx) - RFLX_Types.Length'(1)
             else
                (-1))));
            TLV.Message.Initialize (Ctx.P.Message_Ctx, RFLX_Target_Message_Buffer, Written_Last => RFLX_Types.To_Bit_Length (RFLX_Types.Length (RFLX_Target_Message_Buffer'First + TLV.Message.Byte_Size (RFLX_Head_Ctx) - RFLX_Types.Length'(1))));
            TLV.Message.Verify_Message (Ctx.P.Message_Ctx);
            pragma Warnings (Off, """RFLX_Head_Ctx"" is set by ""Update"" but not used after the call");
            TLV.Messages.Update (RFLX_Copy_Local_Messages_Ctx, RFLX_Head_Ctx);
            pragma Warnings (On, """RFLX_Head_Ctx"" is set by ""Update"" but not used after the call");
         end;
         pragma Warnings (Off, """RFLX_Copy_Local_Messages_Ctx"" is set by ""Take_Buffer"" but not used after the call");
         TLV.Messages.Take_Buffer (RFLX_Copy_Local_Messages_Ctx, RFLX_Copy_Local_Messages_Buffer);
         pragma Warnings (On, """RFLX_Copy_Local_Messages_Ctx"" is set by ""Take_Buffer"" but not used after the call");
         pragma Assert (Ctx.P.Slots.Slot_Ptr_6 = null);
         pragma Assert (RFLX_Copy_Local_Messages_Buffer /= null);
         Ctx.P.Slots.Slot_Ptr_6 := RFLX_Copy_Local_Messages_Buffer;
         pragma Assert (Ctx.P.Slots.Slot_Ptr_6 /= null);
      end;
      -- tests/feature/session_sequence_append_head/test.rflx:51:25
      pragma Warnings (Off, "condition can only be False if invalid values present");
      pragma Warnings (Off, "condition is always False");
      pragma Warnings (Off, "this code can never be executed and has been deleted");
      pragma Warnings (Off, "statement has no effect");
      pragma Warnings (Off, "this statement is never reached");
      if not TLV.Message.Valid (Ctx.P.Message_Ctx, TLV.Message.F_Tag) then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Local_Invariant);
         goto Finalize_Local;
      end if;
      pragma Warnings (On, "this statement is never reached");
      pragma Warnings (On, "statement has no effect");
      pragma Warnings (On, "this code can never be executed and has been deleted");
      pragma Warnings (On, "condition is always False");
      pragma Warnings (On, "condition can only be False if invalid values present");
      -- tests/feature/session_sequence_append_head/test.rflx:51:10
      Message_Tag := TLV.Message.Get_Tag (Ctx.P.Message_Ctx);
      -- tests/feature/session_sequence_append_head/test.rflx:52:10
      if
         not (TLV.Tags.Valid (Local_Tags_Ctx)
          and then TLV.Tags.Has_Element (Local_Tags_Ctx)
          and then TLV.Tags.Size (Local_Tags_Ctx) >= TLV.Tag'Size)
      then
         Ctx.P.Next_State := S_Final;
         pragma Assert (Local_Invariant);
         goto Finalize_Local;
      end if;
      Tag := TLV.Tags.Head (Local_Tags_Ctx);
      -- tests/feature/session_sequence_append_head/test.rflx:55:16
      T_2 := Message_Tag = TLV.Msg_Data;
      -- tests/feature/session_sequence_append_head/test.rflx:56:20
      T_3 := Tag = TLV.Msg_Data;
      if
         T_2
         and then T_3
      then
         Ctx.P.Next_State := S_Reply_2;
      else
         Ctx.P.Next_State := S_Final;
      end if;
      pragma Assert (Local_Invariant);
      <<Finalize_Local>>
      pragma Warnings (Off, """Local_Messages_Ctx"" is set by ""Take_Buffer"" but not used after the call");
      TLV.Messages.Take_Buffer (Local_Messages_Ctx, Local_Messages_Buffer);
      pragma Warnings (On, """Local_Messages_Ctx"" is set by ""Take_Buffer"" but not used after the call");
      pragma Assert (Ctx.P.Slots.Slot_Ptr_4 = null);
      pragma Assert (Local_Messages_Buffer /= null);
      Ctx.P.Slots.Slot_Ptr_4 := Local_Messages_Buffer;
      pragma Assert (Ctx.P.Slots.Slot_Ptr_4 /= null);
      pragma Warnings (Off, """Local_Tags_Ctx"" is set by ""Take_Buffer"" but not used after the call");
      TLV.Tags.Take_Buffer (Local_Tags_Ctx, Local_Tags_Buffer);
      pragma Warnings (On, """Local_Tags_Ctx"" is set by ""Take_Buffer"" but not used after the call");
      pragma Assert (Ctx.P.Slots.Slot_Ptr_5 = null);
      pragma Assert (Local_Tags_Buffer /= null);
      Ctx.P.Slots.Slot_Ptr_5 := Local_Tags_Buffer;
      pragma Assert (Ctx.P.Slots.Slot_Ptr_5 /= null);
      pragma Assert (Global_Initialized (Ctx));
   end Local;

   procedure Reply_2 (Ctx : in out Context) with
     Pre =>
       Initialized (Ctx),
     Post =>
       Initialized (Ctx)
   is
      function Reply_2_Invariant return Boolean is
        (Ctx.P.Slots.Slot_Ptr_1 = null
         and Ctx.P.Slots.Slot_Ptr_2 = null
         and Ctx.P.Slots.Slot_Ptr_3 = null
         and Ctx.P.Slots.Slot_Ptr_4 /= null
         and Ctx.P.Slots.Slot_Ptr_5 /= null
         and Ctx.P.Slots.Slot_Ptr_6 /= null
         and Ctx.P.Slots.Slot_Ptr_7 /= null)
       with
        Annotate =>
          (GNATprove, Inline_For_Proof),
        Ghost;
   begin
      pragma Assert (Reply_2_Invariant);
      -- tests/feature/session_sequence_append_head/test.rflx:64:10
      Ctx.P.Next_State := S_Final;
      pragma Assert (Reply_2_Invariant);
   end Reply_2;

   procedure Initialize (Ctx : in out Context) is
      Messages_Buffer : RFLX_Types.Bytes_Ptr;
      Tags_Buffer : RFLX_Types.Bytes_Ptr;
      Message_Buffer : RFLX_Types.Bytes_Ptr;
   begin
      Test.Session.FSM_Allocator.Initialize (Ctx.P.Slots, Ctx.P.Memory);
      Messages_Buffer := Ctx.P.Slots.Slot_Ptr_1;
      pragma Warnings (Off, "unused assignment");
      Ctx.P.Slots.Slot_Ptr_1 := null;
      pragma Warnings (On, "unused assignment");
      TLV.Messages.Initialize (Ctx.P.Messages_Ctx, Messages_Buffer);
      Tags_Buffer := Ctx.P.Slots.Slot_Ptr_2;
      pragma Warnings (Off, "unused assignment");
      Ctx.P.Slots.Slot_Ptr_2 := null;
      pragma Warnings (On, "unused assignment");
      TLV.Tags.Initialize (Ctx.P.Tags_Ctx, Tags_Buffer);
      Message_Buffer := Ctx.P.Slots.Slot_Ptr_3;
      pragma Warnings (Off, "unused assignment");
      Ctx.P.Slots.Slot_Ptr_3 := null;
      pragma Warnings (On, "unused assignment");
      TLV.Message.Initialize (Ctx.P.Message_Ctx, Message_Buffer);
      Ctx.P.Next_State := S_Global;
   end Initialize;

   procedure Finalize (Ctx : in out Context) is
      Messages_Buffer : RFLX_Types.Bytes_Ptr;
      Tags_Buffer : RFLX_Types.Bytes_Ptr;
      Message_Buffer : RFLX_Types.Bytes_Ptr;
   begin
      pragma Warnings (Off, """Ctx.P.Messages_Ctx"" is set by ""Take_Buffer"" but not used after the call");
      TLV.Messages.Take_Buffer (Ctx.P.Messages_Ctx, Messages_Buffer);
      pragma Warnings (On, """Ctx.P.Messages_Ctx"" is set by ""Take_Buffer"" but not used after the call");
      pragma Assert (Ctx.P.Slots.Slot_Ptr_1 = null);
      pragma Assert (Messages_Buffer /= null);
      Ctx.P.Slots.Slot_Ptr_1 := Messages_Buffer;
      pragma Assert (Ctx.P.Slots.Slot_Ptr_1 /= null);
      pragma Warnings (Off, """Ctx.P.Tags_Ctx"" is set by ""Take_Buffer"" but not used after the call");
      TLV.Tags.Take_Buffer (Ctx.P.Tags_Ctx, Tags_Buffer);
      pragma Warnings (On, """Ctx.P.Tags_Ctx"" is set by ""Take_Buffer"" but not used after the call");
      pragma Assert (Ctx.P.Slots.Slot_Ptr_2 = null);
      pragma Assert (Tags_Buffer /= null);
      Ctx.P.Slots.Slot_Ptr_2 := Tags_Buffer;
      pragma Assert (Ctx.P.Slots.Slot_Ptr_2 /= null);
      pragma Warnings (Off, """Ctx.P.Message_Ctx"" is set by ""Take_Buffer"" but not used after the call");
      TLV.Message.Take_Buffer (Ctx.P.Message_Ctx, Message_Buffer);
      pragma Warnings (On, """Ctx.P.Message_Ctx"" is set by ""Take_Buffer"" but not used after the call");
      pragma Assert (Ctx.P.Slots.Slot_Ptr_3 = null);
      pragma Assert (Message_Buffer /= null);
      Ctx.P.Slots.Slot_Ptr_3 := Message_Buffer;
      pragma Assert (Ctx.P.Slots.Slot_Ptr_3 /= null);
      Test.Session.FSM_Allocator.Finalize (Ctx.P.Slots);
      Ctx.P.Next_State := S_Final;
   end Finalize;

   procedure Tick (Ctx : in out Context) is
   begin
      case Ctx.P.Next_State is
         when S_Global =>
            Global (Ctx);
         when S_Reply_1 =>
            Reply_1 (Ctx);
         when S_Local =>
            Local (Ctx);
         when S_Reply_2 =>
            Reply_2 (Ctx);
         when S_Final =>
            null;
      end case;
   end Tick;

   function In_IO_State (Ctx : Context) return Boolean is
     (Ctx.P.Next_State in S_Reply_1 | S_Reply_2);

   procedure Run (Ctx : in out Context) is
   begin
      Tick (Ctx);
      while
         Active (Ctx)
         and not In_IO_State (Ctx)
      loop
         pragma Loop_Invariant (Initialized (Ctx));
         Tick (Ctx);
      end loop;
   end Run;

   procedure Read (Ctx : Context; Chan : Channel; Buffer : out RFLX_Types.Bytes; Offset : RFLX_Types.Length := 0) is
      function Read_Pre (Message_Buffer : RFLX_Types.Bytes) return Boolean is
        (Buffer'Length > 0
         and then Offset < Message_Buffer'Length);
      procedure Read (Message_Buffer : RFLX_Types.Bytes) with
        Pre =>
          Read_Pre (Message_Buffer)
      is
         Length : constant RFLX_Types.Length := RFLX_Types.Length'Min (Buffer'Length, Message_Buffer'Length - Offset);
         Buffer_Last : constant RFLX_Types.Index := Buffer'First + (Length - RFLX_Types.Length'(1));
      begin
         Buffer (Buffer'First .. RFLX_Types.Index (Buffer_Last)) := Message_Buffer (RFLX_Types.Index (RFLX_Types.Length (Message_Buffer'First) + Offset) .. Message_Buffer'First + Offset + (Length - RFLX_Types.Length'(1)));
      end Read;
      procedure TLV_Message_Read is new TLV.Message.Generic_Read (Read, Read_Pre);
   begin
      Buffer := (others => 0);
      case Chan is
         when C_Channel =>
            case Ctx.P.Next_State is
               when S_Reply_1 | S_Reply_2 =>
                  TLV_Message_Read (Ctx.P.Message_Ctx);
               when others =>
                  pragma Warnings (Off, "unreachable code");
                  null;
                  pragma Warnings (On, "unreachable code");
            end case;
      end case;
   end Read;

end RFLX.Test.Session.FSM;

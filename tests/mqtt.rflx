package MQTT is

type Control_Packet_Type is (CONNECT, CONNACK, PUBLISH, PUBACK, PUBREC, PUBREL, PUBCOMP, SUBSCRIBE, SUBACK, UNSUBSCRIBE, UNSUBACK, PINGREQ, PINGRESP, DISCONNECT) with
    Size => 16;
for Control_Packet_Type use (CONNECT => 1, CONNACK => 2, PUBLISH => 3, PUBACK => 4, PUBREC => 5, PUBREL => 6, PUBCOMP => 7, SUBSCRIBE => 8, SUBACK => 9, UNSUBSCRIBE => 10, UNSUBACK => 11, PINGREQ => 12, PINGRESP => 13, DISCONNECT => 14);

type Flags_Type is
    record
        DUP : Boolean;
        QoS1 : Boolean;
        QoS2 : Boolean;
        RETAIN : Boolean;
    end record
        with Size => 1;

type Variable_Length_Encoding is new Natural with
    Encode => Encode_VLE,
    Decode => Decode_VLE;

type Packet is
    record
        -- Fixed Header
        Packet_Type : Control_Packet_Type;
        Flags : Flags_Type;
        Remaining_Length : Variable_Length_Encoding;
        -- Variable Header
        case Packet_Type is
            when PUBLISH =>
                if Flags and 2#0110# > 0 then
                    Packet_Identifier : Bytes (1 .. 2);
                end if;
            when PUBACK | PUBREC | PUBREL | PUBCOMP | SUBSCRIBE | SUBACK | UNSUBSCRIBE | UNSUBACK =>
                Packet_Identifier : Bytes (1 .. 2);
            when others =>
                null;
        end case;
        -- Payload
        case Packet_Type is
            when CONNECT | PUBLISH | SUBSCRIBE | SUBACK | UNSUBSCRIBE =>
                Payload : Bytes;
            when others =>
                null;
        end case;
    end record
        with Type_Invariant => Remaining_Length'Length >= 1 and Remaining_Length'Length <= 4 and Remaining_Length = Packet_Identifier'Length + Payload'Length;

end MQTT;

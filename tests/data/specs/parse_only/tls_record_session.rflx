-- style: disable = line-length

with GreenTLS;
with TLS_Alert;
with TLS_Record;

package TLS_Record_Session is

   generic
      Network_Channel : Channel with Readable, Writable;
      Data_Channel : Channel with Readable, Writable;
      Application_Control_Channel : Channel with Readable, Writable;
      Handshake_Control_Channel : Channel with Readable;
      Handshake_Data_Channel : Channel with Readable, Writable;
      Heartbeat_Data_Channel : Channel with Readable, Writable;
      with function Decrypt
         (Server_Key_Update_Message : GreenTLS::Key_Update_Message;
          Server_Sequence_Number : GreenTLS::Sequence_Number;
          Encrypted_Record : Opaque)
         return TLS_Record::TLS_Inner_Plaintext;
      with function Encrypt
         (Client_Key_Update_Message : GreenTLS::Key_Update_Message;
          Client_Sequence_Number : GreenTLS::Sequence_Number;
          Fragment : Opaque)
         return GreenTLS::Content;
   session Client is
      Alert_Message : TLS_Alert::Alert;
      Application_Control_Message : GreenTLS::Application_Control_Message;
      Ciphertext : GreenTLS::Content;
      Client_Key_Update_Message : GreenTLS::Key_Update_Message;
      Client_Sequence_Number : GreenTLS::Sequence_Number := 0;
      Client_Write_Key_Received : Boolean := False;
      Error : TLS_Alert::Alert_Description;
      Error_Sent : Boolean := False;
      Handshake_Control_Message : GreenTLS::Control_Message;
      Handshake_Message : GreenTLS::Content;
      Heartbeat_Data_Message : GreenTLS::Content;
      Heartbeat_Control_Message : GreenTLS::Heartbeat_Control_Message;
      Heartbeat_Receive_Enabled : Boolean := False;
      Heartbeat_Send_Enabled : Boolean := False;
      Network_Receive_Enabled : Boolean := True;
      Network_Send_Enabled : Boolean := True;
      Plaintext : GreenTLS::Content;
      Record_Protection : Boolean := False;
      Server_Key_Update_Message : GreenTLS::Key_Update_Message;
      Server_Sequence_Number : GreenTLS::Sequence_Number := 0;
      Server_Write_Key_Received : Boolean := False;
      TLS_Inner_Plaintext : TLS_Record::TLS_Inner_Plaintext;
      TLS_Record_Message : TLS_Record::TLS_Record;
   begin
      state Idle is
      begin
      transition
         goto Terminating
            if Error_Sent = True
         goto Idle_Message
      end Idle;

      state Idle_Message is
         Available : Boolean := False;
      begin
         Available := Application_Control_Channel'Has_Data;
      transition
         goto Control
            if Available = True
         goto Idle_Handshake_Control
      end Idle_Message;

      state Idle_Handshake_Control is
         Available : Boolean := False;
      begin
         Available := Handshake_Control_Channel'Has_Data;
      transition
         goto Handshake_Control
            if Available = True
         goto Idle_Handshake
      end Idle_Handshake_Control;

      state Idle_Handshake is
         Available : Boolean := False;
      begin
         Available := Handshake_Data_Channel'Has_Data;
      transition
         goto Handshake
            if Available = True
         goto Idle_Network
      end Idle_Handshake;

      state Idle_Network is
         Available : Boolean := False;
      begin
         Available := Network_Channel'Has_Data;
      transition
         goto Network_In
            if Available = True
               and Network_Receive_Enabled = True
         goto Idle_Application
      end Idle_Network;

      state Idle_Application is
         Available : Boolean := False;
      begin
         Available := Data_Channel'Has_Data;
      transition
         goto Network_Out_Application
            if Available = True
         goto Idle_Heartbeat
      end Idle_Application;

      state Idle_Heartbeat is
         Available : Boolean := False;
      begin
         Available := Heartbeat_Data_Channel'Has_Data;
      transition
         goto Heartbeat
            if Available = True
               and Heartbeat_Send_Enabled = True
         goto Idle
      end Idle_Heartbeat;

      state Control is
      begin
         Application_Control_Channel'Read (Application_Control_Message);
      transition
         goto Error_Internal_Error
            with Desc => "rfc8446.txt+4977:4-4979:38"
            if Application_Control_Message'Valid = False
         goto Shutdown
            if Application_Control_Message.Tag = GreenTLS::Application_Shutdown
         goto Error_Internal_Error
            with Desc => "rfc8446.txt+4977:4-4979:38"
      end Control;

      state Shutdown
         with Desc => "rfc8446.txt+4828:4-4829:52"
      is
         Success : Boolean;
      begin
         Alert_Message := TLS_Alert::Alert'(Level => TLS_Alert::Warning, Description => TLS_Alert::Close_Notify);
         Network_Channel'Write (TLS_Record::TLS_Record'(Tag => TLS_Record::Alert,
                                                        Legacy_Record_Version => TLS_Record::TLS_1_2,
                                                        Length => Alert_Message'Size,
                                                        Fragment => Alert_Message));
         Network_Send_Enabled := False;
      transition
         goto Error_Internal_Error
            if Success = False
         goto Terminating
      exception
         goto Error_Internal_Error
      end Shutdown;

      state Handshake_Control is
      begin
         Handshake_Control_Channel'Read (Handshake_Control_Message);
      transition
         goto Error_Internal_Error
            with Desc => "rfc8446.txt+4977:4-4979:38"
            if Handshake_Control_Message'Valid = False
         goto Key_Update_Client
            if Handshake_Control_Message.Tag = GreenTLS::Key_Update_Client
         goto Key_Update_Server
            if Handshake_Control_Message.Tag = GreenTLS::Key_Update_Server
         goto Heartbeat_Control
            if Handshake_Control_Message.Tag = GreenTLS::Heartbeat
         goto Handshake_Alert
            if Handshake_Control_Message.Tag = GreenTLS::Alert
         goto Error_Internal_Error
      end Handshake_Control;

      state Key_Update_Client is
      begin
         Client_Key_Update_Message := GreenTLS::Key_Update_Message (Handshake_Control_Message.Data);
         Client_Write_Key_Received := True;
         Client_Sequence_Number := 0;
         Record_Protection := True;
      transition
         goto Error_Internal_Error
            with Desc => "rfc8446.txt+4977:4-4979:38"
            if Client_Key_Update_Message'Valid = False
         goto Idle
      end Key_Update_Client;

      state Key_Update_Server is
      begin
         Server_Key_Update_Message := GreenTLS::Key_Update_Message (Handshake_Control_Message.Data);
         Server_Write_Key_Received := True;
         Server_Sequence_Number := 0;
      transition
         goto Error_Internal_Error
            with Desc => "rfc8446.txt+4977:4-4979:38"
            if Server_Key_Update_Message'Valid = False
         goto Idle
      end Key_Update_Server;

      state Handshake_Alert is
      begin
         Alert_Message := TLS_Alert::Alert'(Level => TLS_Alert::Fatal, Description => GreenTLS::Alert_Message (Handshake_Control_Message.Data).Description);
         TLS_Record_Message := TLS_Record::TLS_Record'(Tag => TLS_Record::Alert,
                                                       Legacy_Record_Version => TLS_Record::TLS_1_2,
                                                       Length => Alert_Message'Size,
                                                       Fragment => Alert_Message);
      transition
         goto Network_Out_Send
      end Handshake_Alert;

      state Handshake is
      begin
         Handshake_Data_Channel'Read (Handshake_Message);
         TLS_Record_Message := TLS_Record::TLS_Record'(Tag => TLS_Record::Handshake, Legacy_Record_Version => TLS_Record::TLS_1_2, Length => Handshake_Message'Size, Fragment => Handshake_Message.Data);
      transition
         goto Error_Internal_Error
            with Desc => "rfc8446.txt+4977:4-4979:38"
            if Handshake_Message'Valid = False
         goto Network_Out_Send
      exception
         goto Error_Internal_Error
      end Handshake;

      state Network_In is
      begin
         Network_Channel'Read (TLS_Record_Message);
      transition
         goto Error_Decode_Error
            with Desc => "rfc8446.txt+4959:4-4964:57"
            if TLS_Record_Message'Valid = False
         goto Error_Unexpected_Message
            with Desc => "rfc8446.txt+4902:4-4905:29"
            if TLS_Record_Message.Tag = TLS_Record::Application_Data
               and Server_Write_Key_Received = False
         goto Network_In_Decrypt
            if TLS_Record_Message.Tag = TLS_Record::Application_Data
               and Server_Write_Key_Received = True
         goto Network_In_Content
            if TLS_Record_Message.Tag = TLS_Record::Handshake
               or TLS_Record_Message.Tag = TLS_Record::Alert
         goto Network_In_Handshake
            if TLS_Record_Message.Tag = TLS_Record::Change_Cipher_Spec
         goto Network_In_Heartbeat
            if TLS_Record_Message.Tag = TLS_Record::Heartbeat
               and Heartbeat_Receive_Enabled = True
         goto Error_Unexpected_Message
            with Desc => "rfc6520.txt+146:69-149:61"
            if TLS_Record_Message.Tag = TLS_Record::Heartbeat
               and Heartbeat_Receive_Enabled = False
         goto Error_Internal_Error
            with Desc => "rfc8446.txt+4977:4-4979:38"
      end Network_In;

      state Network_In_Decrypt
         with Desc => "rfc8446.txt+4631:4-4669:49"
      is
      begin
         TLS_Inner_Plaintext := Decrypt (Server_Key_Update_Message, Server_Sequence_Number, TLS_Record_Message.Encrypted_Record);
         Server_Sequence_Number := Server_Sequence_Number + 1;
         Plaintext := GreenTLS::Content'(Data => TLS_Inner_Plaintext.Content);
      transition
         goto Error_Bad_Record_MAC
            with Desc => "rfc8446.txt+4907:4-4912:57"
            if TLS_Inner_Plaintext'Valid = False
         goto Error_Internal_Error
            with Desc => "rfc8446.txt+4977:4-4979:38"
            if Plaintext'Valid = False
         goto Network_In_Application
            if TLS_Inner_Plaintext.Tag = TLS_Record::Application_Data
         goto Network_In_Handshake
            if TLS_Inner_Plaintext.Tag = TLS_Record::Handshake
         goto Network_In_Alert
            if TLS_Inner_Plaintext.Tag = TLS_Record::Alert
         goto Error_Internal_Error
            with Desc => "rfc8446.txt+4977:4-4979:38"
      exception
         goto Error_Internal_Error
      end Network_In_Decrypt;

      state Network_In_Content is
      begin
         Plaintext := GreenTLS::Content'(Data => TLS_Record_Message.Fragment);
      transition
         goto Error_Internal_Error
            with Desc => "rfc8446.txt+4977:4-4979:38"
            if Plaintext'Valid = False
         goto Network_In_Handshake
            if TLS_Record_Message.Tag = TLS_Record::Handshake
         goto Network_In_Alert
            if TLS_Record_Message.Tag = TLS_Record::Alert
         goto Error_Internal_Error
            with Desc => "rfc8446.txt+4977:4-4979:38"
      exception
         goto Error_Internal_Error
      end Network_In_Content;

      state Network_In_Application is
         Success : Boolean;
      begin
         Data_Channel'Write (Plaintext);
      transition
         goto Error_Internal_Error
            if Success = False
         goto Idle
      end Network_In_Application;

      state Network_In_Handshake is
         Success : Boolean;
      begin
         Handshake_Data_Channel'Write (Plaintext);
      transition
         goto Error_Internal_Error
            if Success = False
         goto Idle
      end Network_In_Handshake;

      state Network_In_Heartbeat is
         Success : Boolean;
      begin
         Heartbeat_Data_Channel'Write (Plaintext);
      transition
         goto Error_Internal_Error
            if Success = False
         goto Idle
      end Network_In_Heartbeat;

      state Network_In_Alert is
      begin
         Alert_Message := TLS_Alert::Alert (Plaintext.Data);
      transition
         goto Error_Decode_Error
            with Desc => "rfc8446.txt+4959:4-4964:57"
            if Alert_Message'Valid = False
         goto Network_In_Alert_Close
            if Alert_Message.Description = TLS_Alert::Close_Notify
         goto Network_In_Alert_Terminate
            with Desc => "rfc8446.txt+4726:4-4728:46"
      end Network_In_Alert;

      state Network_In_Alert_Close is
         Success : Boolean;
      begin
         Network_Receive_Enabled := False;
         M := GreenTLS::Alert_Message'(Description => Alert_Message.Description);
         Application_Control_Channel'Write (GreenTLS::Application_Control_Message'(Tag => GreenTLS::Application_Alert, Length => M'Size, Data => M));
      transition
         goto Error_Internal_Error
            if Success = False
         goto Idle
      end Network_In_Alert_Close;

      state Network_In_Alert_Terminate
         with Desc => "rfc8446.txt+4728:48-4729:57"
      is
      begin
         Network_Send_Enabled := False;
         Network_Receive_Enabled := False;
         Error := Alert_Message.Description;
      transition
         goto Error_Send_Local
      exception
         goto Error_Internal_Error
      end Network_In_Alert_Terminate;

      state Network_Out_Application is
      begin
         Data_Channel'Read (Plaintext);
         TLS_Record_Message := TLS_Record::TLS_Record'(Tag => TLS_Record::Application_Data, Legacy_Record_Version => TLS_Record::TLS_1_2, Length => Plaintext.Data'Size, Fragment => Plaintext.Data);
      transition
         goto Network_Out_Send_Encrypted
      exception
         goto Error_Internal_Error
      end Network_Out_Application;

      state Network_Out_Send is
      begin
      transition
         goto Idle
            if Network_Send_Enabled = False
         goto Error_Internal_Error
            with Desc => "rfc8446.txt+4977:4-4979:38"
            if Record_Protection = True
               and Client_Write_Key_Received = False
         goto Network_Out_Send_Unencrypted
            if Record_Protection = False
               and Client_Write_Key_Received = False
         goto Network_Out_Send_Encrypted
            if Record_Protection = True
               and Client_Write_Key_Received = True
         goto Error_Internal_Error
            with Desc => "rfc8446.txt+4977:4-4979:38"
      end Network_Out_Send;

      state Network_Out_Send_Unencrypted is
         Success : Boolean;
      begin
         Network_Channel'Write (TLS_Record_Message);
      transition
         goto Error_Internal_Error
            if Success = False
         goto Idle
      end Network_Out_Send_Unencrypted;

      state Network_Out_Send_Encrypted is
         Success : Boolean;
      begin
         Ciphertext := Encrypt (Client_Key_Update_Message, Client_Sequence_Number, TLS_Record_Message.Fragment);
         Network_Channel'Write (Ciphertext);
         Client_Sequence_Number := Client_Sequence_Number + 1;
      transition
         goto Error_Internal_Error
            if Success = False
         goto Idle
      end Network_Out_Send_Encrypted;

      state Heartbeat is
      begin
         Heartbeat_Data_Channel'Read (Heartbeat_Data_Message);
         TLS_Record_Message := TLS_Record::TLS_Record'(Tag => TLS_Record::Heartbeat, Legacy_Record_Version => TLS_Record::TLS_1_2, Length => Heartbeat_Data_Message'Size, Fragment => Heartbeat_Data_Message.Data);
      transition
         goto Network_Out_Send_Encrypted
      exception
         goto Error_Internal_Error
      end Heartbeat;

      state Heartbeat_Control is
      begin
         Heartbeat_Control_Message := GreenTLS::Heartbeat_Control_Message (Handshake_Control_Message.Data);
      transition
         goto Error_Internal_Error
            with Desc => "rfc8446.txt+4977:4-4979:38"
            if Heartbeat_Control_Message'Valid = False
         goto Heartbeat_Control_Configure
      end Heartbeat_Control;

      state Heartbeat_Control_Configure is
      begin
         Heartbeat_Receive_Enabled := Heartbeat_Control_Message.Remote = TLS_Handshake::Peer_Allowed_To_Send;  -- FIXME: correct association: send/receive <-> local/remote
         Heartbeat_Send_Enabled := Heartbeat_Control_Message.Local = GreenTLS::Heartbeat_Enabled;
      transition
         goto Idle
      end Heartbeat_Control_Configure;

      state Error_Unexpected_Message is
      begin
         Error := TLS_Alert::Unexpected_Message;
      transition
         goto Error_Send_Local
      end Error_Unexpected_Message;

      state Error_Bad_Record_MAC is
      begin
         Error := TLS_Alert::Bad_Record_Mac;
      transition
         goto Error_Send_Local
      end Error_Bad_Record_MAC;

      state Error_Decode_Error is
      begin
         Error := TLS_Alert::Decode_Error;
      transition
         goto Error_Send_Local
      end Error_Decode_Error;

      state Error_Internal_Error is
      begin
         Error := TLS_Alert::Internal_Error;
      transition
         goto Error_Send_Local
      end Error_Internal_Error;

      state Error_Send_Local is
      begin
         Data := GreenTLS::Alert_Message'(Description => Error);
         Application_Control_Channel'Write (GreenTLS::Application_Control_Message'(Tag => GreenTLS::Application_Alert, Length => Data'Size, Data => Data));
      transition
         goto Error_Send_Remote
            if Network_Send_Enabled = True
         goto Terminating
      end Error_Send_Local;

      state Error_Send_Remote is
      begin
         Alert_Message := TLS_Alert::Alert'(Level => TLS_Alert::Fatal, Description => Error);
         TLS_Record_Message := TLS_Record::TLS_Record'(Tag => TLS_Record::Alert, Legacy_Record_Version => TLS_Record::TLS_1_2, Length => Alert_Message'Size, Fragment => Alert_Message);
         Error_Sent := True;
      transition
         goto Network_Out_Send_Unencrypted
            if Record_Protection = False
         goto Network_Out_Send_Encrypted
      exception
         goto Error_Internal_Error
      end Error_Send_Remote;

      state Terminating
         with Desc => "rfc8446.txt+4729:60-4731:14"
      is
      begin
         Client_Key_Update_Message'Reset;
         Server_Key_Update_Message'Reset;
      transition
         goto null
      end Terminating;
   end Client;

end TLS_Record_Session;

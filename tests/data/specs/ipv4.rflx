package IPv4 is

   type Version is range 4 .. 4 with Size => 4;
   type IHL is range 5 .. 15 with Size => 4;
   type DCSP is range 0 .. 2 ** 6 - 1 with Size => 6;
   type ECN is range 0 .. 2 ** 2 - 1 with Size => 2;
   type Total_Length is range 0 .. 2 ** 16 - 1 with Size => 16;
   type Identification is range 0 .. 2 ** 16 - 1 with Size => 16;
   type Fragment_Offset is range 0 .. 2 ** 13 - 1 with Size => 13;
   type TTL is range 0 .. 2 ** 8 - 1 with Size => 8;
   type Protocol is (P_ICMP => 1, P_UDP => 17) with Size => 8, Always_Valid;
   type Header_Checksum is range 0 .. 2 ** 16 - 1 with Size => 16;
   type Address is range 0 .. 2 ** 32 - 1 with Size => 32;

   type Option_Class is (Control => 0, Debugging_And_Measurement => 2) with Size => 2;
   type Option_Number is range 0 .. 2 ** 5 - 1 with Size => 5;
   type Option_Length is range 2 .. 2 ** 8 - 1 with Size => 8;

   type Option is
      message
         Copied : Boolean;
         Option_Class : Option_Class;
         Option_Number : Option_Number
            then null
               if Option_Class = Control and Option_Number = 1
            then Option_Length
               if Option_Number > 1;
         Option_Length : Option_Length
            then Option_Data
               if (Option_Class = Control and Option_Number = 2 and Option_Length = 11)
                  or (Option_Class = Control and Option_Number = 8 and Option_Length = 4)
                  or (Option_Class = Control and (Option_Number = 3 or Option_Number = 7 or Option_Number = 9))
                  or (Option_Class = Debugging_And_Measurement and Option_Number = 4);
         Option_Data : Opaque
            with Size => (Option_Length - 2) * 8;
      end message;

   type Options is sequence of Option;

   type Packet is
      message
         Version : Version;
         IHL : IHL;
         DSCP : DCSP;
         ECN : ECN;
         Total_Length : Total_Length
            then Identification
               if Total_Length >= IHL * 4;
         Identification : Identification;
         Flag_R : Boolean
            then Flag_DF
               if Flag_R = False;
         Flag_DF : Boolean;
         Flag_MF : Boolean;
         Fragment_Offset : Fragment_Offset;
         TTL : TTL;
         Protocol : Protocol;
         Header_Checksum : Header_Checksum;
         Source : Address;
         Destination : Address;
         Options : Options
            with Size => (IHL - 5) * 32;
         Payload : Opaque
            with Size => Total_Length * 8 - (IHL * 32);
      end message;

end IPv4;

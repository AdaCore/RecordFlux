from typing import Optional, Tuple, Iterable

class Context: ...
class ExprRef:
    def __eq__(self, other: ExprRef) -> BoolRef: ... #  type: ignore
    def __ne__(self, other: ExprRef) -> BoolRef: ... #  type: ignore

class ArithRef(ExprRef):
    def __sub__(self, other: ArithRef) -> ArithRef: ...
    def __add__(self, other: ArithRef) -> ArithRef: ...
    def __mul__(self, other: ArithRef) -> ArithRef: ...
    def __pow__(self, other: ArithRef) -> ArithRef: ...
    def __mod__(self, other: ArithRef) -> ArithRef: ...
    def __truediv__(self, other: ArithRef) -> ArithRef: ...
    def __gt__(self, other: ArithRef) -> BoolRef: ...
    def __ge__(self, other: ArithRef) -> BoolRef: ...
    def __lt__(self, other: ArithRef) -> BoolRef: ...
    def __le__(self, other: ArithRef) -> BoolRef: ...

    def __neg__(self) -> ArithRef: ...

class BoolRef(ExprRef): ...

def Int(name: str, ctx: Optional[Context] = None) -> ArithRef: ...
def IntVal(val: int, ctx: Optional[Context] = None) -> ArithRef: ...

def Bool(name: str, ctx: Optional[Context] = None) -> BoolRef: ...
def BoolVal(val: bool, ctx: Optional[Context] = None) -> BoolRef: ...

def Not(val: BoolRef, ctx: Optional[Context] = None) -> BoolRef: ...
def And(*args: BoolRef) -> BoolRef: ...
def Or(*args: BoolRef) -> BoolRef: ...
def If(c: BoolRef, t: ExprRef, e: ExprRef, ctx: Optional[Context] = None) -> ExprRef: ...

def simplify(e: ExprRef) -> ExprRef: ...

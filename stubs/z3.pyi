# ruff: noqa: N802, N818

from collections.abc import Iterable

class Context: ...

class ExprRef:
    def __eq__(self, other: ExprRef) -> BoolRef: ...  # type: ignore[override]
    def __ne__(self, other: ExprRef) -> BoolRef: ...  # type: ignore[override]

class BoolRef(ExprRef):
    def __gt__(self, other: BoolRef) -> BoolRef: ...
    def __ge__(self, other: BoolRef) -> BoolRef: ...
    def __lt__(self, other: BoolRef) -> BoolRef: ...
    def __le__(self, other: BoolRef) -> BoolRef: ...

class ArithRef(ExprRef):
    def is_int(self) -> bool: ...
    def __sub__(self, other: ArithRef) -> ArithRef: ...
    def __add__(self, other: ArithRef) -> ArithRef: ...
    def __mul__(self, other: ArithRef) -> ArithRef: ...
    def __pow__(self, other: ArithRef) -> ArithRef: ...
    def __mod__(self, other: ArithRef) -> ArithRef: ...
    def __truediv__(self, other: ArithRef) -> ArithRef: ...
    def __gt__(self, other: ArithRef) -> BoolRef: ...
    def __ge__(self, other: ArithRef) -> BoolRef: ...
    def __lt__(self, other: ArithRef) -> BoolRef: ...
    def __le__(self, other: ArithRef) -> BoolRef: ...
    def __neg__(self) -> ArithRef: ...

class IntNumRef(ArithRef):
    def as_long(self) -> int: ...
    def as_string(self) -> str: ...
    def as_binary_string(self) -> bytes: ...

class Z3PPObject: ...
class AstRef(Z3PPObject): ...
class SortRef(AstRef): ...

def DeclareSort(name: str) -> SortRef: ...
def Const(name: str, sort: SortRef) -> ExprRef: ...
def Int(name: str, ctx: Context | None = None) -> ArithRef: ...
def IntVal(val: int, ctx: Context | None = None) -> ArithRef: ...
def Sum(*args: ArithRef) -> ArithRef: ...
def Product(*args: ArithRef) -> ArithRef: ...
def Bool(name: str, ctx: Context | None = None) -> BoolRef: ...
def BoolVal(val: bool, ctx: Context | None = None) -> BoolRef: ...
def Not(val: BoolRef, ctx: Context | None = None) -> BoolRef: ...
def And(*args: BoolRef) -> BoolRef: ...
def Or(*args: BoolRef) -> BoolRef: ...
def If(c: BoolRef, t: ExprRef, e: ExprRef, ctx: Context | None = None) -> ExprRef: ...
def ForAll(v: Iterable[ExprRef], cond: ExprRef) -> ExprRef: ...
def Exists(v: Iterable[ExprRef], cond: ExprRef) -> ExprRef: ...
def simplify(e: ExprRef) -> ExprRef: ...

class CheckSatResult: ...

sat = CheckSatResult()
unsat = CheckSatResult()
unknown = CheckSatResult()

class Solver:
    def add(self, *expr: ExprRef) -> None: ...
    def check(self, *asns: ExprRef) -> CheckSatResult: ...
    def assert_and_track(self, expr: ExprRef, name: str) -> None: ...
    def unsat_core(self) -> Iterable[ExprRef]: ...
    def set(self, *args: object, **keys: object) -> None: ...
    def reason_unknown(self) -> str: ...

class SolverFor(Solver):
    def __init__(self, logic: str) -> None: ...

class OptimizeObjective:
    def lower(self) -> ExprRef: ...
    def upper(self) -> ExprRef: ...
    def value(self) -> ExprRef: ...

class Optimize:
    def add(self, *args: ExprRef) -> None: ...
    def maximize(self, arg: ExprRef) -> OptimizeObjective: ...
    def minimize(self, arg: ExprRef) -> OptimizeObjective: ...
    def check(self, *assumptions: ExprRef) -> CheckSatResult: ...

class Z3Exception(Exception):
    def __init__(self, value: str) -> None: ...

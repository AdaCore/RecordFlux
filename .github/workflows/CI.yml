name: CI

on:
  push:
  schedule:
    - cron:  '0 2 * * *'

jobs:
  Checks:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6]
        target: [black, isort, flake8, pylint, mypy, contracts, doc]
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Determine exact Python version
      run:
        python -c "import platform; print('::set-env name=PYTHON_VERSION::' + platform.python_version())"
    - name: Cache pip cache
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    - name: Cache Python ${{ matrix.python-version }} site packages
      uses: actions/cache@v1
      with:
        path: ~/.local/lib/python${{ matrix.python-version }}/site-packages
        key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-site-packages-${{ hashFiles('**/requirements.txt') }}
    - name: Cache .local/bin
      uses: actions/cache@v1
      with:
        path: ~/.local/bin
        key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-bin-${{ hashFiles('**/requirements.txt') }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --user -r requirements.txt
        mkdir $HOME/bin
        echo -e '#!/bin/sh\ndocker run -v $HOME:$HOME -w $PWD componolit/ci:gnat-community-2019 gprbuild $@' > $HOME/bin/gprbuild
        chmod +x $HOME/bin/gprbuild
        echo "::add-path::$HOME/.local/bin"
        echo "::add-path::$HOME/bin"
        echo "::set-env name=PYTHONPATH::$PWD"
    - name: Check
      run: |
        make check_${{ matrix.target }}

  Installation:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6]
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
    - name: Install
      run: |
        python setup.py sdist
        pip install RecordFlux --user --no-deps --no-index --find-links dist/*

  tests_python:
    name: Tests Python
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: ["python"]
        python-version: [3.6, 3.7, 3.8]
        include:
          - target: "python_optimized"
            python-version: 3.8
          - target: "python_coverage"
            python-version: 3.8
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Determine exact Python version
      run:
        python -c "import platform; print('::set-env name=PYTHON_VERSION::' + platform.python_version())"
    - name: Cache pip cache
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    - name: Cache Python ${{ matrix.python-version }} site packages
      uses: actions/cache@v1
      with:
        path: ~/.local/lib/python${{ matrix.python-version }}/site-packages
        key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-site-packages-${{ hashFiles('**/requirements.txt') }}
    - name: Cache .local/bin
      uses: actions/cache@v1
      with:
        path: ~/.local/bin
        key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-bin-${{ hashFiles('**/requirements.txt') }}
    - name: Install dependencies
      run: |
        sudo apt install graphviz
        python -m pip install --upgrade pip
        pip install --user -r requirements.txt
        mkdir $HOME/bin
        echo -e '#!/bin/sh\ndocker run -v $HOME:$HOME -w $PWD componolit/ci:gnat-community-2019 gprbuild $@' > $HOME/bin/gprbuild
        chmod +x $HOME/bin/gprbuild
        echo "::add-path::$HOME/.local/bin"
        echo "::add-path::$HOME/bin"
        echo "::set-env name=PYTHONPATH::$PWD"
    - name: Test
      run: |
        make test_${{ matrix.target }}
    - name: Create coverage report
      if: matrix.target == 'python_coverage'
      run: |
        coverage report
        coverage xml
    - name: Upload coverage to Codecov
      if: matrix.target == 'python_coverage'
      uses: codecov/codecov-action@v1.0.2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml

  tests_gnat_community:
    name: Tests GNAT Community
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [
          "spark",
          "spark NOPREFIX=1",
          "spark_optimized",
          ]
    steps:
    - uses: actions/checkout@v1
    - name: Test
      run: |
        docker run -v $PWD:/app -w /app componolit/ci:gnat-community-2019 /bin/sh -c "make test_${{ matrix.target }}"

  tests_gnat_fsf:
    name: Tests GNAT FSF
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Test
      run: |
        docker run -v $PWD:/app -w /app componolit/ci:gnat-fsf-8.3 /bin/sh -c "make test_spark"

  runtime_compatibility:
    name: Runtime compatibility
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Build runtime
      run: |
        git clone -b v1.1.0 --depth 1 https://github.com/Componolit/ada-runtime
        docker run -v $PWD:/app -w /app componolit/ci:gnat-community-2019 /bin/sh -c "make -C ada-runtime"
    - name: Build
      run: |
        docker run -v $PWD:/app -w /app componolit/ci:gnat-community-2019 /bin/sh -c "gprbuild -Ptest --RTS=ada-runtime/obj -Xaunit=no -Xoptimization=yes"

  verification:
    name: Verification
    if: github.event.schedule
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [
          "spark",
          "spark_cvc4",
          ]
        type: ["clean"]
        include:
          - target: "spark"
            type: "cached"
    steps:
    - uses: actions/checkout@v1
    - name: Install SPARK
      run: |
        wget -q --show-progress ${{ secrets.SPARK_URL }} -O spark.tgz.gpg
        gpg --batch --yes --passphrase ${{ secrets.SPARK_SECRET }} --output spark.tgz -d spark.tgz.gpg
        tar xzf spark.tgz
        echo "::add-path::spark/bin"
    - name: Cache GNATprove results
      if: matrix.type == 'cached'
      uses: actions/cache@v1
      with:
        path: build/gnatprove
        key: ${{ runner.os }}-gnatprove-${{ matrix.target }}
    - name: Test
      run: |
        make prove_${{ matrix.target }}
    - name: Clean up
      run: |
        rm -rf spark{,.tgz{,.gpg}}

  verification_cached:
    name: Verification
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [
          "spark",
          ]
        type: ["cached"]
    steps:
    - uses: actions/checkout@v1
    - name: Install SPARK
      run: |
        wget -q --show-progress ${{ secrets.SPARK_URL }} -O spark.tgz.gpg
        gpg --batch --yes --passphrase ${{ secrets.SPARK_SECRET }} --output spark.tgz -d spark.tgz.gpg
        tar xzf spark.tgz
        echo "::add-path::spark/bin"
    - name: Cache GNATprove results
      uses: actions/cache@v1
      with:
        path: build/gnatprove
        key: ${{ runner.os }}-gnatprove-${{ matrix.target }}
    - name: Test
      run: |
        make prove_${{ matrix.target }}
    - name: Clean up
      run: |
        rm -rf spark{,.tgz{,.gpg}}

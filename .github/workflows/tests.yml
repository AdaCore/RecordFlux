name: tests

on:
  push:
  schedule:
    - cron:  '0 2 * * *'

jobs:
  Checks:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7]
        target: [packages, dependencies, black, isort, flake8, pylint, mypy, contracts, doc]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Determine exact Python version
      run:
        echo "PYTHON_VERSION=$(python -c 'import platform; print(platform.python_version())')" >> $GITHUB_ENV
    - name: Cache Python dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ matrix.python-version }}/site-packages
          ~/.local/bin
        key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('setup.py', '*.cfg', '*.ini', '.pylintrc', '.flake8') }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel
        pip install --user -e .[devel]
        mkdir $HOME/bin
        echo -e '#!/bin/sh\ndocker run -u $(id -u):$(id -g) -v /tmp:/tmp -v $HOME:$HOME -w $PWD componolit/ci:gnat-community-2020 gprbuild $@' > $HOME/bin/gprbuild
        chmod +x $HOME/bin/gprbuild
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        echo "$HOME/bin" >> $GITHUB_PATH
        echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
        sudo apt install libgmp-dev patchelf
        python -m pip install --upgrade pip wheel
        PATH="$HOME/bin:$PATH" pip install .[devel]
    - name: Check
      run: |
        make check_${{ matrix.target }}

  Installation:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [3.7]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel
    - name: Install
      run: |
        python setup.py sdist
        pip install RecordFlux --no-deps --no-index --find-links dist/

  tests_python:
    name: Tests
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        target: ["python"]
        python-version: [3.7, 3.8, 3.9]
        include:
          - target: "python_unit"
            python-version: 3.7
          - target: "python_property"
            python-version: 3.7
          - target: "python_optimized"
            python-version: 3.7
          - target: "python_coverage"
            python-version: 3.7
          - target: "examples"
            python-version: 3.7
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Determine exact Python version
      run:
        echo "PYTHON_VERSION=$(python -c 'import platform; print(platform.python_version())')" >> $GITHUB_ENV
    - name: Cache Python dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ matrix.python-version }}/site-packages
          ~/.local/bin
        key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('setup.py', '*.cfg', '*.ini', '.pylintrc', '.flake8') }}
    - name: Install dependencies
      run: |
        sudo apt install graphviz
        python -m pip install --upgrade pip wheel
        pip install --user -e .[devel]
        mkdir $HOME/bin
        echo -e '#!/bin/sh\ndocker run -u $(id -u):$(id -g) -v /tmp:/tmp -v $HOME:$HOME -w $PWD componolit/ci:gnat-community-2020 gprbuild $@' > $HOME/bin/gprbuild
        chmod +x $HOME/bin/gprbuild
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        echo "$HOME/bin" >> $GITHUB_PATH
        echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
        echo "HYPOTHESIS_PROFILE=ci" >> $GITHUB_ENV
        echo "PYTEST_ADDOPTS=--basetemp=build" >> $GITHUB_ENV
        sudo apt install graphviz libgmp-dev patchelf
        python -m pip install --upgrade pip wheel
        PATH="$HOME/bin:$PATH" pip install .[devel] -vv
    - name: Configure kernel parameters
      run: |
        sudo /sbin/sysctl -w net.ipv4.ping_group_range="0 2147483647"
    - name: Test
      run: |
        make test_${{ matrix.target }}

  tests_python_verification:
    name: Tests
    if: github.event.schedule
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        target: ["python_verification"]
        python-version: [3.8]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Determine exact Python version
      run:
        echo "PYTHON_VERSION=$(python -c 'import platform; print(platform.python_version())')" >> $GITHUB_ENV
    - name: Cache Python dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ matrix.python-version }}/site-packages
          ~/.local/bin
        key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('setup.py', '*.cfg', '*.ini', '.pylintrc', '.flake8') }}
    - name: Install dependencies
      run: |
        sudo apt install graphviz
        python -m pip install --upgrade pip wheel
        pip install --user -e .[devel]
        mkdir $HOME/bin
        echo -e '#!/bin/sh\ndocker run -u $(id -u):$(id -g) -v /tmp:/tmp -v $HOME:$HOME -w $PWD componolit/ci:gnat-community-2020 gprbuild $@' > $HOME/bin/gprbuild
        chmod +x $HOME/bin/gprbuild
        echo -e '#!/bin/sh\ndocker run -u $(id -u):$(id -g) -v /tmp:/tmp -v $HOME:$HOME -w $PWD componolit/ci:gnat-community-2020 gnatprove $@' > $HOME/bin/gnatprove
        chmod +x $HOME/bin/gnatprove
        echo -e '#!/bin/sh\ndocker run -u $(id -u):$(id -g) -v /tmp:/tmp -v $HOME:$HOME -w $PWD componolit/ci:gnat-community-2020 gnatprove $@' > $HOME/bin/gnatpp
        chmod +x $HOME/bin/gnatpp
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        echo "$HOME/bin" >> $GITHUB_PATH
        echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
        echo "HYPOTHESIS_PROFILE=ci" >> $GITHUB_ENV
        echo "PYTEST_ADDOPTS=--basetemp=build" >> $GITHUB_ENV
        sudo apt install graphviz libgmp-dev patchelf
        python -m pip install --upgrade pip wheel
        PATH="$HOME/bin:$PATH" pip install .[devel] -vv
    - name: Test
      run: |
        make test_${{ matrix.target }}

  tests_spark:
    name: Tests
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        target:
          - "spark"
          - "spark NOPREFIX=1"
          - "spark_optimized"
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Install GNAT
      run: |
        mkdir $HOME/bin
        echo -e '#!/bin/sh\ndocker run -u $(id -u):$(id -g) -v /tmp:/tmp -v $HOME:$HOME -w $PWD componolit/ci:gnat-community-2020 gprbuild $@' > $HOME/bin/gprbuild
        chmod +x $HOME/bin/gprbuild
        echo "$HOME/bin" >> $GITHUB_PATH
    - name: Test
      run: |
        make test_${{ matrix.target }}

  runtime_compatibility:
    name: Runtime compatibility
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Install GNAT
      run: |
        mkdir $HOME/bin
        echo -e '#!/bin/sh\ndocker run -u $(id -u):$(id -g) -v /tmp:/tmp -v $HOME:$HOME -w $PWD componolit/ci:gnat-community-2020 gprbuild $@' > $HOME/bin/gprbuild
        chmod +x $HOME/bin/gprbuild
        echo "$HOME/bin" >> $GITHUB_PATH
    - name: Build runtime
      run: |
        git clone https://github.com/Componolit/ada-runtime
        cd ada-runtime
        git checkout 280a4867f1d872412aec00f35aa28b35ff295e60
        cd ..
        docker run -u $(id -u):$(id -g) -v $PWD:/app -w /app componolit/ci:gnat-community-2020 /bin/sh -c "make -C ada-runtime"
    - name: Build
      run: |
        gprbuild -Ptest --RTS=ada-runtime/build/posix/obj -Xaunit=no -Xoptimization=yes

  verification:
    name: Verification
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        target:
          - "tests TEST=builtin_types"
          - "tests TEST=custom_types"
          - "tests TEST=ethernet"
          - "tests TEST=ipv4"
          - "tests TEST=tlv"
          - "tests TEST=in_tlv"
          - "tests TEST=enumeration"
          - "tests TEST=arrays"
          - "tests TEST=derivation"
          - "tests TEST=expression"
          - "apps"
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Determine exact Python version
      run:
        echo "PYTHON_VERSION=$(python -c 'import platform; print(platform.python_version())')" >> $GITHUB_ENV
    - name: Cache Python dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ matrix.python-version }}/site-packages
          ~/.local/bin
        key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('setup.py', '*.cfg', '*.ini', '.pylintrc', '.flake8') }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel
        pip install --user -e .[devel]
        mkdir $HOME/bin
        echo -e '#!/bin/sh\ndocker run -u $(id -u):$(id -g) -v $HOME:$HOME -w $PWD componolit/ci:gnat-community-2020 gnatprove $@' > $HOME/bin/gnatprove
        chmod +x $HOME/bin/gnatprove
        echo -e '#!/bin/sh\ndocker run -u $(id -u):$(id -g) -v $HOME:$HOME -w $PWD componolit/ci:gnat-community-2020 run_spat $@' > $HOME/bin/run_spat
        chmod +x $HOME/bin/run_spat
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        echo "$HOME/bin" >> $GITHUB_PATH
        echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
        sudo apt install libgmp-dev patchelf
        python -m pip install --upgrade pip wheel
        PATH="$HOME/bin:$PATH" pip install .[devel]
    - name: Verify
      run: |
        make prove_${{ matrix.target }}
    - name: Show proof results
      if: ${{ always() }}
      run: |
        run_spat -Ptest -ca -ra
        run_spat -Ptest -ca -ra -d
        run_spat -Ptest -g

  verification_scheduled:
    name: Verification
    if: github.event.schedule
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        target:
          - "tests TEST=in_ethernet"
          - "tests TEST=in_ipv4"
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Determine exact Python version
      run:
        echo "PYTHON_VERSION=$(python -c 'import platform; print(platform.python_version())')" >> $GITHUB_ENV
    - name: Cache Python dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ matrix.python-version }}/site-packages
          ~/.local/bin
        key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('setup.py', '*.cfg', '*.ini', '.pylintrc', '.flake8') }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel
        pip install --user -e .[devel]
        mkdir $HOME/bin
        echo -e '#!/bin/sh\ndocker run -u $(id -u):$(id -g) -v $HOME:$HOME -w $PWD componolit/ci:gnat-community-2020 gnatprove $@' > $HOME/bin/gnatprove
        chmod +x $HOME/bin/gnatprove
        echo -e '#!/bin/sh\ndocker run -u $(id -u):$(id -g) -v $HOME:$HOME -w $PWD componolit/ci:gnat-community-2020 run_spat $@' > $HOME/bin/run_spat
        chmod +x $HOME/bin/run_spat
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        echo "$HOME/bin" >> $GITHUB_PATH
        echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
        sudo apt install libgmp-dev patchelf
        python -m pip install --upgrade pip wheel
        PATH="$HOME/bin:$PATH" pip install .[devel]
    - name: Verify
      run: |
        make prove_${{ matrix.target }}
    - name: Show proof results
      if: ${{ always() }}
      run: |
        run_spat -Ptest -ca -ra
        run_spat -Ptest -ca -ra -d
        run_spat -Ptest -g

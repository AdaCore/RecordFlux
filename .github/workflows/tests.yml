name: tests

on:
  push:
  schedule:
    - cron:  '0 2 * * *'

jobs:
  skip_check_general:
    name: Skip Check General
    continue-on-error: true
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v3.4.0
        with:
          paths_ignore: '["*.gpr", "examples/apps/**", "tests/spark/**"]'

  checks:
    name: Checks
    needs: skip_check_general
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        target: [packages, dependencies, black, isort, flake8, pylint, mypy, contracts, doc]
    steps:
    - uses: actions/checkout@v2
      if: ${{ needs.skip_check_general.outputs.should_skip != 'true' }}
      with:
        submodules: true
    - name: Set up Python
      if: ${{ needs.skip_check_general.outputs.should_skip != 'true' }}
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Determine exact Python version
      if: ${{ needs.skip_check_general.outputs.should_skip != 'true' }}
      run:
        echo "PYTHON_VERSION=$(python -c 'import platform; print(platform.python_version())')" >> $GITHUB_ENV
    - name: Cache Python dependencies
      if: ${{ needs.skip_check_general.outputs.should_skip != 'true' }}
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ matrix.python-version }}/site-packages
          ~/.local/bin
        key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('setup.py', '*.cfg', '*.ini', '.pylintrc', '.flake8') }}
    - name: Install toolchain
      if: ${{ needs.skip_check_general.outputs.should_skip != 'true' }}
      uses: ada-actions/toolchain@ce2020
      with:
        distrib: community
    - name: Install dependencies
      if: ${{ needs.skip_check_general.outputs.should_skip != 'true' }}
      run: |
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
        sudo apt install libgmp-dev patchelf
        python -m pip install --upgrade pip wheel
        pip install .[devel]
    - name: Check
      if: ${{ needs.skip_check_general.outputs.should_skip != 'true' }}
      run: |
        make check_${{ matrix.target }}

  installation:
    name: Installation
    needs: skip_check_general
    if: ${{ needs.skip_check_python.outputs.should_skip != 'true' }}
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel
    - name: Install
      run: |
        python setup.py sdist
        pip install RecordFlux --no-deps --no-index --find-links dist/

  skip_check_python:
    name: Skip Check Python
    continue-on-error: true
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v3.4.0
        with:
          paths: '["rflx/**", "tests/**"]'
          paths_ignore: '["tests/spark/**"]'

  tests_python:
    name: Tests
    needs: skip_check_python
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        target: ["python"]
        python-version: [3.7, 3.8, 3.9]
        include:
          - target: "python_unit"
            python-version: 3.7
          - target: "python_property"
            python-version: 3.7
          - target: "python_optimized"
            python-version: 3.7
          - target: "python_coverage"
            python-version: 3.7
    steps:
    - uses: actions/checkout@v2
      if: ${{ needs.skip_check_python.outputs.should_skip != 'true' }}
      with:
        submodules: true
    - name: Set up Python ${{ matrix.python-version }}
      if: ${{ needs.skip_check_python.outputs.should_skip != 'true' }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Determine exact Python version
      if: ${{ needs.skip_check_python.outputs.should_skip != 'true' }}
      run:
        echo "PYTHON_VERSION=$(python -c 'import platform; print(platform.python_version())')" >> $GITHUB_ENV
    - name: Cache Python dependencies
      if: ${{ needs.skip_check_python.outputs.should_skip != 'true' }}
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ matrix.python-version }}/site-packages
          ~/.local/bin
        key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('setup.py', '*.cfg', '*.ini', '.pylintrc', '.flake8') }}
    - name: Install toolchain
      if: ${{ needs.skip_check_python.outputs.should_skip != 'true' }}
      uses: ada-actions/toolchain@ce2020
      with:
        distrib: community
    - name: Install dependencies
      if: ${{ needs.skip_check_python.outputs.should_skip != 'true' }}
      run: |
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
        echo "HYPOTHESIS_PROFILE=ci" >> $GITHUB_ENV
        echo "PYTEST_ADDOPTS=--basetemp=build" >> $GITHUB_ENV
        sudo apt install graphviz libgmp-dev patchelf
        python -m pip install --upgrade pip wheel
        pip install .[devel]
    - name: Configure kernel parameters
      if: ${{ needs.skip_check_python.outputs.should_skip != 'true' }}
      run: |
        sudo /sbin/sysctl -w net.ipv4.ping_group_range="0 2147483647"
    - name: Test
      if: ${{ needs.skip_check_python.outputs.should_skip != 'true' }}
      run: |
        make test_${{ matrix.target }}

  verification_python_scheduled:
    name: Verification
    if: github.event.schedule
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        target: ["python_verification"]
        python-version: [3.7]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Determine exact Python version
      run:
        echo "PYTHON_VERSION=$(python -c 'import platform; print(platform.python_version())')" >> $GITHUB_ENV
    - name: Cache Python dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ matrix.python-version }}/site-packages
          ~/.local/bin
        key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('setup.py', '*.cfg', '*.ini', '.pylintrc', '.flake8') }}
    - name: Install toolchain
      uses: ada-actions/toolchain@ce2020
      with:
        distrib: community
    - name: Install dependencies
      run: |
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
        echo "HYPOTHESIS_PROFILE=ci" >> $GITHUB_ENV
        echo "PYTEST_ADDOPTS=--basetemp=build" >> $GITHUB_ENV
        sudo apt install graphviz libgmp-dev patchelf
        python -m pip install --upgrade pip wheel
        pip install .[devel]
    - name: Test
      run: |
        make test_${{ matrix.target }}

  skip_check_spark:
    name: Skip Check SPARK
    continue-on-error: true
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v3.4.0
        with:
          paths: '["*.gpr", "tests/spark/**"]'

  tests_spark:
    name: Tests
    needs: skip_check_spark
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        target:
          - "spark"
          - "spark NOPREFIX=1"
          - "spark_optimized"
    steps:
    - uses: actions/checkout@v2
      if: ${{ needs.skip_check_spark.outputs.should_skip != 'true' }}
      with:
        submodules: true
    - name: Install toolchain
      if: ${{ needs.skip_check_spark.outputs.should_skip != 'true' }}
      uses: ada-actions/toolchain@ce2020
      with:
        distrib: community
    - name: Test
      if: ${{ needs.skip_check_spark.outputs.should_skip != 'true' }}
      run: |
        make test_${{ matrix.target }}

  runtime_compatibility:
    name: Runtime compatibility
    needs: skip_check_spark
    if: ${{ needs.skip_check_spark.outputs.should_skip != 'true' }}
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Install toolchain
      uses: ada-actions/toolchain@ce2020
      with:
        distrib: community
    - name: Build runtime
      run: |
        git clone https://github.com/Componolit/ada-runtime
        cd ada-runtime
        git checkout 280a4867f1d872412aec00f35aa28b35ff295e60
        cd ..
        make -C ada-runtime
    - name: Build
      run: |
        gprbuild -Ptest --RTS=ada-runtime/build/posix/obj -Xaunit=no -Xoptimization=yes

  verification_spark:
    name: Verification
    needs: skip_check_spark
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        test:
          - "builtin_types"
          - "custom_types"
          - "ethernet"
          - "ipv4"
          - "tlv"
          - "in_tlv"
          - "enumeration"
          - "sequence"
          - "derivation"
          - "expression"
    steps:
    - uses: actions/checkout@v2
      if: ${{ needs.skip_check_spark.outputs.should_skip != 'true' }}
      with:
        submodules: true
    - name: Set up Python
      if: ${{ needs.skip_check_spark.outputs.should_skip != 'true' }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Determine exact Python version
      if: ${{ needs.skip_check_spark.outputs.should_skip != 'true' }}
      run:
        echo "PYTHON_VERSION=$(python -c 'import platform; print(platform.python_version())')" >> $GITHUB_ENV
    - name: Cache Python dependencies
      if: ${{ needs.skip_check_spark.outputs.should_skip != 'true' }}
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ matrix.python-version }}/site-packages
          ~/.local/bin
        key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('setup.py', '*.cfg', '*.ini', '.pylintrc', '.flake8') }}
    - name: Install toolchain
      if: ${{ needs.skip_check_spark.outputs.should_skip != 'true' }}
      uses: ada-actions/toolchain@ce2020
      with:
        distrib: community
    - name: Install dependencies
      if: ${{ needs.skip_check_spark.outputs.should_skip != 'true' }}
      run: |
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
        sudo apt install libgmp-dev patchelf
        python -m pip install --upgrade pip wheel
        pip install .[devel]
    - name: Verify
      if: ${{ needs.skip_check_spark.outputs.should_skip != 'true' }}
      run: |
        make prove_tests TEST=${{ matrix.test }}

  verification_spark_scheduled:
    name: Verification
    if: github.event.schedule
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        test:
          - "in_ethernet"
          - "in_ipv4"
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Determine exact Python version
      run:
        echo "PYTHON_VERSION=$(python -c 'import platform; print(platform.python_version())')" >> $GITHUB_ENV
    - name: Cache Python dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ matrix.python-version }}/site-packages
          ~/.local/bin
        key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('setup.py', '*.cfg', '*.ini', '.pylintrc', '.flake8') }}
    - name: Install toolchain
      uses: ada-actions/toolchain@ce2020
      with:
        distrib: community
    - name: Install dependencies
      run: |
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
        sudo apt install libgmp-dev patchelf
        python -m pip install --upgrade pip wheel
        pip install .[devel]
    - name: Verify
      run: |
        make prove_tests TEST=${{ matrix.test }}

  skip_check_apps:
    name: Skip Check Apps
    continue-on-error: true
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v3.4.0
        with:
          paths: '["defaults.gpr", "examples/apps/**", "rflx/**"]'

  tests_apps:
    name: Tests (apps)
    needs: skip_check_apps
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - 3.7
          - 3.8
          - 3.9
    steps:
    - uses: actions/checkout@v2
      if: ${{ needs.skip_check_apps.outputs.should_skip != 'true' }}
      with:
        submodules: true
    - name: Set up Python ${{ matrix.python-version }}
      if: ${{ needs.skip_check_apps.outputs.should_skip != 'true' }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Determine exact Python version
      if: ${{ needs.skip_check_apps.outputs.should_skip != 'true' }}
      run:
        echo "PYTHON_VERSION=$(python -c 'import platform; print(platform.python_version())')" >> $GITHUB_ENV
    - name: Cache Python dependencies
      if: ${{ needs.skip_check_apps.outputs.should_skip != 'true' }}
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ matrix.python-version }}/site-packages
          ~/.local/bin
        key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('setup.py', '*.cfg', '*.ini', '.pylintrc', '.flake8') }}
    - name: Install toolchain
      if: ${{ needs.skip_check_apps.outputs.should_skip != 'true' }}
      uses: ada-actions/toolchain@ce2020
      with:
        distrib: community
    - name: Install dependencies
      if: ${{ needs.skip_check_apps.outputs.should_skip != 'true' }}
      run: |
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
        echo "HYPOTHESIS_PROFILE=ci" >> $GITHUB_ENV
        echo "PYTEST_ADDOPTS=--basetemp=build" >> $GITHUB_ENV
        sudo apt install graphviz libgmp-dev patchelf
        python -m pip install --upgrade pip wheel
        pip install .[devel]
    - name: Configure kernel parameters
      if: ${{ needs.skip_check_apps.outputs.should_skip != 'true' }}
      run: |
        sudo /sbin/sysctl -w net.ipv4.ping_group_range="0 2147483647"
    - name: Test
      if: ${{ needs.skip_check_apps.outputs.should_skip != 'true' }}
      run: |
        make test_apps

  verification_apps:
    name: Verification (apps)
    needs: skip_check_apps
    if: ${{ needs.skip_check_apps.outputs.should_skip != 'true' }}
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Determine exact Python version
      run:
        echo "PYTHON_VERSION=$(python -c 'import platform; print(platform.python_version())')" >> $GITHUB_ENV
    - name: Cache Python dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ matrix.python-version }}/site-packages
          ~/.local/bin
        key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('setup.py', '*.cfg', '*.ini', '.pylintrc', '.flake8') }}
    - name: Install toolchain
      uses: ada-actions/toolchain@ce2020
      with:
        distrib: community
    - name: Install dependencies
      run: |
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
        sudo apt install libgmp-dev patchelf
        python -m pip install --upgrade pip wheel
        pip install .[devel]
    - name: Verify
      run: |
        make prove_apps

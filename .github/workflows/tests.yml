name: tests

on:
  push:
  schedule:
    - cron:  '0 2 * * *'

jobs:
  Checks:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6]
        target: [black, isort, flake8, pylint, mypy, contracts, doc]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Determine exact Python version
      run:
        python -c "import platform; print('::set-env name=PYTHON_VERSION::' + platform.python_version())"
    - name: Cache Python dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ matrix.python-version }}/site-packages
          ~/.local/bin
        key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements.txt') }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --user -r requirements.txt
        mkdir $HOME/bin
        echo -e '#!/bin/sh\ndocker run -u $(id -u):$(id -g) -v $HOME:$HOME -w $PWD componolit/ci:gnat-community-2020 gprbuild $@' > $HOME/bin/gprbuild
        chmod +x $HOME/bin/gprbuild
        echo "::add-path::$HOME/.local/bin"
        echo "::add-path::$HOME/bin"
        echo "::set-env name=PYTHONPATH::$PWD"
    - name: Check
      run: |
        make check_${{ matrix.target }}

  Installation:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
    - name: Install
      run: |
        python setup.py sdist
        pip install RecordFlux --user --no-deps --no-index --find-links dist/*

  tests_python:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: ["python"]
        python-version: [3.6, 3.7, 3.8]
        include:
          - target: "python_optimized"
            python-version: 3.8
          - target: "python_coverage"
            python-version: 3.8
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Determine exact Python version
      run:
        python -c "import platform; print('::set-env name=PYTHON_VERSION::' + platform.python_version())"
    - name: Cache Python dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ matrix.python-version }}/site-packages
          ~/.local/bin
        key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements.txt') }}
    - name: Install dependencies
      run: |
        sudo apt install graphviz
        python -m pip install --upgrade pip
        pip install --user -r requirements.txt
        mkdir $HOME/bin
        echo -e '#!/bin/sh\ndocker run -u $(id -u):$(id -g) -v $HOME:$HOME -w $PWD componolit/ci:gnat-community-2020 gprbuild $@' > $HOME/bin/gprbuild
        chmod +x $HOME/bin/gprbuild
        echo "::add-path::$HOME/.local/bin"
        echo "::add-path::$HOME/bin"
        echo "::set-env name=PYTHONPATH::$PWD"
    - name: Configure kernel parameters
      run: |
        sudo /sbin/sysctl -w net.ipv4.ping_group_range="0 2147483647"
    - name: Test
      run: |
        make test_${{ matrix.target }}
    - name: Create coverage report
      if: matrix.target == 'python_coverage'
      run: |
        coverage report
        coverage xml
    - name: Upload coverage to Codecov
      if: matrix.target == 'python_coverage'
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml

  tests_spark:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - "spark"
          - "spark NOPREFIX=1"
          - "spark_optimized"
    steps:
    - uses: actions/checkout@v2
    - name: Install GNAT
      run: |
        mkdir $HOME/bin
        echo -e '#!/bin/sh\ndocker run -u $(id -u):$(id -g) -v $HOME:$HOME -w $PWD componolit/ci:gnat-community-2020 gprbuild $@' > $HOME/bin/gprbuild
        chmod +x $HOME/bin/gprbuild
        echo "::add-path::$HOME/bin"
    - name: Test
      run: |
        make test_${{ matrix.target }}

  runtime_compatibility:
    name: Runtime compatibility
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install GNAT
      run: |
        mkdir $HOME/bin
        echo -e '#!/bin/sh\ndocker run -u $(id -u):$(id -g) -v $HOME:$HOME -w $PWD componolit/ci:gnat-community-2020 gprbuild $@' > $HOME/bin/gprbuild
        chmod +x $HOME/bin/gprbuild
        echo "::add-path::$HOME/bin"
    - name: Build runtime
      run: |
        git clone https://github.com/Componolit/ada-runtime
        cd ada-runtime
        git checkout 280a4867f1d872412aec00f35aa28b35ff295e60
        cd ..
        docker run -u $(id -u):$(id -g) -v $PWD:/app -w /app componolit/ci:gnat-community-2020 /bin/sh -c "make -C ada-runtime"
    - name: Build
      run: |
        gprbuild -Ptest --RTS=ada-runtime/build/posix/obj -Xaunit=no -Xoptimization=yes

  verification:
    name: Verification
    if: github.event.schedule
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - "spark"
        type:
          - "clean"
    steps:
    - uses: actions/checkout@v2
    - name: Install SPARK
      run: |
        mkdir $HOME/bin
        echo -e '#!/bin/sh\ndocker run -u $(id -u):$(id -g) -v $HOME:$HOME -w $PWD componolit/ci:gnat-community-2020 gnatprove $@' > $HOME/bin/gnatprove
        chmod +x $HOME/bin/gnatprove
        echo "::add-path::$HOME/bin"
    - name: Test
      run: |
        make prove_${{ matrix.target }}

  verification_cached:
    name: Verification
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - "spark"
        type:
          - "cached"
    steps:
    - uses: actions/checkout@v2
    - name: Install SPARK
      run: |
        mkdir $HOME/bin
        echo -e '#!/bin/sh\ndocker run -u $(id -u):$(id -g) -v $HOME:$HOME -w $PWD componolit/ci:gnat-community-2020 gnatprove $@' > $HOME/bin/gnatprove
        chmod +x $HOME/bin/gnatprove
        echo "::add-path::$HOME/bin"
    - name: Cache GNATprove results
      uses: actions/cache@v2
      with:
        path: build/gnatprove
        key: ${{ runner.os }}-gnatprove2020-${{ matrix.target }}
    - name: Test
      run: |
        make prove_${{ matrix.target }}

name: tests

on:
  push:
  schedule:
    - cron:  '40 20 * * *'

concurrency:
    group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
    cancel-in-progress: true

env:
    ALIRE_VERSION: "1.2.0"
    SPARK_VERSION: "24.0w-20221214"
    GNAT_VERSION: "23.0w-20220723"

jobs:
  checks:
    name: Checks
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        target:
          - packages
          - dependencies
          - black
          - isort
          - flake8
          - pylint
          - mypy
          - pydocstyle
          - contracts
          - doc
    env:
      python-version: "3.10"
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.python-version }}
    - name: Determine exact Python version
      run:
        echo "PYTHON_VERSION=$(python -c 'import platform; print(platform.python_version())')" >> $GITHUB_ENV
    - name: Cache Python dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ env.python-version }}/site-packages
          ~/.local/bin
        key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('setup.py', '.config/python-style/setup.cfg') }}
    - name: Cache GNAT Community
      uses: actions/cache@v2
      with:
        path: /home/runner/work/gnat
        key: ${{ runner.os }}-gnat-ce2021
    - name: Install GNAT Community
      uses: ada-actions/toolchain@ce2021
      with:
        distrib: community
        install_dir: /home/runner/work/gnat
    - name: Install dependencies
      run: |
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
        sudo apt install libgmp-dev patchelf
        python -m pip install --upgrade pip wheel
        make init install_devel
    - name: Check
      run: |
        make check_${{ matrix.target }}

  installation:
    name: Installation
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.8"
    - name: Cache GNAT Community
      uses: actions/cache@v2
      with:
        path: /home/runner/work/gnat
        key: ${{ runner.os }}-gnat-ce2021
    - name: Install GNAT Community
      uses: ada-actions/toolchain@ce2021
      with:
        distrib: community
        install_dir: /home/runner/work/gnat
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel virtualenv
    - name: Install
      run: |
        make test_installation

  tests_python:
    name: Tests
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        target:
          - "coverage"
        python-version:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
        include:
          - target: "unit_coverage"
            python-version: "3.11"
          - target: "property"
            python-version: "3.8"
          - target: "optimized"
            python-version: "3.8"
          - target: "tools"
            python-version: "3.8"
          - target: "ide"
            python-version: "3.8"
    env:
      GNAT: "pro23.0w-20220723"
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Determine exact Python version
      run:
        echo "PYTHON_VERSION=$(python -c 'import platform; print(platform.python_version())')" >> $GITHUB_ENV
    - name: Cache Python dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ matrix.python-version }}/site-packages
          ~/.local/bin
        key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ env.GNAT }}-${{ hashFiles('setup.py', '.config/python-style/setup.cfg', 'Makefile') }}
    - name: Install GNAT Pro
      uses: ./.github/actions/install_gnat_pro
      with:
        version: ${{ env.GNAT_VERSION }}
        ssh_key: ${{ secrets.MEMCACHED_SSH_KEY }}
        server: ${{ secrets.MEMCACHED_SERVER }}
    - name: Install dependencies
      run: |
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
        echo "HYPOTHESIS_PROFILE=ci" >> $GITHUB_ENV
        sudo apt install graphviz libgmp-dev patchelf
        python -m pip install --upgrade pip wheel
        make init install_devel
    - name: Test
      run: |
        eval `make printenv_gnat`
        gnat --version
        make test_${{ matrix.target }}

  compilation:
    name: Compilation
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        gnat-distrib:
          - "community"
        gnat-version:
          - "2020"
          - "2021"
        include:
          - gnat-distrib: "pro"
            gnat-version: "20.2"
          - gnat-distrib: "pro"
            gnat-version: "21.2"
          - gnat-distrib: "pro"
            gnat-version: "22.2"
          - gnat-distrib: "pro"
            gnat-version: "23.0w-20220723"
          - gnat-distrib: "fsf"
            gnat-version: "11.2.4"
          - gnat-distrib: "fsf"
            gnat-version: "12.1.2"
    env:
      python-version: "3.8"
      GNAT: ${{ matrix.gnat-distrib }}${{ matrix.gnat-version }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Python ${{ env.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}
      - name: Determine exact Python version
        run:
          echo "PYTHON_VERSION=$(python -c 'import platform; print(platform.python_version())')" >> $GITHUB_ENV
      - name: Cache Python dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python${{ env.python-version }}/site-packages
            ~/.local/bin
          key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ matrix.gnat-distrib }}${{ matrix.gnat-version }}-${{ hashFiles('setup.py', '.config/python-style/setup.cfg', 'Makefile') }}
      - name: Cache GNAT Community
        if: ${{ matrix.gnat-distrib == 'community' }}
        uses: actions/cache@v2
        with:
          path: /home/runner/work/gnat
          key: ${{ runner.os }}-gnat-ce${{ matrix.gnat-version }}
      - name: Install GNAT Community
        if: ${{ matrix.gnat-distrib == 'community' }}
        uses: ada-actions/toolchain@ce2021
        with:
          distrib: community
          community_year: ${{ matrix.gnat-version }}
          install_dir: /home/runner/work/gnat
      - name: Install GNAT Pro
        if: ${{ matrix.gnat-distrib == 'pro' }}
        uses: ./.github/actions/install_gnat_pro
        with:
          version: ${{ matrix.gnat-version }}
          ssh_key: ${{ secrets.MEMCACHED_SSH_KEY }}
          server: ${{ secrets.MEMCACHED_SERVER }}
      - name: Cache Alire and FSF GNAT
        if: ${{ matrix.gnat-distrib == 'fsf' }}
        uses: actions/cache@v2
        with:
          path: |
            ~/.config/alire
            build/alire
          key: ${{ runner.os }}-alire${{ env.ALIRE_VERSION }}-python${{ env.PYTHON_VERSION }}-${{ matrix.gnat-distrib }}${{ matrix.gnat-version }}-${{ hashFiles('setup.py', '.config/python-style/setup.cfg', 'Makefile') }}
      - name: Install Alire
        if: ${{ matrix.gnat-distrib == 'fsf' }}
        uses: alire-project/setup-alire@v1
        with:
          version: ${{ env.ALIRE_VERSION }}
          toolchain: "--disable-assistant"
      - name: Install FSF GNAT
        if: ${{ matrix.gnat-distrib == 'fsf' }}
        env:
          FSF_GNAT_VERSION: ${{ matrix.gnat-version }}
        run: |
          make install_gnat
      # Note: RecordFlux-parser depends on the GNAT toolchain. If the caching of Python dependencies
      # is used, it must be ensured that the cached RecordFlux-parser fits to the selected GNAT
      # toolchain. In case of FSF GNAT, some libraries required by RecordFlux-parser
      # (e.g., libgnatcoll.so) must be cached as well, as they will be only created, if the
      # compilation during the installation of RecordFlux-parser is executed.
      - name: Install dependencies
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
          echo "HYPOTHESIS_PROFILE=ci" >> $GITHUB_ENV
          sudo apt install graphviz libgmp-dev patchelf
          python -m pip install --upgrade pip wheel
          eval `make printenv_gnat`
          gnat --version
          make init install_devel
      - name: Test
        run: |
          eval `make printenv_gnat`
          gnat --version
          make test_compilation

  binary_size:
    name: Binary size
    runs-on: ubuntu-20.04
    env:
      python-version: "3.8"
      gnat-version: "23.0w-20220723"
      GNAT: "pro23.0w-20220723"
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Python ${{ env.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}
      - name: Determine exact Python version
        run:
          echo "PYTHON_VERSION=$(python -c 'import platform; print(platform.python_version())')" >> $GITHUB_ENV
      - name: Cache Python dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python${{ env.python-version }}/site-packages
            ~/.local/bin
          key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-gnat${{ env.GNAT }}-${{ hashFiles('setup.py', '.config/python-style/setup.cfg') }}
      - name: Install GNAT Pro
        uses: ./.github/actions/install_gnat_pro
        with:
          version: ${{ env.GNAT_VERSION }}
          ssh_key: ${{ secrets.MEMCACHED_SSH_KEY }}
          server: ${{ secrets.MEMCACHED_SERVER }}
      - name: Install dependencies
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
          echo "HYPOTHESIS_PROFILE=ci" >> $GITHUB_ENV
          sudo apt install graphviz libgmp-dev patchelf
          python -m pip install --upgrade pip wheel
          make init install_devel
      - name: Test
        run: |
          make test_binary_size

  verification_property_tests:
    name: Verification
    if: github.event.schedule
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        target: ["property_tests"]
        python-version: [3.8]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Determine exact Python version
      run:
        echo "PYTHON_VERSION=$(python -c 'import platform; print(platform.python_version())')" >> $GITHUB_ENV
    - name: Cache Python dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ matrix.python-version }}/site-packages
          ~/.local/bin
        key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('setup.py', '.config/python-style/setup.cfg') }}
    - name: Cache GNAT Community
      uses: actions/cache@v2
      with:
        path: /home/runner/work/gnat
        key: ${{ runner.os }}-gnat-ce2021
    - name: Install GNAT Community
      uses: ada-actions/toolchain@ce2021
      with:
        distrib: community
        install_dir: /home/runner/work/gnat
    - name: Install SPARK Pro
      uses: ./.github/actions/install_spark_pro
      with:
        version: ${{ env.SPARK_VERSION }}
        ssh_key: ${{ secrets.MEMCACHED_SSH_KEY }}
        server: ${{ secrets.MEMCACHED_SERVER }}
    - name: Install dependencies
      run: |
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
        echo "HYPOTHESIS_PROFILE=ci" >> $GITHUB_ENV
        sudo apt install graphviz libgmp-dev patchelf
        python -m pip install --upgrade pip wheel
        make init install_devel
    - name: Restore SPARK cache
      uses: actions/cache/restore@v3.2.2
      with:
        path: |
          build/gnatprove_cache
        key: spark-${{ matrix.target }}-${{ runner.os }}-spark${{ env.SPARK_VERSION }}-${{ github.run_id }}-${{ github.run_attempt }}
        restore-keys: |
          spark-${{ matrix.target }}-${{ runner.os }}-spark${{ env.SPARK_VERSION }}
    - name: Test
      run: |
        make prove_${{ matrix.target }}
    - name: Save SPARK cache
      uses: actions/cache/save@v3.2.2
      if: always()
      with:
        path: |
          build/gnatprove_cache
        key: spark-${{ matrix.target }}-${{ runner.os }}-spark${{ env.SPARK_VERSION }}-${{ github.run_id }}-${{ github.run_attempt }}


  verification_spark:
    name: Verification
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        target:
          - "tests"
        test:
          - "builtin_types"
          - "custom_types"
          - "derivation"
          - "enumeration"
          - "ethernet"
          - "expression"
          - "fixed_size"
          - "in_ethernet"
          - "in_ipv4"
          - "in_tlv"
          - "ipv4"
          - "sequence"
          - "tlv"
        include:
          - target: "python_tests"
    env:
      python-version: "3.8"
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.python-version }}
    - name: Determine exact Python version
      run:
        echo "PYTHON_VERSION=$(python -c 'import platform; print(platform.python_version())')" >> $GITHUB_ENV
    - name: Cache Python dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ env.python-version }}/site-packages
          ~/.local/bin
        key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('setup.py', '.config/python-style/setup.cfg') }}
    - name: Cache GNAT Community
      uses: actions/cache@v2
      with:
        path: /home/runner/work/gnat
        key: ${{ runner.os }}-gnat-ce2021
    - name: Install GNAT Community
      uses: ada-actions/toolchain@ce2021
      with:
        distrib: community
        install_dir: /home/runner/work/gnat
    - name: Install SPARK Pro
      uses: ./.github/actions/install_spark_pro
      with:
        version: ${{ env.SPARK_VERSION }}
        ssh_key: ${{ secrets.MEMCACHED_SSH_KEY }}
        server: ${{ secrets.MEMCACHED_SERVER }}
    - name: Install dependencies
      run: |
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
        sudo apt install libgmp-dev patchelf
        python -m pip install --upgrade pip wheel
        make init install_devel
    - name: Restore SPARK cache
      uses: actions/cache/restore@v3.2.2
      with:
        path: |
          build/gnatprove_cache
          build/test/gnatprove
        key: spark-${{ matrix.target }}-${{ matrix.test }}-${{ runner.os }}-spark${{ env.SPARK_VERSION }}-${{ github.run_id }}-${{ github.run_attempt }}
        restore-keys: |
          spark-${{ matrix.target }}-${{ matrix.test }}-${{ runner.os }}-spark${{ env.SPARK_VERSION }}
    - name: Verify
      env:
        TEST: ${{ matrix.test }}
      run: |
        # Reduce the number of parallel test processes to prevent insufficient memory.
        # Since 24.0w-20221214 there is a gnatwhy3 process that takes an awful lot of memory for one
        # of the test cases.
        test "${{ matrix.target}}" = "python_tests" && export TEST_PROCS=1 || true
        make prove_${{ matrix.target }}
    - name: Save SPARK cache
      uses: actions/cache/save@v3.2.2
      if: always()
      with:
        path: |
          build/gnatprove_cache
          build/test/gnatprove
        key: spark-${{ matrix.target }}-${{ matrix.test }}-${{ runner.os }}-spark${{ env.SPARK_VERSION }}-${{ github.run_id }}-${{ github.run_attempt }}

  tests_apps:
    name: App Tests
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
        gnat-distrib:
          - "community"
        gnat-version:
          - "2021"
        include:
          - python-version: "3.8"
            gnat-distrib: "fsf"
            gnat-version: "11.2.4"
    env:
      GNAT: ${{ matrix.gnat-distrib }}${{ matrix.gnat-version }}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Determine exact Python version
      run:
        echo "PYTHON_VERSION=$(python -c 'import platform; print(platform.python_version())')" >> $GITHUB_ENV
    - name: Cache Python dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ matrix.python-version }}/site-packages
          ~/.local/bin
        key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('setup.py', '.config/python-style/setup.cfg') }}
    - name: Cache GNAT Community
      uses: actions/cache@v2
      with:
        path: /home/runner/work/gnat
        key: ${{ runner.os }}-gnat-ce2021
    - name: Install GNAT Community
      uses: ada-actions/toolchain@ce2021
      with:
        distrib: community
        install_dir: /home/runner/work/gnat
    - name: Install dependencies
      run: |
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
        echo "HYPOTHESIS_PROFILE=ci" >> $GITHUB_ENV
        sudo apt install graphviz libgmp-dev patchelf dnsmasq
        python -m pip install --upgrade pip wheel
        make init install_devel
    - name: Install Alire
      if: ${{ matrix.gnat-distrib == 'fsf' }}
      uses: alire-project/setup-alire@v1
      with:
        version: ${{ env.ALIRE_VERSION }}
        toolchain: "--disable-assistant"
    - name: Install FSF GNAT
      if: ${{ matrix.gnat-distrib == 'fsf' }}
      env:
        FSF_GNAT_VERSION: ${{ matrix.gnat-version }}
      run: |
        make install_gnat
    - name: Configure kernel parameters
      run: |
        sudo /sbin/sysctl -w net.ipv4.ping_group_range="0 2147483647"
    - name: Test
      run: |
        eval `make printenv_gnat`
        gnat --version
        make test_apps

  verification_apps:
    name: App Verification
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        app:
          - ping
          - dhcp_client
    env:
      python-version: "3.8"
      # SPARK requires more than the available 7 GB of RAM for proving the DHCP client, if multiple
      # processes are used.
      GNATPROVE_PROCS: 1
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.python-version }}
    - name: Determine exact Python version
      run:
        echo "PYTHON_VERSION=$(python -c 'import platform; print(platform.python_version())')" >> $GITHUB_ENV
    - name: Cache Python dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ env.python-version }}/site-packages
          ~/.local/bin
        key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('setup.py', '.config/python-style/setup.cfg') }}
    - name: Cache GNAT Community
      uses: actions/cache@v2
      with:
        path: /home/runner/work/gnat
        key: ${{ runner.os }}-gnat-ce2021
    - name: Install GNAT Community
      uses: ada-actions/toolchain@ce2021
      with:
        distrib: community
        install_dir: /home/runner/work/gnat
    - name: Install SPARK Pro
      uses: ./.github/actions/install_spark_pro
      with:
        version: ${{ env.SPARK_VERSION }}
        ssh_key: ${{ secrets.MEMCACHED_SSH_KEY }}
        server: ${{ secrets.MEMCACHED_SERVER }}
    - name: Install dependencies
      run: |
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
        sudo apt install libgmp-dev patchelf
        python -m pip install --upgrade pip wheel
        make init install_devel
    - name: Restore SPARK cache
      uses: actions/cache/restore@v3.2.2
      with:
        path: |
          build/gnatprove_cache
          examples/apps/${{ matrix.app }}/obj/gnatprove
        key: spark-${{ matrix.app }}-${{ runner.os }}-spark${{ env.SPARK_VERSION }}-${{ github.run_id }}-${{ github.run_attempt }}
        restore-keys: |
          spark-${{ matrix.app }}-${{ runner.os }}-spark${{ env.SPARK_VERSION }}
    - name: Verify
      run: |
        make -C examples/apps/${{ matrix.app }} prove
    - name: Save SPARK cache
      uses: actions/cache/save@v3.2.2
      if: always()
      with:
        path: |
          build/gnatprove_cache
          examples/apps/${{ matrix.app }}/obj/gnatprove
        key: spark-${{ matrix.app }}-${{ runner.os }}-spark${{ env.SPARK_VERSION }}-${{ github.run_id }}-${{ github.run_attempt }}

  tests_specs:
    name: Specification Tests
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        gnat-distrib:
          - "community"
          - "fsf"
    env:
      python-version: "3.8"
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python ${{ env.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.python-version }}
    - name: Determine exact Python version
      run:
        echo "PYTHON_VERSION=$(python -c 'import platform; print(platform.python_version())')" >> $GITHUB_ENV
    - name: Cache Python dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ env.python-version }}/site-packages
          ~/.local/bin
        key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('setup.py', '.config/python-style/setup.cfg') }}
    - name: Cache GNAT Community
      uses: actions/cache@v2
      with:
        path: /home/runner/work/gnat
        key: ${{ runner.os }}-gnat-ce2021
    - name: Install GNAT Community
      uses: ada-actions/toolchain@ce2021
      with:
        distrib: community
        install_dir: /home/runner/work/gnat
    - name: Install dependencies
      run: |
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
        echo "HYPOTHESIS_PROFILE=ci" >> $GITHUB_ENV
        sudo apt install graphviz libgmp-dev patchelf
        python -m pip install --upgrade pip wheel
        make init install_devel
    - name: Install Alire
      if: ${{ matrix.gnat-distrib == 'fsf' }}
      uses: alire-project/setup-alire@v1
      with:
        version: ${{ env.ALIRE_VERSION }}
        toolchain: "--disable-assistant"
    - name: Install FSF GNAT
      if: ${{ matrix.gnat-distrib == 'fsf' }}
      run: |
        make install_gnat
    - name: Test
      run: |
        eval `make printenv_gnat`
        gnat --version
        make test_specs

  documentation:
    name: Documentation
    runs-on: ubuntu-20.04
    env:
      python-version: "3.8"
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.python-version }}
    - name: Determine exact Python version
      run:
        echo "PYTHON_VERSION=$(python -c 'import platform; print(platform.python_version())')" >> $GITHUB_ENV
    - name: Cache Python dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python${{ env.python-version }}/site-packages
          ~/.local/bin
        key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('setup.py', '.config/python-style/setup.cfg') }}
    - name: Cache GNAT Community
      uses: actions/cache@v2
      with:
        path: /home/runner/work/gnat
        key: ${{ runner.os }}-gnat-ce2021
    - name: Install GNAT Community
      uses: ada-actions/toolchain@ce2021
      with:
        distrib: community
        install_dir: /home/runner/work/gnat
    - name: Install dependencies
      run: |
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
        sudo apt install libgmp-dev patchelf
        python -m pip install --upgrade pip wheel
        make init install_devel
    - name: Generate
      run: |
        make doc
